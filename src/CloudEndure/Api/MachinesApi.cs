/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using CloudEndure.Client;
using CloudEndure.Model;

namespace CloudEndure.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IMachinesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Uninstall multiple agents
        /// </summary>
        /// <remarks>
        /// Stops replication and removes the cloudendure agent from the specified machines. All cloud artifacts associated with those machines with the exception of launched target machines are deleted.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of machine IDs to remove from the CloudEndure service.</param>
        /// <param name="projectId"></param>
        /// <returns></returns>
        void ProjectsProjectIdMachinesDelete (Body8 body, string projectId);

        /// <summary>
        /// Uninstall multiple agents
        /// </summary>
        /// <remarks>
        /// Stops replication and removes the cloudendure agent from the specified machines. All cloud artifacts associated with those machines with the exception of launched target machines are deleted.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of machine IDs to remove from the CloudEndure service.</param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectsProjectIdMachinesDeleteWithHttpInfo (Body8 body, string projectId);
        /// <summary>
        /// List Machines
        /// </summary>
        /// <remarks>
        /// Returns the list of all source machines in the Project (i.e. machines that have an Agent installed).
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="all">When set to false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status. machines are consuming/ have consumed licenses.  Note that some license types are transferable and therefore once you remove the and set to true false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status.  (optional, default to false)</param>
        /// <param name="types">Use this url query param to control which machines are returned when doing GET.  If you do not include the \\\&quot;types\\\&quot; query param, you will only get source machines  (optional)</param>
        /// <returns>MachinesList</returns>
        MachinesList ProjectsProjectIdMachinesGet (string projectId, int? offset = null, int? limit = null, bool? all = null, string types = null);

        /// <summary>
        /// List Machines
        /// </summary>
        /// <remarks>
        /// Returns the list of all source machines in the Project (i.e. machines that have an Agent installed).
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="all">When set to false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status. machines are consuming/ have consumed licenses.  Note that some license types are transferable and therefore once you remove the and set to true false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status.  (optional, default to false)</param>
        /// <param name="types">Use this url query param to control which machines are returned when doing GET.  If you do not include the \\\&quot;types\\\&quot; query param, you will only get source machines  (optional)</param>
        /// <returns>ApiResponse of MachinesList</returns>
        ApiResponse<MachinesList> ProjectsProjectIdMachinesGetWithHttpInfo (string projectId, int? offset = null, int? limit = null, bool? all = null, string types = null);
        /// <summary>
        /// Uninstall agent
        /// </summary>
        /// <remarks>
        /// Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns></returns>
        void ProjectsProjectIdMachinesMachineIdDelete (string projectId, string machineId);

        /// <summary>
        /// Uninstall agent
        /// </summary>
        /// <remarks>
        /// Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectsProjectIdMachinesMachineIdDeleteWithHttpInfo (string projectId, string machineId);
        /// <summary>
        /// Get a specific machine.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Machine</returns>
        Machine ProjectsProjectIdMachinesMachineIdGet (string projectId, string machineId);

        /// <summary>
        /// Get a specific machine.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>ApiResponse of Machine</returns>
        ApiResponse<Machine> ProjectsProjectIdMachinesMachineIdGetWithHttpInfo (string projectId, string machineId);
        /// <summary>
        /// Update a machine. Accepts only Launch time updates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Machine</returns>
        Machine ProjectsProjectIdMachinesMachineIdPatch (Machine body, string projectId, string machineId);

        /// <summary>
        /// Update a machine. Accepts only Launch time updates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>ApiResponse of Machine</returns>
        ApiResponse<Machine> ProjectsProjectIdMachinesMachineIdPatchWithHttpInfo (Machine body, string projectId, string machineId);
        /// <summary>
        /// Batch-update multiple machines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>MachinesList</returns>
        MachinesList ProjectsProjectIdMachinesPatch (MachinesList body, string projectId);

        /// <summary>
        /// Batch-update multiple machines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of MachinesList</returns>
        ApiResponse<MachinesList> ProjectsProjectIdMachinesPatchWithHttpInfo (MachinesList body, string projectId);
        /// <summary>
        /// Get Target Machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="replicaId"></param>
        /// <returns>Replica</returns>
        Replica ProjectsProjectIdReplicasReplicaIdGet (string projectId, string replicaId);

        /// <summary>
        /// Get Target Machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="replicaId"></param>
        /// <returns>ApiResponse of Replica</returns>
        ApiResponse<Replica> ProjectsProjectIdReplicasReplicaIdGetWithHttpInfo (string projectId, string replicaId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Uninstall multiple agents
        /// </summary>
        /// <remarks>
        /// Stops replication and removes the cloudendure agent from the specified machines. All cloud artifacts associated with those machines with the exception of launched target machines are deleted.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of machine IDs to remove from the CloudEndure service.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectsProjectIdMachinesDeleteAsync (Body8 body, string projectId);

        /// <summary>
        /// Uninstall multiple agents
        /// </summary>
        /// <remarks>
        /// Stops replication and removes the cloudendure agent from the specified machines. All cloud artifacts associated with those machines with the exception of launched target machines are deleted.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of machine IDs to remove from the CloudEndure service.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsProjectIdMachinesDeleteAsyncWithHttpInfo (Body8 body, string projectId);
        /// <summary>
        /// List Machines
        /// </summary>
        /// <remarks>
        /// Returns the list of all source machines in the Project (i.e. machines that have an Agent installed).
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="all">When set to false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status. machines are consuming/ have consumed licenses.  Note that some license types are transferable and therefore once you remove the and set to true false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status.  (optional, default to false)</param>
        /// <param name="types">Use this url query param to control which machines are returned when doing GET.  If you do not include the \\\&quot;types\\\&quot; query param, you will only get source machines  (optional)</param>
        /// <returns>Task of MachinesList</returns>
        System.Threading.Tasks.Task<MachinesList> ProjectsProjectIdMachinesGetAsync (string projectId, int? offset = null, int? limit = null, bool? all = null, string types = null);

        /// <summary>
        /// List Machines
        /// </summary>
        /// <remarks>
        /// Returns the list of all source machines in the Project (i.e. machines that have an Agent installed).
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="all">When set to false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status. machines are consuming/ have consumed licenses.  Note that some license types are transferable and therefore once you remove the and set to true false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status.  (optional, default to false)</param>
        /// <param name="types">Use this url query param to control which machines are returned when doing GET.  If you do not include the \\\&quot;types\\\&quot; query param, you will only get source machines  (optional)</param>
        /// <returns>Task of ApiResponse (MachinesList)</returns>
        System.Threading.Tasks.Task<ApiResponse<MachinesList>> ProjectsProjectIdMachinesGetAsyncWithHttpInfo (string projectId, int? offset = null, int? limit = null, bool? all = null, string types = null);
        /// <summary>
        /// Uninstall agent
        /// </summary>
        /// <remarks>
        /// Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectsProjectIdMachinesMachineIdDeleteAsync (string projectId, string machineId);

        /// <summary>
        /// Uninstall agent
        /// </summary>
        /// <remarks>
        /// Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsProjectIdMachinesMachineIdDeleteAsyncWithHttpInfo (string projectId, string machineId);
        /// <summary>
        /// Get a specific machine.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of Machine</returns>
        System.Threading.Tasks.Task<Machine> ProjectsProjectIdMachinesMachineIdGetAsync (string projectId, string machineId);

        /// <summary>
        /// Get a specific machine.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of ApiResponse (Machine)</returns>
        System.Threading.Tasks.Task<ApiResponse<Machine>> ProjectsProjectIdMachinesMachineIdGetAsyncWithHttpInfo (string projectId, string machineId);
        /// <summary>
        /// Update a machine. Accepts only Launch time updates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of Machine</returns>
        System.Threading.Tasks.Task<Machine> ProjectsProjectIdMachinesMachineIdPatchAsync (Machine body, string projectId, string machineId);

        /// <summary>
        /// Update a machine. Accepts only Launch time updates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of ApiResponse (Machine)</returns>
        System.Threading.Tasks.Task<ApiResponse<Machine>> ProjectsProjectIdMachinesMachineIdPatchAsyncWithHttpInfo (Machine body, string projectId, string machineId);
        /// <summary>
        /// Batch-update multiple machines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of MachinesList</returns>
        System.Threading.Tasks.Task<MachinesList> ProjectsProjectIdMachinesPatchAsync (MachinesList body, string projectId);

        /// <summary>
        /// Batch-update multiple machines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (MachinesList)</returns>
        System.Threading.Tasks.Task<ApiResponse<MachinesList>> ProjectsProjectIdMachinesPatchAsyncWithHttpInfo (MachinesList body, string projectId);
        /// <summary>
        /// Get Target Machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="replicaId"></param>
        /// <returns>Task of Replica</returns>
        System.Threading.Tasks.Task<Replica> ProjectsProjectIdReplicasReplicaIdGetAsync (string projectId, string replicaId);

        /// <summary>
        /// Get Target Machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="replicaId"></param>
        /// <returns>Task of ApiResponse (Replica)</returns>
        System.Threading.Tasks.Task<ApiResponse<Replica>> ProjectsProjectIdReplicasReplicaIdGetAsyncWithHttpInfo (string projectId, string replicaId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class MachinesApi : IMachinesApi
    {
        private CloudEndure.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MachinesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MachinesApi(String basePath)
        {
            this.Configuration = new CloudEndure.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MachinesApi"/> class
        /// </summary>
        /// <returns></returns>
        public MachinesApi()
        {
            this.Configuration = CloudEndure.Client.Configuration.Default;

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MachinesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MachinesApi(CloudEndure.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CloudEndure.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CloudEndure.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CloudEndure.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Uninstall multiple agents Stops replication and removes the cloudendure agent from the specified machines. All cloud artifacts associated with those machines with the exception of launched target machines are deleted.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of machine IDs to remove from the CloudEndure service.</param>
        /// <param name="projectId"></param>
        /// <returns></returns>
        public void ProjectsProjectIdMachinesDelete (Body8 body, string projectId)
        {
             ProjectsProjectIdMachinesDeleteWithHttpInfo(body, projectId);
        }

        /// <summary>
        /// Uninstall multiple agents Stops replication and removes the cloudendure agent from the specified machines. All cloud artifacts associated with those machines with the exception of launched target machines are deleted.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of machine IDs to remove from the CloudEndure service.</param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProjectsProjectIdMachinesDeleteWithHttpInfo (Body8 body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachinesApi->ProjectsProjectIdMachinesDelete");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling MachinesApi->ProjectsProjectIdMachinesDelete");

            var localVarPath = "./projects/{projectId}/machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uninstall multiple agents Stops replication and removes the cloudendure agent from the specified machines. All cloud artifacts associated with those machines with the exception of launched target machines are deleted.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of machine IDs to remove from the CloudEndure service.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectsProjectIdMachinesDeleteAsync (Body8 body, string projectId)
        {
             await ProjectsProjectIdMachinesDeleteAsyncWithHttpInfo(body, projectId);

        }

        /// <summary>
        /// Uninstall multiple agents Stops replication and removes the cloudendure agent from the specified machines. All cloud artifacts associated with those machines with the exception of launched target machines are deleted.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of machine IDs to remove from the CloudEndure service.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsProjectIdMachinesDeleteAsyncWithHttpInfo (Body8 body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachinesApi->ProjectsProjectIdMachinesDelete");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling MachinesApi->ProjectsProjectIdMachinesDelete");

            var localVarPath = "./projects/{projectId}/machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List Machines Returns the list of all source machines in the Project (i.e. machines that have an Agent installed).
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="all">When set to false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status. machines are consuming/ have consumed licenses.  Note that some license types are transferable and therefore once you remove the and set to true false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status.  (optional, default to false)</param>
        /// <param name="types">Use this url query param to control which machines are returned when doing GET.  If you do not include the \\\&quot;types\\\&quot; query param, you will only get source machines  (optional)</param>
        /// <returns>MachinesList</returns>
        public MachinesList ProjectsProjectIdMachinesGet (string projectId, int? offset = null, int? limit = null, bool? all = null, string types = null)
        {
             ApiResponse<MachinesList> localVarResponse = ProjectsProjectIdMachinesGetWithHttpInfo(projectId, offset, limit, all, types);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Machines Returns the list of all source machines in the Project (i.e. machines that have an Agent installed).
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="all">When set to false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status. machines are consuming/ have consumed licenses.  Note that some license types are transferable and therefore once you remove the and set to true false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status.  (optional, default to false)</param>
        /// <param name="types">Use this url query param to control which machines are returned when doing GET.  If you do not include the \\\&quot;types\\\&quot; query param, you will only get source machines  (optional)</param>
        /// <returns>ApiResponse of MachinesList</returns>
        public ApiResponse< MachinesList > ProjectsProjectIdMachinesGetWithHttpInfo (string projectId, int? offset = null, int? limit = null, bool? all = null, string types = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling MachinesApi->ProjectsProjectIdMachinesGet");

            var localVarPath = "./projects/{projectId}/machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (all != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "all", all)); // query parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MachinesList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MachinesList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MachinesList)));
        }

        /// <summary>
        /// List Machines Returns the list of all source machines in the Project (i.e. machines that have an Agent installed).
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="all">When set to false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status. machines are consuming/ have consumed licenses.  Note that some license types are transferable and therefore once you remove the and set to true false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status.  (optional, default to false)</param>
        /// <param name="types">Use this url query param to control which machines are returned when doing GET.  If you do not include the \\\&quot;types\\\&quot; query param, you will only get source machines  (optional)</param>
        /// <returns>Task of MachinesList</returns>
        public async System.Threading.Tasks.Task<MachinesList> ProjectsProjectIdMachinesGetAsync (string projectId, int? offset = null, int? limit = null, bool? all = null, string types = null)
        {
             ApiResponse<MachinesList> localVarResponse = await ProjectsProjectIdMachinesGetAsyncWithHttpInfo(projectId, offset, limit, all, types);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Machines Returns the list of all source machines in the Project (i.e. machines that have an Agent installed).
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="all">When set to false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status. machines are consuming/ have consumed licenses.  Note that some license types are transferable and therefore once you remove the and set to true false, returns only currently replicating machines. When set to true, returns all machines in the project regardless of replications status.  (optional, default to false)</param>
        /// <param name="types">Use this url query param to control which machines are returned when doing GET.  If you do not include the \\\&quot;types\\\&quot; query param, you will only get source machines  (optional)</param>
        /// <returns>Task of ApiResponse (MachinesList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MachinesList>> ProjectsProjectIdMachinesGetAsyncWithHttpInfo (string projectId, int? offset = null, int? limit = null, bool? all = null, string types = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling MachinesApi->ProjectsProjectIdMachinesGet");

            var localVarPath = "./projects/{projectId}/machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (all != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "all", all)); // query parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MachinesList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MachinesList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MachinesList)));
        }

        /// <summary>
        /// Uninstall agent Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns></returns>
        public void ProjectsProjectIdMachinesMachineIdDelete (string projectId, string machineId)
        {
             ProjectsProjectIdMachinesMachineIdDeleteWithHttpInfo(projectId, machineId);
        }

        /// <summary>
        /// Uninstall agent Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProjectsProjectIdMachinesMachineIdDeleteWithHttpInfo (string projectId, string machineId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling MachinesApi->ProjectsProjectIdMachinesMachineIdDelete");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling MachinesApi->ProjectsProjectIdMachinesMachineIdDelete");

            var localVarPath = "./projects/{projectId}/machines/{machineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uninstall agent Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectsProjectIdMachinesMachineIdDeleteAsync (string projectId, string machineId)
        {
             await ProjectsProjectIdMachinesMachineIdDeleteAsyncWithHttpInfo(projectId, machineId);

        }

        /// <summary>
        /// Uninstall agent Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsProjectIdMachinesMachineIdDeleteAsyncWithHttpInfo (string projectId, string machineId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling MachinesApi->ProjectsProjectIdMachinesMachineIdDelete");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling MachinesApi->ProjectsProjectIdMachinesMachineIdDelete");

            var localVarPath = "./projects/{projectId}/machines/{machineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a specific machine. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Machine</returns>
        public Machine ProjectsProjectIdMachinesMachineIdGet (string projectId, string machineId)
        {
             ApiResponse<Machine> localVarResponse = ProjectsProjectIdMachinesMachineIdGetWithHttpInfo(projectId, machineId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific machine. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>ApiResponse of Machine</returns>
        public ApiResponse< Machine > ProjectsProjectIdMachinesMachineIdGetWithHttpInfo (string projectId, string machineId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling MachinesApi->ProjectsProjectIdMachinesMachineIdGet");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling MachinesApi->ProjectsProjectIdMachinesMachineIdGet");

            var localVarPath = "./projects/{projectId}/machines/{machineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Machine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Machine) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Machine)));
        }

        /// <summary>
        /// Get a specific machine. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of Machine</returns>
        public async System.Threading.Tasks.Task<Machine> ProjectsProjectIdMachinesMachineIdGetAsync (string projectId, string machineId)
        {
             ApiResponse<Machine> localVarResponse = await ProjectsProjectIdMachinesMachineIdGetAsyncWithHttpInfo(projectId, machineId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific machine. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of ApiResponse (Machine)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Machine>> ProjectsProjectIdMachinesMachineIdGetAsyncWithHttpInfo (string projectId, string machineId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling MachinesApi->ProjectsProjectIdMachinesMachineIdGet");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling MachinesApi->ProjectsProjectIdMachinesMachineIdGet");

            var localVarPath = "./projects/{projectId}/machines/{machineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Machine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Machine) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Machine)));
        }

        /// <summary>
        /// Update a machine. Accepts only Launch time updates. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Machine</returns>
        public Machine ProjectsProjectIdMachinesMachineIdPatch (Machine body, string projectId, string machineId)
        {
             ApiResponse<Machine> localVarResponse = ProjectsProjectIdMachinesMachineIdPatchWithHttpInfo(body, projectId, machineId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a machine. Accepts only Launch time updates. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>ApiResponse of Machine</returns>
        public ApiResponse< Machine > ProjectsProjectIdMachinesMachineIdPatchWithHttpInfo (Machine body, string projectId, string machineId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachinesApi->ProjectsProjectIdMachinesMachineIdPatch");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling MachinesApi->ProjectsProjectIdMachinesMachineIdPatch");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling MachinesApi->ProjectsProjectIdMachinesMachineIdPatch");

            var localVarPath = "./projects/{projectId}/machines/{machineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Machine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Machine) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Machine)));
        }

        /// <summary>
        /// Update a machine. Accepts only Launch time updates. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of Machine</returns>
        public async System.Threading.Tasks.Task<Machine> ProjectsProjectIdMachinesMachineIdPatchAsync (Machine body, string projectId, string machineId)
        {
             ApiResponse<Machine> localVarResponse = await ProjectsProjectIdMachinesMachineIdPatchAsyncWithHttpInfo(body, projectId, machineId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a machine. Accepts only Launch time updates. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of ApiResponse (Machine)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Machine>> ProjectsProjectIdMachinesMachineIdPatchAsyncWithHttpInfo (Machine body, string projectId, string machineId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachinesApi->ProjectsProjectIdMachinesMachineIdPatch");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling MachinesApi->ProjectsProjectIdMachinesMachineIdPatch");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling MachinesApi->ProjectsProjectIdMachinesMachineIdPatch");

            var localVarPath = "./projects/{projectId}/machines/{machineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Machine>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Machine) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Machine)));
        }

        /// <summary>
        /// Batch-update multiple machines 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>MachinesList</returns>
        public MachinesList ProjectsProjectIdMachinesPatch (MachinesList body, string projectId)
        {
             ApiResponse<MachinesList> localVarResponse = ProjectsProjectIdMachinesPatchWithHttpInfo(body, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Batch-update multiple machines 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of MachinesList</returns>
        public ApiResponse< MachinesList > ProjectsProjectIdMachinesPatchWithHttpInfo (MachinesList body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachinesApi->ProjectsProjectIdMachinesPatch");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling MachinesApi->ProjectsProjectIdMachinesPatch");

            var localVarPath = "./projects/{projectId}/machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MachinesList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MachinesList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MachinesList)));
        }

        /// <summary>
        /// Batch-update multiple machines 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of MachinesList</returns>
        public async System.Threading.Tasks.Task<MachinesList> ProjectsProjectIdMachinesPatchAsync (MachinesList body, string projectId)
        {
             ApiResponse<MachinesList> localVarResponse = await ProjectsProjectIdMachinesPatchAsyncWithHttpInfo(body, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Batch-update multiple machines 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (MachinesList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MachinesList>> ProjectsProjectIdMachinesPatchAsyncWithHttpInfo (MachinesList body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MachinesApi->ProjectsProjectIdMachinesPatch");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling MachinesApi->ProjectsProjectIdMachinesPatch");

            var localVarPath = "./projects/{projectId}/machines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MachinesList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MachinesList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MachinesList)));
        }

        /// <summary>
        /// Get Target Machine 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="replicaId"></param>
        /// <returns>Replica</returns>
        public Replica ProjectsProjectIdReplicasReplicaIdGet (string projectId, string replicaId)
        {
             ApiResponse<Replica> localVarResponse = ProjectsProjectIdReplicasReplicaIdGetWithHttpInfo(projectId, replicaId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Target Machine 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="replicaId"></param>
        /// <returns>ApiResponse of Replica</returns>
        public ApiResponse< Replica > ProjectsProjectIdReplicasReplicaIdGetWithHttpInfo (string projectId, string replicaId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling MachinesApi->ProjectsProjectIdReplicasReplicaIdGet");
            // verify the required parameter 'replicaId' is set
            if (replicaId == null)
                throw new ApiException(400, "Missing required parameter 'replicaId' when calling MachinesApi->ProjectsProjectIdReplicasReplicaIdGet");

            var localVarPath = "./projects/{projectId}/replicas/{replicaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (replicaId != null) localVarPathParams.Add("replicaId", this.Configuration.ApiClient.ParameterToString(replicaId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdReplicasReplicaIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Replica>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Replica) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Replica)));
        }

        /// <summary>
        /// Get Target Machine 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="replicaId"></param>
        /// <returns>Task of Replica</returns>
        public async System.Threading.Tasks.Task<Replica> ProjectsProjectIdReplicasReplicaIdGetAsync (string projectId, string replicaId)
        {
             ApiResponse<Replica> localVarResponse = await ProjectsProjectIdReplicasReplicaIdGetAsyncWithHttpInfo(projectId, replicaId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Target Machine 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="replicaId"></param>
        /// <returns>Task of ApiResponse (Replica)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Replica>> ProjectsProjectIdReplicasReplicaIdGetAsyncWithHttpInfo (string projectId, string replicaId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling MachinesApi->ProjectsProjectIdReplicasReplicaIdGet");
            // verify the required parameter 'replicaId' is set
            if (replicaId == null)
                throw new ApiException(400, "Missing required parameter 'replicaId' when calling MachinesApi->ProjectsProjectIdReplicasReplicaIdGet");

            var localVarPath = "./projects/{projectId}/replicas/{replicaId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (replicaId != null) localVarPathParams.Add("replicaId", this.Configuration.ApiClient.ParameterToString(replicaId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdReplicasReplicaIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Replica>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Replica) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Replica)));
        }

    }
}
