/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using CloudEndure.Client;
using CloudEndure.Model;

namespace CloudEndure.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IActionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// Returns the list of jobs in the project.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>JobsList</returns>
        JobsList ProjectsProjectIdJobsGet (string projectId, int? offset = null, int? limit = null);

        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// Returns the list of jobs in the project.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>ApiResponse of JobsList</returns>
        ApiResponse<JobsList> ProjectsProjectIdJobsGetWithHttpInfo (string projectId, int? offset = null, int? limit = null);
        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="jobId"></param>
        /// <returns>Job</returns>
        Job ProjectsProjectIdJobsJobIdGet (string projectId, string jobId);

        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> ProjectsProjectIdJobsJobIdGetWithHttpInfo (string projectId, string jobId);
        /// <summary>
        /// Launch target machines
        /// </summary>
        /// <remarks>
        /// Launch target machines for test, recovery or cutover (by passing enum value to launchType param)
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Machines to launch</param>
        /// <param name="projectId"></param>
        /// <returns>Job</returns>
        Job ProjectsProjectIdLaunchMachinesPost (LaunchMachinesParameters body, string projectId);

        /// <summary>
        /// Launch target machines
        /// </summary>
        /// <remarks>
        /// Launch target machines for test, recovery or cutover (by passing enum value to launchType param)
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Machines to launch</param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> ProjectsProjectIdLaunchMachinesPostWithHttpInfo (LaunchMachinesParameters body, string projectId);
        /// <summary>
        /// Launch restore servers
        /// </summary>
        /// <remarks>
        /// Launch restore servers for the Backup service
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Job</returns>
        Job ProjectsProjectIdLaunchRestoreServersPost (LaunchMachinesParameters body, string projectId);

        /// <summary>
        /// Launch restore servers
        /// </summary>
        /// <remarks>
        /// Launch restore servers for the Backup service
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> ProjectsProjectIdLaunchRestoreServersPostWithHttpInfo (LaunchMachinesParameters body, string projectId);
        /// <summary>
        /// Moves machines to another project
        /// </summary>
        /// <remarks>
        /// TBC 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns></returns>
        void ProjectsProjectIdMoveMachinesPost (Body4 body, string projectId);

        /// <summary>
        /// Moves machines to another project
        /// </summary>
        /// <remarks>
        /// TBC 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectsProjectIdMoveMachinesPostWithHttpInfo (Body4 body, string projectId);
        /// <summary>
        /// Pause replication
        /// </summary>
        /// <remarks>
        /// Pause replication for given machines
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machine IDs for which to pause replication.</param>
        /// <param name="projectId"></param>
        /// <returns>MachinesListInvalidIDsAndJob</returns>
        MachinesListInvalidIDsAndJob ProjectsProjectIdPauseReplicationPost (Body9 body, string projectId);

        /// <summary>
        /// Pause replication
        /// </summary>
        /// <remarks>
        /// Pause replication for given machines
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machine IDs for which to pause replication.</param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of MachinesListInvalidIDsAndJob</returns>
        ApiResponse<MachinesListInvalidIDsAndJob> ProjectsProjectIdPauseReplicationPostWithHttpInfo (Body9 body, string projectId);
        /// <summary>
        /// Perform Cleanup
        /// </summary>
        /// <remarks>
        /// Spawns a cleanup job to remove the specified target machines from the cloud. Returns the job information.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of replica IDs to delete (corresponding to the &#x27;replica&#x27; field in the machine object.</param>
        /// <param name="projectId"></param>
        /// <returns>Job</returns>
        Job ProjectsProjectIdReplicasDelete (Body5 body, string projectId);

        /// <summary>
        /// Perform Cleanup
        /// </summary>
        /// <remarks>
        /// Spawns a cleanup job to remove the specified target machines from the cloud. Returns the job information.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of replica IDs to delete (corresponding to the &#x27;replica&#x27; field in the machine object.</param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> ProjectsProjectIdReplicasDeleteWithHttpInfo (Body5 body, string projectId);
        /// <summary>
        /// Reverse replication direction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns></returns>
        void ProjectsProjectIdReverseReplicationPost (string projectId);

        /// <summary>
        /// Reverse replication direction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectsProjectIdReverseReplicationPostWithHttpInfo (string projectId);
        /// <summary>
        /// Start replication
        /// </summary>
        /// <remarks>
        /// Start replication of the specified source machines. Returns the machine for which replication has been successfully started, and the IDs for which replication could not be started.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will start.</param>
        /// <param name="projectId"></param>
        /// <returns>MachinesListInvalidIDsAndJob</returns>
        MachinesListInvalidIDsAndJob ProjectsProjectIdStartReplicationPost (Body3 body, string projectId);

        /// <summary>
        /// Start replication
        /// </summary>
        /// <remarks>
        /// Start replication of the specified source machines. Returns the machine for which replication has been successfully started, and the IDs for which replication could not be started.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will start.</param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of MachinesListInvalidIDsAndJob</returns>
        ApiResponse<MachinesListInvalidIDsAndJob> ProjectsProjectIdStartReplicationPostWithHttpInfo (Body3 body, string projectId);
        /// <summary>
        /// Stop replication
        /// </summary>
        /// <remarks>
        /// Stop replication of the specified source machines. Returns the machine for which replication has been successfully stopped, and the IDs for which replication could not be stopped.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will stop.</param>
        /// <param name="projectId"></param>
        /// <returns>MachinesListInvalidIDsAndJob</returns>
        MachinesListInvalidIDsAndJob ProjectsProjectIdStopReplicationPost (Body7 body, string projectId);

        /// <summary>
        /// Stop replication
        /// </summary>
        /// <remarks>
        /// Stop replication of the specified source machines. Returns the machine for which replication has been successfully stopped, and the IDs for which replication could not be stopped.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will stop.</param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of MachinesListInvalidIDsAndJob</returns>
        ApiResponse<MachinesListInvalidIDsAndJob> ProjectsProjectIdStopReplicationPostWithHttpInfo (Body7 body, string projectId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// Returns the list of jobs in the project.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of JobsList</returns>
        System.Threading.Tasks.Task<JobsList> ProjectsProjectIdJobsGetAsync (string projectId, int? offset = null, int? limit = null);

        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// Returns the list of jobs in the project.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of ApiResponse (JobsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobsList>> ProjectsProjectIdJobsGetAsyncWithHttpInfo (string projectId, int? offset = null, int? limit = null);
        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="jobId"></param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> ProjectsProjectIdJobsJobIdGetAsync (string projectId, string jobId);

        /// <summary>
        /// Get Job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> ProjectsProjectIdJobsJobIdGetAsyncWithHttpInfo (string projectId, string jobId);
        /// <summary>
        /// Launch target machines
        /// </summary>
        /// <remarks>
        /// Launch target machines for test, recovery or cutover (by passing enum value to launchType param)
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Machines to launch</param>
        /// <param name="projectId"></param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> ProjectsProjectIdLaunchMachinesPostAsync (LaunchMachinesParameters body, string projectId);

        /// <summary>
        /// Launch target machines
        /// </summary>
        /// <remarks>
        /// Launch target machines for test, recovery or cutover (by passing enum value to launchType param)
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Machines to launch</param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> ProjectsProjectIdLaunchMachinesPostAsyncWithHttpInfo (LaunchMachinesParameters body, string projectId);
        /// <summary>
        /// Launch restore servers
        /// </summary>
        /// <remarks>
        /// Launch restore servers for the Backup service
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> ProjectsProjectIdLaunchRestoreServersPostAsync (LaunchMachinesParameters body, string projectId);

        /// <summary>
        /// Launch restore servers
        /// </summary>
        /// <remarks>
        /// Launch restore servers for the Backup service
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> ProjectsProjectIdLaunchRestoreServersPostAsyncWithHttpInfo (LaunchMachinesParameters body, string projectId);
        /// <summary>
        /// Moves machines to another project
        /// </summary>
        /// <remarks>
        /// TBC 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectsProjectIdMoveMachinesPostAsync (Body4 body, string projectId);

        /// <summary>
        /// Moves machines to another project
        /// </summary>
        /// <remarks>
        /// TBC 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsProjectIdMoveMachinesPostAsyncWithHttpInfo (Body4 body, string projectId);
        /// <summary>
        /// Pause replication
        /// </summary>
        /// <remarks>
        /// Pause replication for given machines
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machine IDs for which to pause replication.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of MachinesListInvalidIDsAndJob</returns>
        System.Threading.Tasks.Task<MachinesListInvalidIDsAndJob> ProjectsProjectIdPauseReplicationPostAsync (Body9 body, string projectId);

        /// <summary>
        /// Pause replication
        /// </summary>
        /// <remarks>
        /// Pause replication for given machines
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machine IDs for which to pause replication.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (MachinesListInvalidIDsAndJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<MachinesListInvalidIDsAndJob>> ProjectsProjectIdPauseReplicationPostAsyncWithHttpInfo (Body9 body, string projectId);
        /// <summary>
        /// Perform Cleanup
        /// </summary>
        /// <remarks>
        /// Spawns a cleanup job to remove the specified target machines from the cloud. Returns the job information.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of replica IDs to delete (corresponding to the &#x27;replica&#x27; field in the machine object.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> ProjectsProjectIdReplicasDeleteAsync (Body5 body, string projectId);

        /// <summary>
        /// Perform Cleanup
        /// </summary>
        /// <remarks>
        /// Spawns a cleanup job to remove the specified target machines from the cloud. Returns the job information.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of replica IDs to delete (corresponding to the &#x27;replica&#x27; field in the machine object.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> ProjectsProjectIdReplicasDeleteAsyncWithHttpInfo (Body5 body, string projectId);
        /// <summary>
        /// Reverse replication direction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectsProjectIdReverseReplicationPostAsync (string projectId);

        /// <summary>
        /// Reverse replication direction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsProjectIdReverseReplicationPostAsyncWithHttpInfo (string projectId);
        /// <summary>
        /// Start replication
        /// </summary>
        /// <remarks>
        /// Start replication of the specified source machines. Returns the machine for which replication has been successfully started, and the IDs for which replication could not be started.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will start.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of MachinesListInvalidIDsAndJob</returns>
        System.Threading.Tasks.Task<MachinesListInvalidIDsAndJob> ProjectsProjectIdStartReplicationPostAsync (Body3 body, string projectId);

        /// <summary>
        /// Start replication
        /// </summary>
        /// <remarks>
        /// Start replication of the specified source machines. Returns the machine for which replication has been successfully started, and the IDs for which replication could not be started.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will start.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (MachinesListInvalidIDsAndJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<MachinesListInvalidIDsAndJob>> ProjectsProjectIdStartReplicationPostAsyncWithHttpInfo (Body3 body, string projectId);
        /// <summary>
        /// Stop replication
        /// </summary>
        /// <remarks>
        /// Stop replication of the specified source machines. Returns the machine for which replication has been successfully stopped, and the IDs for which replication could not be stopped.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will stop.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of MachinesListInvalidIDsAndJob</returns>
        System.Threading.Tasks.Task<MachinesListInvalidIDsAndJob> ProjectsProjectIdStopReplicationPostAsync (Body7 body, string projectId);

        /// <summary>
        /// Stop replication
        /// </summary>
        /// <remarks>
        /// Stop replication of the specified source machines. Returns the machine for which replication has been successfully stopped, and the IDs for which replication could not be stopped.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will stop.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (MachinesListInvalidIDsAndJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<MachinesListInvalidIDsAndJob>> ProjectsProjectIdStopReplicationPostAsyncWithHttpInfo (Body7 body, string projectId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ActionsApi : IActionsApi
    {
        private CloudEndure.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActionsApi(String basePath)
        {
            this.Configuration = new CloudEndure.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ActionsApi()
        {
            this.Configuration = CloudEndure.Client.Configuration.Default;

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ActionsApi(CloudEndure.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CloudEndure.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CloudEndure.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CloudEndure.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List Jobs Returns the list of jobs in the project.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>JobsList</returns>
        public JobsList ProjectsProjectIdJobsGet (string projectId, int? offset = null, int? limit = null)
        {
             ApiResponse<JobsList> localVarResponse = ProjectsProjectIdJobsGetWithHttpInfo(projectId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Jobs Returns the list of jobs in the project.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>ApiResponse of JobsList</returns>
        public ApiResponse< JobsList > ProjectsProjectIdJobsGetWithHttpInfo (string projectId, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdJobsGet");

            var localVarPath = "./projects/{projectId}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdJobsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JobsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobsList)));
        }

        /// <summary>
        /// List Jobs Returns the list of jobs in the project.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of JobsList</returns>
        public async System.Threading.Tasks.Task<JobsList> ProjectsProjectIdJobsGetAsync (string projectId, int? offset = null, int? limit = null)
        {
             ApiResponse<JobsList> localVarResponse = await ProjectsProjectIdJobsGetAsyncWithHttpInfo(projectId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Jobs Returns the list of jobs in the project.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of ApiResponse (JobsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JobsList>> ProjectsProjectIdJobsGetAsyncWithHttpInfo (string projectId, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdJobsGet");

            var localVarPath = "./projects/{projectId}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdJobsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JobsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (JobsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JobsList)));
        }

        /// <summary>
        /// Get Job 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="jobId"></param>
        /// <returns>Job</returns>
        public Job ProjectsProjectIdJobsJobIdGet (string projectId, string jobId)
        {
             ApiResponse<Job> localVarResponse = ProjectsProjectIdJobsJobIdGetWithHttpInfo(projectId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > ProjectsProjectIdJobsJobIdGetWithHttpInfo (string projectId, string jobId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdJobsJobIdGet");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ActionsApi->ProjectsProjectIdJobsJobIdGet");

            var localVarPath = "./projects/{projectId}/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdJobsJobIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Job) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Get Job 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="jobId"></param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> ProjectsProjectIdJobsJobIdGetAsync (string projectId, string jobId)
        {
             ApiResponse<Job> localVarResponse = await ProjectsProjectIdJobsJobIdGetAsyncWithHttpInfo(projectId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Job 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> ProjectsProjectIdJobsJobIdGetAsyncWithHttpInfo (string projectId, string jobId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdJobsJobIdGet");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling ActionsApi->ProjectsProjectIdJobsJobIdGet");

            var localVarPath = "./projects/{projectId}/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (jobId != null) localVarPathParams.Add("jobId", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdJobsJobIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Job) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Launch target machines Launch target machines for test, recovery or cutover (by passing enum value to launchType param)
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Machines to launch</param>
        /// <param name="projectId"></param>
        /// <returns>Job</returns>
        public Job ProjectsProjectIdLaunchMachinesPost (LaunchMachinesParameters body, string projectId)
        {
             ApiResponse<Job> localVarResponse = ProjectsProjectIdLaunchMachinesPostWithHttpInfo(body, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Launch target machines Launch target machines for test, recovery or cutover (by passing enum value to launchType param)
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Machines to launch</param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > ProjectsProjectIdLaunchMachinesPostWithHttpInfo (LaunchMachinesParameters body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActionsApi->ProjectsProjectIdLaunchMachinesPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdLaunchMachinesPost");

            var localVarPath = "./projects/{projectId}/launchMachines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdLaunchMachinesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Job) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Launch target machines Launch target machines for test, recovery or cutover (by passing enum value to launchType param)
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Machines to launch</param>
        /// <param name="projectId"></param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> ProjectsProjectIdLaunchMachinesPostAsync (LaunchMachinesParameters body, string projectId)
        {
             ApiResponse<Job> localVarResponse = await ProjectsProjectIdLaunchMachinesPostAsyncWithHttpInfo(body, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Launch target machines Launch target machines for test, recovery or cutover (by passing enum value to launchType param)
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Machines to launch</param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> ProjectsProjectIdLaunchMachinesPostAsyncWithHttpInfo (LaunchMachinesParameters body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActionsApi->ProjectsProjectIdLaunchMachinesPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdLaunchMachinesPost");

            var localVarPath = "./projects/{projectId}/launchMachines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdLaunchMachinesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Job) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Launch restore servers Launch restore servers for the Backup service
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Job</returns>
        public Job ProjectsProjectIdLaunchRestoreServersPost (LaunchMachinesParameters body, string projectId)
        {
             ApiResponse<Job> localVarResponse = ProjectsProjectIdLaunchRestoreServersPostWithHttpInfo(body, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Launch restore servers Launch restore servers for the Backup service
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > ProjectsProjectIdLaunchRestoreServersPostWithHttpInfo (LaunchMachinesParameters body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActionsApi->ProjectsProjectIdLaunchRestoreServersPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdLaunchRestoreServersPost");

            var localVarPath = "./projects/{projectId}/launchRestoreServers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdLaunchRestoreServersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Job) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Launch restore servers Launch restore servers for the Backup service
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> ProjectsProjectIdLaunchRestoreServersPostAsync (LaunchMachinesParameters body, string projectId)
        {
             ApiResponse<Job> localVarResponse = await ProjectsProjectIdLaunchRestoreServersPostAsyncWithHttpInfo(body, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Launch restore servers Launch restore servers for the Backup service
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> ProjectsProjectIdLaunchRestoreServersPostAsyncWithHttpInfo (LaunchMachinesParameters body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActionsApi->ProjectsProjectIdLaunchRestoreServersPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdLaunchRestoreServersPost");

            var localVarPath = "./projects/{projectId}/launchRestoreServers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdLaunchRestoreServersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Job) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Moves machines to another project TBC 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns></returns>
        public void ProjectsProjectIdMoveMachinesPost (Body4 body, string projectId)
        {
             ProjectsProjectIdMoveMachinesPostWithHttpInfo(body, projectId);
        }

        /// <summary>
        /// Moves machines to another project TBC 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProjectsProjectIdMoveMachinesPostWithHttpInfo (Body4 body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActionsApi->ProjectsProjectIdMoveMachinesPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdMoveMachinesPost");

            var localVarPath = "./projects/{projectId}/moveMachines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMoveMachinesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Moves machines to another project TBC 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectsProjectIdMoveMachinesPostAsync (Body4 body, string projectId)
        {
             await ProjectsProjectIdMoveMachinesPostAsyncWithHttpInfo(body, projectId);

        }

        /// <summary>
        /// Moves machines to another project TBC 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsProjectIdMoveMachinesPostAsyncWithHttpInfo (Body4 body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActionsApi->ProjectsProjectIdMoveMachinesPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdMoveMachinesPost");

            var localVarPath = "./projects/{projectId}/moveMachines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMoveMachinesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Pause replication Pause replication for given machines
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machine IDs for which to pause replication.</param>
        /// <param name="projectId"></param>
        /// <returns>MachinesListInvalidIDsAndJob</returns>
        public MachinesListInvalidIDsAndJob ProjectsProjectIdPauseReplicationPost (Body9 body, string projectId)
        {
             ApiResponse<MachinesListInvalidIDsAndJob> localVarResponse = ProjectsProjectIdPauseReplicationPostWithHttpInfo(body, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pause replication Pause replication for given machines
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machine IDs for which to pause replication.</param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of MachinesListInvalidIDsAndJob</returns>
        public ApiResponse< MachinesListInvalidIDsAndJob > ProjectsProjectIdPauseReplicationPostWithHttpInfo (Body9 body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActionsApi->ProjectsProjectIdPauseReplicationPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdPauseReplicationPost");

            var localVarPath = "./projects/{projectId}/pauseReplication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdPauseReplicationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MachinesListInvalidIDsAndJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MachinesListInvalidIDsAndJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MachinesListInvalidIDsAndJob)));
        }

        /// <summary>
        /// Pause replication Pause replication for given machines
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machine IDs for which to pause replication.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of MachinesListInvalidIDsAndJob</returns>
        public async System.Threading.Tasks.Task<MachinesListInvalidIDsAndJob> ProjectsProjectIdPauseReplicationPostAsync (Body9 body, string projectId)
        {
             ApiResponse<MachinesListInvalidIDsAndJob> localVarResponse = await ProjectsProjectIdPauseReplicationPostAsyncWithHttpInfo(body, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pause replication Pause replication for given machines
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The machine IDs for which to pause replication.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (MachinesListInvalidIDsAndJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MachinesListInvalidIDsAndJob>> ProjectsProjectIdPauseReplicationPostAsyncWithHttpInfo (Body9 body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActionsApi->ProjectsProjectIdPauseReplicationPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdPauseReplicationPost");

            var localVarPath = "./projects/{projectId}/pauseReplication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdPauseReplicationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MachinesListInvalidIDsAndJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MachinesListInvalidIDsAndJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MachinesListInvalidIDsAndJob)));
        }

        /// <summary>
        /// Perform Cleanup Spawns a cleanup job to remove the specified target machines from the cloud. Returns the job information.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of replica IDs to delete (corresponding to the &#x27;replica&#x27; field in the machine object.</param>
        /// <param name="projectId"></param>
        /// <returns>Job</returns>
        public Job ProjectsProjectIdReplicasDelete (Body5 body, string projectId)
        {
             ApiResponse<Job> localVarResponse = ProjectsProjectIdReplicasDeleteWithHttpInfo(body, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform Cleanup Spawns a cleanup job to remove the specified target machines from the cloud. Returns the job information.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of replica IDs to delete (corresponding to the &#x27;replica&#x27; field in the machine object.</param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > ProjectsProjectIdReplicasDeleteWithHttpInfo (Body5 body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActionsApi->ProjectsProjectIdReplicasDelete");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdReplicasDelete");

            var localVarPath = "./projects/{projectId}/replicas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdReplicasDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Job) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Perform Cleanup Spawns a cleanup job to remove the specified target machines from the cloud. Returns the job information.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of replica IDs to delete (corresponding to the &#x27;replica&#x27; field in the machine object.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> ProjectsProjectIdReplicasDeleteAsync (Body5 body, string projectId)
        {
             ApiResponse<Job> localVarResponse = await ProjectsProjectIdReplicasDeleteAsyncWithHttpInfo(body, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform Cleanup Spawns a cleanup job to remove the specified target machines from the cloud. Returns the job information.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The list of replica IDs to delete (corresponding to the &#x27;replica&#x27; field in the machine object.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> ProjectsProjectIdReplicasDeleteAsyncWithHttpInfo (Body5 body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActionsApi->ProjectsProjectIdReplicasDelete");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdReplicasDelete");

            var localVarPath = "./projects/{projectId}/replicas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdReplicasDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Job) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Reverse replication direction 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns></returns>
        public void ProjectsProjectIdReverseReplicationPost (string projectId)
        {
             ProjectsProjectIdReverseReplicationPostWithHttpInfo(projectId);
        }

        /// <summary>
        /// Reverse replication direction 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProjectsProjectIdReverseReplicationPostWithHttpInfo (string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdReverseReplicationPost");

            var localVarPath = "./projects/{projectId}/reverseReplication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdReverseReplicationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reverse replication direction 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectsProjectIdReverseReplicationPostAsync (string projectId)
        {
             await ProjectsProjectIdReverseReplicationPostAsyncWithHttpInfo(projectId);

        }

        /// <summary>
        /// Reverse replication direction 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsProjectIdReverseReplicationPostAsyncWithHttpInfo (string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdReverseReplicationPost");

            var localVarPath = "./projects/{projectId}/reverseReplication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdReverseReplicationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Start replication Start replication of the specified source machines. Returns the machine for which replication has been successfully started, and the IDs for which replication could not be started.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will start.</param>
        /// <param name="projectId"></param>
        /// <returns>MachinesListInvalidIDsAndJob</returns>
        public MachinesListInvalidIDsAndJob ProjectsProjectIdStartReplicationPost (Body3 body, string projectId)
        {
             ApiResponse<MachinesListInvalidIDsAndJob> localVarResponse = ProjectsProjectIdStartReplicationPostWithHttpInfo(body, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start replication Start replication of the specified source machines. Returns the machine for which replication has been successfully started, and the IDs for which replication could not be started.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will start.</param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of MachinesListInvalidIDsAndJob</returns>
        public ApiResponse< MachinesListInvalidIDsAndJob > ProjectsProjectIdStartReplicationPostWithHttpInfo (Body3 body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActionsApi->ProjectsProjectIdStartReplicationPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdStartReplicationPost");

            var localVarPath = "./projects/{projectId}/startReplication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdStartReplicationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MachinesListInvalidIDsAndJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MachinesListInvalidIDsAndJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MachinesListInvalidIDsAndJob)));
        }

        /// <summary>
        /// Start replication Start replication of the specified source machines. Returns the machine for which replication has been successfully started, and the IDs for which replication could not be started.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will start.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of MachinesListInvalidIDsAndJob</returns>
        public async System.Threading.Tasks.Task<MachinesListInvalidIDsAndJob> ProjectsProjectIdStartReplicationPostAsync (Body3 body, string projectId)
        {
             ApiResponse<MachinesListInvalidIDsAndJob> localVarResponse = await ProjectsProjectIdStartReplicationPostAsyncWithHttpInfo(body, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start replication Start replication of the specified source machines. Returns the machine for which replication has been successfully started, and the IDs for which replication could not be started.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will start.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (MachinesListInvalidIDsAndJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MachinesListInvalidIDsAndJob>> ProjectsProjectIdStartReplicationPostAsyncWithHttpInfo (Body3 body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActionsApi->ProjectsProjectIdStartReplicationPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdStartReplicationPost");

            var localVarPath = "./projects/{projectId}/startReplication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdStartReplicationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MachinesListInvalidIDsAndJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MachinesListInvalidIDsAndJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MachinesListInvalidIDsAndJob)));
        }

        /// <summary>
        /// Stop replication Stop replication of the specified source machines. Returns the machine for which replication has been successfully stopped, and the IDs for which replication could not be stopped.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will stop.</param>
        /// <param name="projectId"></param>
        /// <returns>MachinesListInvalidIDsAndJob</returns>
        public MachinesListInvalidIDsAndJob ProjectsProjectIdStopReplicationPost (Body7 body, string projectId)
        {
             ApiResponse<MachinesListInvalidIDsAndJob> localVarResponse = ProjectsProjectIdStopReplicationPostWithHttpInfo(body, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop replication Stop replication of the specified source machines. Returns the machine for which replication has been successfully stopped, and the IDs for which replication could not be stopped.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will stop.</param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of MachinesListInvalidIDsAndJob</returns>
        public ApiResponse< MachinesListInvalidIDsAndJob > ProjectsProjectIdStopReplicationPostWithHttpInfo (Body7 body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActionsApi->ProjectsProjectIdStopReplicationPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdStopReplicationPost");

            var localVarPath = "./projects/{projectId}/stopReplication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdStopReplicationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MachinesListInvalidIDsAndJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MachinesListInvalidIDsAndJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MachinesListInvalidIDsAndJob)));
        }

        /// <summary>
        /// Stop replication Stop replication of the specified source machines. Returns the machine for which replication has been successfully stopped, and the IDs for which replication could not be stopped.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will stop.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of MachinesListInvalidIDsAndJob</returns>
        public async System.Threading.Tasks.Task<MachinesListInvalidIDsAndJob> ProjectsProjectIdStopReplicationPostAsync (Body7 body, string projectId)
        {
             ApiResponse<MachinesListInvalidIDsAndJob> localVarResponse = await ProjectsProjectIdStopReplicationPostAsyncWithHttpInfo(body, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop replication Stop replication of the specified source machines. Returns the machine for which replication has been successfully stopped, and the IDs for which replication could not be stopped.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specification of the machines for which replication will stop.</param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (MachinesListInvalidIDsAndJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MachinesListInvalidIDsAndJob>> ProjectsProjectIdStopReplicationPostAsyncWithHttpInfo (Body7 body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ActionsApi->ProjectsProjectIdStopReplicationPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ActionsApi->ProjectsProjectIdStopReplicationPost");

            var localVarPath = "./projects/{projectId}/stopReplication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdStopReplicationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MachinesListInvalidIDsAndJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (MachinesListInvalidIDsAndJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MachinesListInvalidIDsAndJob)));
        }

    }
}
