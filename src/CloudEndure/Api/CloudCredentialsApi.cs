/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using CloudEndure.Client;
using CloudEndure.Model;

namespace CloudEndure.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICloudCredentialsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>CloudCredentials</returns>
        CloudCredentials CloudCredentialsCredsIdGet (string credsId);

        /// <summary>
        /// Get Credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>ApiResponse of CloudCredentials</returns>
        ApiResponse<CloudCredentials> CloudCredentialsCredsIdGetWithHttpInfo (string credsId);
        /// <summary>
        /// Change Credentials
        /// </summary>
        /// <remarks>
        /// Changes the cloud credentials. 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>CloudCredentials</returns>
        CloudCredentials CloudCredentialsCredsIdPatch (CloudCredentialsRequest body, string credsId);

        /// <summary>
        /// Change Credentials
        /// </summary>
        /// <remarks>
        /// Changes the cloud credentials. 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>ApiResponse of CloudCredentials</returns>
        ApiResponse<CloudCredentials> CloudCredentialsCredsIdPatchWithHttpInfo (CloudCredentialsRequest body, string credsId);
        /// <summary>
        /// List Credentials
        /// </summary>
        /// <remarks>
        /// Returns the list of cloudCredentials in the account.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>CloudCredentialsList</returns>
        CloudCredentialsList CloudCredentialsGet (int? offset = null, int? limit = null);

        /// <summary>
        /// List Credentials
        /// </summary>
        /// <remarks>
        /// Returns the list of cloudCredentials in the account.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>ApiResponse of CloudCredentialsList</returns>
        ApiResponse<CloudCredentialsList> CloudCredentialsGetWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Create Credentials
        /// </summary>
        /// <remarks>
        /// Provide the credentials with which to access the cloud API. Returns the newly created object.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CloudCredentials</returns>
        CloudCredentials CloudCredentialsPost (CloudCredentialsRequest body);

        /// <summary>
        /// Create Credentials
        /// </summary>
        /// <remarks>
        /// Provide the credentials with which to access the cloud API. Returns the newly created object.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CloudCredentials</returns>
        ApiResponse<CloudCredentials> CloudCredentialsPostWithHttpInfo (CloudCredentialsRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>Task of CloudCredentials</returns>
        System.Threading.Tasks.Task<CloudCredentials> CloudCredentialsCredsIdGetAsync (string credsId);

        /// <summary>
        /// Get Credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>Task of ApiResponse (CloudCredentials)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudCredentials>> CloudCredentialsCredsIdGetAsyncWithHttpInfo (string credsId);
        /// <summary>
        /// Change Credentials
        /// </summary>
        /// <remarks>
        /// Changes the cloud credentials. 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>Task of CloudCredentials</returns>
        System.Threading.Tasks.Task<CloudCredentials> CloudCredentialsCredsIdPatchAsync (CloudCredentialsRequest body, string credsId);

        /// <summary>
        /// Change Credentials
        /// </summary>
        /// <remarks>
        /// Changes the cloud credentials. 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>Task of ApiResponse (CloudCredentials)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudCredentials>> CloudCredentialsCredsIdPatchAsyncWithHttpInfo (CloudCredentialsRequest body, string credsId);
        /// <summary>
        /// List Credentials
        /// </summary>
        /// <remarks>
        /// Returns the list of cloudCredentials in the account.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of CloudCredentialsList</returns>
        System.Threading.Tasks.Task<CloudCredentialsList> CloudCredentialsGetAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// List Credentials
        /// </summary>
        /// <remarks>
        /// Returns the list of cloudCredentials in the account.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of ApiResponse (CloudCredentialsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudCredentialsList>> CloudCredentialsGetAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Create Credentials
        /// </summary>
        /// <remarks>
        /// Provide the credentials with which to access the cloud API. Returns the newly created object.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CloudCredentials</returns>
        System.Threading.Tasks.Task<CloudCredentials> CloudCredentialsPostAsync (CloudCredentialsRequest body);

        /// <summary>
        /// Create Credentials
        /// </summary>
        /// <remarks>
        /// Provide the credentials with which to access the cloud API. Returns the newly created object.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CloudCredentials)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudCredentials>> CloudCredentialsPostAsyncWithHttpInfo (CloudCredentialsRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CloudCredentialsApi : ICloudCredentialsApi
    {
        private CloudEndure.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudCredentialsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CloudCredentialsApi(String basePath)
        {
            this.Configuration = new CloudEndure.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudCredentialsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CloudCredentialsApi()
        {
            this.Configuration = CloudEndure.Client.Configuration.Default;

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudCredentialsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CloudCredentialsApi(CloudEndure.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CloudEndure.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CloudEndure.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CloudEndure.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Credentials 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>CloudCredentials</returns>
        public CloudCredentials CloudCredentialsCredsIdGet (string credsId)
        {
             ApiResponse<CloudCredentials> localVarResponse = CloudCredentialsCredsIdGetWithHttpInfo(credsId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Credentials 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>ApiResponse of CloudCredentials</returns>
        public ApiResponse< CloudCredentials > CloudCredentialsCredsIdGetWithHttpInfo (string credsId)
        {
            // verify the required parameter 'credsId' is set
            if (credsId == null)
                throw new ApiException(400, "Missing required parameter 'credsId' when calling CloudCredentialsApi->CloudCredentialsCredsIdGet");

            var localVarPath = "./cloudCredentials/{credsId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credsId != null) localVarPathParams.Add("credsId", this.Configuration.ApiClient.ParameterToString(credsId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudCredentialsCredsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudCredentials>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CloudCredentials) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudCredentials)));
        }

        /// <summary>
        /// Get Credentials 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>Task of CloudCredentials</returns>
        public async System.Threading.Tasks.Task<CloudCredentials> CloudCredentialsCredsIdGetAsync (string credsId)
        {
             ApiResponse<CloudCredentials> localVarResponse = await CloudCredentialsCredsIdGetAsyncWithHttpInfo(credsId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Credentials 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>Task of ApiResponse (CloudCredentials)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudCredentials>> CloudCredentialsCredsIdGetAsyncWithHttpInfo (string credsId)
        {
            // verify the required parameter 'credsId' is set
            if (credsId == null)
                throw new ApiException(400, "Missing required parameter 'credsId' when calling CloudCredentialsApi->CloudCredentialsCredsIdGet");

            var localVarPath = "./cloudCredentials/{credsId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credsId != null) localVarPathParams.Add("credsId", this.Configuration.ApiClient.ParameterToString(credsId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudCredentialsCredsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudCredentials>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CloudCredentials) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudCredentials)));
        }

        /// <summary>
        /// Change Credentials Changes the cloud credentials. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>CloudCredentials</returns>
        public CloudCredentials CloudCredentialsCredsIdPatch (CloudCredentialsRequest body, string credsId)
        {
             ApiResponse<CloudCredentials> localVarResponse = CloudCredentialsCredsIdPatchWithHttpInfo(body, credsId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change Credentials Changes the cloud credentials. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>ApiResponse of CloudCredentials</returns>
        public ApiResponse< CloudCredentials > CloudCredentialsCredsIdPatchWithHttpInfo (CloudCredentialsRequest body, string credsId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CloudCredentialsApi->CloudCredentialsCredsIdPatch");
            // verify the required parameter 'credsId' is set
            if (credsId == null)
                throw new ApiException(400, "Missing required parameter 'credsId' when calling CloudCredentialsApi->CloudCredentialsCredsIdPatch");

            var localVarPath = "./cloudCredentials/{credsId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credsId != null) localVarPathParams.Add("credsId", this.Configuration.ApiClient.ParameterToString(credsId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudCredentialsCredsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudCredentials>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CloudCredentials) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudCredentials)));
        }

        /// <summary>
        /// Change Credentials Changes the cloud credentials. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>Task of CloudCredentials</returns>
        public async System.Threading.Tasks.Task<CloudCredentials> CloudCredentialsCredsIdPatchAsync (CloudCredentialsRequest body, string credsId)
        {
             ApiResponse<CloudCredentials> localVarResponse = await CloudCredentialsCredsIdPatchAsyncWithHttpInfo(body, credsId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change Credentials Changes the cloud credentials. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="credsId">UUID of the credentials to use. In case of on-premise, you should use the null UUID \&quot;00000000-0000-0000-0000-000000000000\&quot;. </param>
        /// <returns>Task of ApiResponse (CloudCredentials)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudCredentials>> CloudCredentialsCredsIdPatchAsyncWithHttpInfo (CloudCredentialsRequest body, string credsId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CloudCredentialsApi->CloudCredentialsCredsIdPatch");
            // verify the required parameter 'credsId' is set
            if (credsId == null)
                throw new ApiException(400, "Missing required parameter 'credsId' when calling CloudCredentialsApi->CloudCredentialsCredsIdPatch");

            var localVarPath = "./cloudCredentials/{credsId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credsId != null) localVarPathParams.Add("credsId", this.Configuration.ApiClient.ParameterToString(credsId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudCredentialsCredsIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudCredentials>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CloudCredentials) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudCredentials)));
        }

        /// <summary>
        /// List Credentials Returns the list of cloudCredentials in the account.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>CloudCredentialsList</returns>
        public CloudCredentialsList CloudCredentialsGet (int? offset = null, int? limit = null)
        {
             ApiResponse<CloudCredentialsList> localVarResponse = CloudCredentialsGetWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Credentials Returns the list of cloudCredentials in the account.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>ApiResponse of CloudCredentialsList</returns>
        public ApiResponse< CloudCredentialsList > CloudCredentialsGetWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./cloudCredentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudCredentialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudCredentialsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CloudCredentialsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudCredentialsList)));
        }

        /// <summary>
        /// List Credentials Returns the list of cloudCredentials in the account.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of CloudCredentialsList</returns>
        public async System.Threading.Tasks.Task<CloudCredentialsList> CloudCredentialsGetAsync (int? offset = null, int? limit = null)
        {
             ApiResponse<CloudCredentialsList> localVarResponse = await CloudCredentialsGetAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Credentials Returns the list of cloudCredentials in the account.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of ApiResponse (CloudCredentialsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudCredentialsList>> CloudCredentialsGetAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "./cloudCredentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudCredentialsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudCredentialsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CloudCredentialsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudCredentialsList)));
        }

        /// <summary>
        /// Create Credentials Provide the credentials with which to access the cloud API. Returns the newly created object.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CloudCredentials</returns>
        public CloudCredentials CloudCredentialsPost (CloudCredentialsRequest body)
        {
             ApiResponse<CloudCredentials> localVarResponse = CloudCredentialsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Credentials Provide the credentials with which to access the cloud API. Returns the newly created object.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CloudCredentials</returns>
        public ApiResponse< CloudCredentials > CloudCredentialsPostWithHttpInfo (CloudCredentialsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CloudCredentialsApi->CloudCredentialsPost");

            var localVarPath = "./cloudCredentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudCredentialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudCredentials>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CloudCredentials) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudCredentials)));
        }

        /// <summary>
        /// Create Credentials Provide the credentials with which to access the cloud API. Returns the newly created object.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CloudCredentials</returns>
        public async System.Threading.Tasks.Task<CloudCredentials> CloudCredentialsPostAsync (CloudCredentialsRequest body)
        {
             ApiResponse<CloudCredentials> localVarResponse = await CloudCredentialsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Credentials Provide the credentials with which to access the cloud API. Returns the newly created object.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CloudCredentials)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudCredentials>> CloudCredentialsPostAsyncWithHttpInfo (CloudCredentialsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CloudCredentialsApi->CloudCredentialsPost");

            var localVarPath = "./cloudCredentials";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloudCredentialsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudCredentials>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CloudCredentials) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudCredentials)));
        }

    }
}
