/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using CloudEndure.Client;
using CloudEndure.Model;

namespace CloudEndure.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get a temporary token by email
        /// </summary>
        /// <remarks>
        /// get a temporary token by email. Available for account owner when SSO is used
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="username"></param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 AccountsAccountIdAccessGet (string accountId, string username);

        /// <summary>
        /// get a temporary token by email
        /// </summary>
        /// <remarks>
        /// get a temporary token by email. Available for account owner when SSO is used
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="username"></param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> AccountsAccountIdAccessGetWithHttpInfo (string accountId, string username);
        /// <summary>
        /// Returns the extended current account information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ExtendedAccountInfo</returns>
        ExtendedAccountInfo ExtendedAccountInfoGet ();

        /// <summary>
        /// Returns the extended current account information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ExtendedAccountInfo</returns>
        ApiResponse<ExtendedAccountInfo> ExtendedAccountInfoGetWithHttpInfo ();
        /// <summary>
        /// Assign User
        /// </summary>
        /// <remarks>
        /// Assign User to Project
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void ProjectsAssignUsersPost (ProjectsAndUsers body);

        /// <summary>
        /// Assign User
        /// </summary>
        /// <remarks>
        /// Assign User to Project
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectsAssignUsersPostWithHttpInfo (ProjectsAndUsers body);
        /// <summary>
        /// Get audit log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="fromDateTime">Used to limit the response to a specific date range. Must be used in conjunction with toDateTime param. (optional)</param>
        /// <param name="toDateTime">Used to limit the response to a specific date range. Must be used in conjunction with fromDateTime param. (optional)</param>
        /// <param name="format"> (optional, default to json)</param>
        /// <returns>AuditLog</returns>
        AuditLog ProjectsProjectIdAuditLogGet (string projectId, int? limit = null, DateTime? fromDateTime = null, DateTime? toDateTime = null, string format = null);

        /// <summary>
        /// Get audit log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="fromDateTime">Used to limit the response to a specific date range. Must be used in conjunction with toDateTime param. (optional)</param>
        /// <param name="toDateTime">Used to limit the response to a specific date range. Must be used in conjunction with fromDateTime param. (optional)</param>
        /// <param name="format"> (optional, default to json)</param>
        /// <returns>ApiResponse of AuditLog</returns>
        ApiResponse<AuditLog> ProjectsProjectIdAuditLogGetWithHttpInfo (string projectId, int? limit = null, DateTime? fromDateTime = null, DateTime? toDateTime = null, string format = null);
        /// <summary>
        /// Force rescan of machine volumes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns></returns>
        void ProjectsProjectIdMachinesMachineIdForceRescanPost (string projectId, string machineId);

        /// <summary>
        /// Force rescan of machine volumes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectsProjectIdMachinesMachineIdForceRescanPostWithHttpInfo (string projectId, string machineId);
        /// <summary>
        /// project&#x27;s storage
        /// </summary>
        /// <remarks>
        /// get project&#x27;s storage usage (vCenter only)
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ProjectStorage</returns>
        ProjectStorage ProjectsProjectIdStorageGet (string projectId);

        /// <summary>
        /// project&#x27;s storage
        /// </summary>
        /// <remarks>
        /// get project&#x27;s storage usage (vCenter only)
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of ProjectStorage</returns>
        ApiResponse<ProjectStorage> ProjectsProjectIdStorageGetWithHttpInfo (string projectId);
        /// <summary>
        /// Remove User
        /// </summary>
        /// <remarks>
        /// Remove User from Project
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void ProjectsRemoveUsersPost (ProjectsAndUsers body);

        /// <summary>
        /// Remove User
        /// </summary>
        /// <remarks>
        /// Remove User from Project
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectsRemoveUsersPostWithHttpInfo (ProjectsAndUsers body);
        /// <summary>
        /// Replaces API token
        /// </summary>
        /// <remarks>
        /// Replaces API token
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 ReplaceApiTokenPost ();

        /// <summary>
        /// Replaces API token
        /// </summary>
        /// <remarks>
        /// Replaces API token
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> ReplaceApiTokenPostWithHttpInfo ();
        /// <summary>
        /// Set password for invited user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">set password token and new password</param>
        /// <returns></returns>
        void SetPasswordPost (Body2 body);

        /// <summary>
        /// Set password for invited user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">set password token and new password</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetPasswordPostWithHttpInfo (Body2 body);
        /// <summary>
        /// Add roles to users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UsersList</returns>
        UsersList UsersAssignRolesPost (UsersAndRoles body);

        /// <summary>
        /// Add roles to users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UsersList</returns>
        ApiResponse<UsersList> UsersAssignRolesPostWithHttpInfo (UsersAndRoles body);
        /// <summary>
        /// Create a new User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>User</returns>
        User UsersPost (Body6 body);

        /// <summary>
        /// Create a new User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersPostWithHttpInfo (Body6 body);
        /// <summary>
        /// Revoke roles from users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UsersList</returns>
        UsersList UsersRevokeRolesPost (UsersAndRoles body);

        /// <summary>
        /// Revoke roles from users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UsersList</returns>
        ApiResponse<UsersList> UsersRevokeRolesPostWithHttpInfo (UsersAndRoles body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// get a temporary token by email
        /// </summary>
        /// <remarks>
        /// get a temporary token by email. Available for account owner when SSO is used
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="username"></param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> AccountsAccountIdAccessGetAsync (string accountId, string username);

        /// <summary>
        /// get a temporary token by email
        /// </summary>
        /// <remarks>
        /// get a temporary token by email. Available for account owner when SSO is used
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="username"></param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> AccountsAccountIdAccessGetAsyncWithHttpInfo (string accountId, string username);
        /// <summary>
        /// Returns the extended current account information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ExtendedAccountInfo</returns>
        System.Threading.Tasks.Task<ExtendedAccountInfo> ExtendedAccountInfoGetAsync ();

        /// <summary>
        /// Returns the extended current account information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ExtendedAccountInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtendedAccountInfo>> ExtendedAccountInfoGetAsyncWithHttpInfo ();
        /// <summary>
        /// Assign User
        /// </summary>
        /// <remarks>
        /// Assign User to Project
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectsAssignUsersPostAsync (ProjectsAndUsers body);

        /// <summary>
        /// Assign User
        /// </summary>
        /// <remarks>
        /// Assign User to Project
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsAssignUsersPostAsyncWithHttpInfo (ProjectsAndUsers body);
        /// <summary>
        /// Get audit log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="fromDateTime">Used to limit the response to a specific date range. Must be used in conjunction with toDateTime param. (optional)</param>
        /// <param name="toDateTime">Used to limit the response to a specific date range. Must be used in conjunction with fromDateTime param. (optional)</param>
        /// <param name="format"> (optional, default to json)</param>
        /// <returns>Task of AuditLog</returns>
        System.Threading.Tasks.Task<AuditLog> ProjectsProjectIdAuditLogGetAsync (string projectId, int? limit = null, DateTime? fromDateTime = null, DateTime? toDateTime = null, string format = null);

        /// <summary>
        /// Get audit log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="fromDateTime">Used to limit the response to a specific date range. Must be used in conjunction with toDateTime param. (optional)</param>
        /// <param name="toDateTime">Used to limit the response to a specific date range. Must be used in conjunction with fromDateTime param. (optional)</param>
        /// <param name="format"> (optional, default to json)</param>
        /// <returns>Task of ApiResponse (AuditLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditLog>> ProjectsProjectIdAuditLogGetAsyncWithHttpInfo (string projectId, int? limit = null, DateTime? fromDateTime = null, DateTime? toDateTime = null, string format = null);
        /// <summary>
        /// Force rescan of machine volumes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectsProjectIdMachinesMachineIdForceRescanPostAsync (string projectId, string machineId);

        /// <summary>
        /// Force rescan of machine volumes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsProjectIdMachinesMachineIdForceRescanPostAsyncWithHttpInfo (string projectId, string machineId);
        /// <summary>
        /// project&#x27;s storage
        /// </summary>
        /// <remarks>
        /// get project&#x27;s storage usage (vCenter only)
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of ProjectStorage</returns>
        System.Threading.Tasks.Task<ProjectStorage> ProjectsProjectIdStorageGetAsync (string projectId);

        /// <summary>
        /// project&#x27;s storage
        /// </summary>
        /// <remarks>
        /// get project&#x27;s storage usage (vCenter only)
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (ProjectStorage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectStorage>> ProjectsProjectIdStorageGetAsyncWithHttpInfo (string projectId);
        /// <summary>
        /// Remove User
        /// </summary>
        /// <remarks>
        /// Remove User from Project
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectsRemoveUsersPostAsync (ProjectsAndUsers body);

        /// <summary>
        /// Remove User
        /// </summary>
        /// <remarks>
        /// Remove User from Project
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsRemoveUsersPostAsyncWithHttpInfo (ProjectsAndUsers body);
        /// <summary>
        /// Replaces API token
        /// </summary>
        /// <remarks>
        /// Replaces API token
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> ReplaceApiTokenPostAsync ();

        /// <summary>
        /// Replaces API token
        /// </summary>
        /// <remarks>
        /// Replaces API token
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ReplaceApiTokenPostAsyncWithHttpInfo ();
        /// <summary>
        /// Set password for invited user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">set password token and new password</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetPasswordPostAsync (Body2 body);

        /// <summary>
        /// Set password for invited user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">set password token and new password</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetPasswordPostAsyncWithHttpInfo (Body2 body);
        /// <summary>
        /// Add roles to users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UsersList</returns>
        System.Threading.Tasks.Task<UsersList> UsersAssignRolesPostAsync (UsersAndRoles body);

        /// <summary>
        /// Add roles to users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UsersList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersList>> UsersAssignRolesPostAsyncWithHttpInfo (UsersAndRoles body);
        /// <summary>
        /// Create a new User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersPostAsync (Body6 body);

        /// <summary>
        /// Create a new User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersPostAsyncWithHttpInfo (Body6 body);
        /// <summary>
        /// Revoke roles from users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UsersList</returns>
        System.Threading.Tasks.Task<UsersList> UsersRevokeRolesPostAsync (UsersAndRoles body);

        /// <summary>
        /// Revoke roles from users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UsersList)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersList>> UsersRevokeRolesPostAsyncWithHttpInfo (UsersAndRoles body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private CloudEndure.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new CloudEndure.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = CloudEndure.Client.Configuration.Default;

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(CloudEndure.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CloudEndure.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CloudEndure.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CloudEndure.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// get a temporary token by email get a temporary token by email. Available for account owner when SSO is used
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="username"></param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 AccountsAccountIdAccessGet (string accountId, string username)
        {
             ApiResponse<InlineResponse2002> localVarResponse = AccountsAccountIdAccessGetWithHttpInfo(accountId, username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get a temporary token by email get a temporary token by email. Available for account owner when SSO is used
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="username"></param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > AccountsAccountIdAccessGetWithHttpInfo (string accountId, string username)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DefaultApi->AccountsAccountIdAccessGet");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->AccountsAccountIdAccessGet");

            var localVarPath = "./accounts/{accountId}/access";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsAccountIdAccessGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// get a temporary token by email get a temporary token by email. Available for account owner when SSO is used
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="username"></param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> AccountsAccountIdAccessGetAsync (string accountId, string username)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await AccountsAccountIdAccessGetAsyncWithHttpInfo(accountId, username);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get a temporary token by email get a temporary token by email. Available for account owner when SSO is used
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <param name="username"></param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> AccountsAccountIdAccessGetAsyncWithHttpInfo (string accountId, string username)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling DefaultApi->AccountsAccountIdAccessGet");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->AccountsAccountIdAccessGet");

            var localVarPath = "./accounts/{accountId}/access";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountsAccountIdAccessGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Returns the extended current account information. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ExtendedAccountInfo</returns>
        public ExtendedAccountInfo ExtendedAccountInfoGet ()
        {
             ApiResponse<ExtendedAccountInfo> localVarResponse = ExtendedAccountInfoGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the extended current account information. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ExtendedAccountInfo</returns>
        public ApiResponse< ExtendedAccountInfo > ExtendedAccountInfoGetWithHttpInfo ()
        {

            var localVarPath = "./extendedAccountInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtendedAccountInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtendedAccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ExtendedAccountInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtendedAccountInfo)));
        }

        /// <summary>
        /// Returns the extended current account information. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ExtendedAccountInfo</returns>
        public async System.Threading.Tasks.Task<ExtendedAccountInfo> ExtendedAccountInfoGetAsync ()
        {
             ApiResponse<ExtendedAccountInfo> localVarResponse = await ExtendedAccountInfoGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the extended current account information. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ExtendedAccountInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtendedAccountInfo>> ExtendedAccountInfoGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./extendedAccountInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtendedAccountInfoGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtendedAccountInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ExtendedAccountInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtendedAccountInfo)));
        }

        /// <summary>
        /// Assign User Assign User to Project
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void ProjectsAssignUsersPost (ProjectsAndUsers body)
        {
             ProjectsAssignUsersPostWithHttpInfo(body);
        }

        /// <summary>
        /// Assign User Assign User to Project
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProjectsAssignUsersPostWithHttpInfo (ProjectsAndUsers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ProjectsAssignUsersPost");

            var localVarPath = "./projects/assignUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsAssignUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Assign User Assign User to Project
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectsAssignUsersPostAsync (ProjectsAndUsers body)
        {
             await ProjectsAssignUsersPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Assign User Assign User to Project
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsAssignUsersPostAsyncWithHttpInfo (ProjectsAndUsers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ProjectsAssignUsersPost");

            var localVarPath = "./projects/assignUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsAssignUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get audit log 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="fromDateTime">Used to limit the response to a specific date range. Must be used in conjunction with toDateTime param. (optional)</param>
        /// <param name="toDateTime">Used to limit the response to a specific date range. Must be used in conjunction with fromDateTime param. (optional)</param>
        /// <param name="format"> (optional, default to json)</param>
        /// <returns>AuditLog</returns>
        public AuditLog ProjectsProjectIdAuditLogGet (string projectId, int? limit = null, DateTime? fromDateTime = null, DateTime? toDateTime = null, string format = null)
        {
             ApiResponse<AuditLog> localVarResponse = ProjectsProjectIdAuditLogGetWithHttpInfo(projectId, limit, fromDateTime, toDateTime, format);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit log 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="fromDateTime">Used to limit the response to a specific date range. Must be used in conjunction with toDateTime param. (optional)</param>
        /// <param name="toDateTime">Used to limit the response to a specific date range. Must be used in conjunction with fromDateTime param. (optional)</param>
        /// <param name="format"> (optional, default to json)</param>
        /// <returns>ApiResponse of AuditLog</returns>
        public ApiResponse< AuditLog > ProjectsProjectIdAuditLogGetWithHttpInfo (string projectId, int? limit = null, DateTime? fromDateTime = null, DateTime? toDateTime = null, string format = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling DefaultApi->ProjectsProjectIdAuditLogGet");

            var localVarPath = "./projects/{projectId}/auditLog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fromDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDateTime", fromDateTime)); // query parameter
            if (toDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDateTime", toDateTime)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdAuditLogGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuditLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLog)));
        }

        /// <summary>
        /// Get audit log 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="fromDateTime">Used to limit the response to a specific date range. Must be used in conjunction with toDateTime param. (optional)</param>
        /// <param name="toDateTime">Used to limit the response to a specific date range. Must be used in conjunction with fromDateTime param. (optional)</param>
        /// <param name="format"> (optional, default to json)</param>
        /// <returns>Task of AuditLog</returns>
        public async System.Threading.Tasks.Task<AuditLog> ProjectsProjectIdAuditLogGetAsync (string projectId, int? limit = null, DateTime? fromDateTime = null, DateTime? toDateTime = null, string format = null)
        {
             ApiResponse<AuditLog> localVarResponse = await ProjectsProjectIdAuditLogGetAsyncWithHttpInfo(projectId, limit, fromDateTime, toDateTime, format);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get audit log 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <param name="fromDateTime">Used to limit the response to a specific date range. Must be used in conjunction with toDateTime param. (optional)</param>
        /// <param name="toDateTime">Used to limit the response to a specific date range. Must be used in conjunction with fromDateTime param. (optional)</param>
        /// <param name="format"> (optional, default to json)</param>
        /// <returns>Task of ApiResponse (AuditLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditLog>> ProjectsProjectIdAuditLogGetAsyncWithHttpInfo (string projectId, int? limit = null, DateTime? fromDateTime = null, DateTime? toDateTime = null, string format = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling DefaultApi->ProjectsProjectIdAuditLogGet");

            var localVarPath = "./projects/{projectId}/auditLog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fromDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDateTime", fromDateTime)); // query parameter
            if (toDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDateTime", toDateTime)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdAuditLogGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (AuditLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLog)));
        }

        /// <summary>
        /// Force rescan of machine volumes. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns></returns>
        public void ProjectsProjectIdMachinesMachineIdForceRescanPost (string projectId, string machineId)
        {
             ProjectsProjectIdMachinesMachineIdForceRescanPostWithHttpInfo(projectId, machineId);
        }

        /// <summary>
        /// Force rescan of machine volumes. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProjectsProjectIdMachinesMachineIdForceRescanPostWithHttpInfo (string projectId, string machineId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling DefaultApi->ProjectsProjectIdMachinesMachineIdForceRescanPost");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling DefaultApi->ProjectsProjectIdMachinesMachineIdForceRescanPost");

            var localVarPath = "./projects/{projectId}/machines/{machineId}/forceRescan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdForceRescanPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Force rescan of machine volumes. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectsProjectIdMachinesMachineIdForceRescanPostAsync (string projectId, string machineId)
        {
             await ProjectsProjectIdMachinesMachineIdForceRescanPostAsyncWithHttpInfo(projectId, machineId);

        }

        /// <summary>
        /// Force rescan of machine volumes. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsProjectIdMachinesMachineIdForceRescanPostAsyncWithHttpInfo (string projectId, string machineId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling DefaultApi->ProjectsProjectIdMachinesMachineIdForceRescanPost");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling DefaultApi->ProjectsProjectIdMachinesMachineIdForceRescanPost");

            var localVarPath = "./projects/{projectId}/machines/{machineId}/forceRescan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdForceRescanPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// project&#x27;s storage get project&#x27;s storage usage (vCenter only)
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ProjectStorage</returns>
        public ProjectStorage ProjectsProjectIdStorageGet (string projectId)
        {
             ApiResponse<ProjectStorage> localVarResponse = ProjectsProjectIdStorageGetWithHttpInfo(projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// project&#x27;s storage get project&#x27;s storage usage (vCenter only)
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of ProjectStorage</returns>
        public ApiResponse< ProjectStorage > ProjectsProjectIdStorageGetWithHttpInfo (string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling DefaultApi->ProjectsProjectIdStorageGet");

            var localVarPath = "./projects/{projectId}/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdStorageGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectStorage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ProjectStorage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectStorage)));
        }

        /// <summary>
        /// project&#x27;s storage get project&#x27;s storage usage (vCenter only)
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of ProjectStorage</returns>
        public async System.Threading.Tasks.Task<ProjectStorage> ProjectsProjectIdStorageGetAsync (string projectId)
        {
             ApiResponse<ProjectStorage> localVarResponse = await ProjectsProjectIdStorageGetAsyncWithHttpInfo(projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// project&#x27;s storage get project&#x27;s storage usage (vCenter only)
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (ProjectStorage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectStorage>> ProjectsProjectIdStorageGetAsyncWithHttpInfo (string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling DefaultApi->ProjectsProjectIdStorageGet");

            var localVarPath = "./projects/{projectId}/storage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdStorageGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectStorage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ProjectStorage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectStorage)));
        }

        /// <summary>
        /// Remove User Remove User from Project
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void ProjectsRemoveUsersPost (ProjectsAndUsers body)
        {
             ProjectsRemoveUsersPostWithHttpInfo(body);
        }

        /// <summary>
        /// Remove User Remove User from Project
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProjectsRemoveUsersPostWithHttpInfo (ProjectsAndUsers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ProjectsRemoveUsersPost");

            var localVarPath = "./projects/removeUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsRemoveUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove User Remove User from Project
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectsRemoveUsersPostAsync (ProjectsAndUsers body)
        {
             await ProjectsRemoveUsersPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Remove User Remove User from Project
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsRemoveUsersPostAsyncWithHttpInfo (ProjectsAndUsers body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ProjectsRemoveUsersPost");

            var localVarPath = "./projects/removeUsers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsRemoveUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Replaces API token Replaces API token
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 ReplaceApiTokenPost ()
        {
             ApiResponse<InlineResponse2001> localVarResponse = ReplaceApiTokenPostWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces API token Replaces API token
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > ReplaceApiTokenPostWithHttpInfo ()
        {

            var localVarPath = "./replaceApiToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceApiTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Replaces API token Replaces API token
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> ReplaceApiTokenPostAsync ()
        {
             ApiResponse<InlineResponse2001> localVarResponse = await ReplaceApiTokenPostAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces API token Replaces API token
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ReplaceApiTokenPostAsyncWithHttpInfo ()
        {

            var localVarPath = "./replaceApiToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceApiTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Set password for invited user 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">set password token and new password</param>
        /// <returns></returns>
        public void SetPasswordPost (Body2 body)
        {
             SetPasswordPostWithHttpInfo(body);
        }

        /// <summary>
        /// Set password for invited user 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">set password token and new password</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetPasswordPostWithHttpInfo (Body2 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->SetPasswordPost");

            var localVarPath = "./setPassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Set password for invited user 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">set password token and new password</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetPasswordPostAsync (Body2 body)
        {
             await SetPasswordPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Set password for invited user 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">set password token and new password</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetPasswordPostAsyncWithHttpInfo (Body2 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->SetPasswordPost");

            var localVarPath = "./setPassword";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add roles to users 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UsersList</returns>
        public UsersList UsersAssignRolesPost (UsersAndRoles body)
        {
             ApiResponse<UsersList> localVarResponse = UsersAssignRolesPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add roles to users 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UsersList</returns>
        public ApiResponse< UsersList > UsersAssignRolesPostWithHttpInfo (UsersAndRoles body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UsersAssignRolesPost");

            var localVarPath = "./users/assignRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersAssignRolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsersList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersList)));
        }

        /// <summary>
        /// Add roles to users 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UsersList</returns>
        public async System.Threading.Tasks.Task<UsersList> UsersAssignRolesPostAsync (UsersAndRoles body)
        {
             ApiResponse<UsersList> localVarResponse = await UsersAssignRolesPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add roles to users 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UsersList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersList>> UsersAssignRolesPostAsyncWithHttpInfo (UsersAndRoles body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UsersAssignRolesPost");

            var localVarPath = "./users/assignRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersAssignRolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsersList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersList)));
        }

        /// <summary>
        /// Create a new User 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>User</returns>
        public User UsersPost (Body6 body)
        {
             ApiResponse<User> localVarResponse = UsersPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new User 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > UsersPostWithHttpInfo (Body6 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UsersPost");

            var localVarPath = "./users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Create a new User 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersPostAsync (Body6 body)
        {
             ApiResponse<User> localVarResponse = await UsersPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new User 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UsersPostAsyncWithHttpInfo (Body6 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UsersPost");

            var localVarPath = "./users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Revoke roles from users 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UsersList</returns>
        public UsersList UsersRevokeRolesPost (UsersAndRoles body)
        {
             ApiResponse<UsersList> localVarResponse = UsersRevokeRolesPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Revoke roles from users 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UsersList</returns>
        public ApiResponse< UsersList > UsersRevokeRolesPostWithHttpInfo (UsersAndRoles body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UsersRevokeRolesPost");

            var localVarPath = "./users/revokeRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersRevokeRolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsersList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersList)));
        }

        /// <summary>
        /// Revoke roles from users 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UsersList</returns>
        public async System.Threading.Tasks.Task<UsersList> UsersRevokeRolesPostAsync (UsersAndRoles body)
        {
             ApiResponse<UsersList> localVarResponse = await UsersRevokeRolesPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Revoke roles from users 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UsersList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersList>> UsersRevokeRolesPostAsyncWithHttpInfo (UsersAndRoles body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UsersRevokeRolesPost");

            var localVarPath = "./users/revokeRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UsersRevokeRolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UsersList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersList)));
        }

    }
}
