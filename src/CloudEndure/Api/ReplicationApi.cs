/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using CloudEndure.Client;
using CloudEndure.Model;

namespace CloudEndure.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IReplicationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get value of network bandwidth throttling setting for Machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>BandwidthThrottling</returns>
        BandwidthThrottling ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGet (string projectId, string machineId);

        /// <summary>
        /// Get value of network bandwidth throttling setting for Machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>ApiResponse of BandwidthThrottling</returns>
        ApiResponse<BandwidthThrottling> ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGetWithHttpInfo (string projectId, string machineId);
        /// <summary>
        /// Set value of network bandwidth throttling setting for Machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>BandwidthThrottling</returns>
        BandwidthThrottling ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatch (BandwidthThrottling body, string projectId, string machineId);

        /// <summary>
        /// Set value of network bandwidth throttling setting for Machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>ApiResponse of BandwidthThrottling</returns>
        ApiResponse<BandwidthThrottling> ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatchWithHttpInfo (BandwidthThrottling body, string projectId, string machineId);
        /// <summary>
        /// Uninstall agent
        /// </summary>
        /// <remarks>
        /// Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns></returns>
        void ProjectsProjectIdMachinesMachineIdDelete (string projectId, string machineId);

        /// <summary>
        /// Uninstall agent
        /// </summary>
        /// <remarks>
        /// Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProjectsProjectIdMachinesMachineIdDeleteWithHttpInfo (string projectId, string machineId);
        /// <summary>
        /// List Available Points-in-time
        /// </summary>
        /// <remarks>
        /// Returns the list of available recovery points for this machine.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>PointInTimeList</returns>
        PointInTimeList ProjectsProjectIdMachinesMachineIdPointsintimeGet (string projectId, string machineId, int? offset = null, int? limit = null);

        /// <summary>
        /// List Available Points-in-time
        /// </summary>
        /// <remarks>
        /// Returns the list of available recovery points for this machine.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>ApiResponse of PointInTimeList</returns>
        ApiResponse<PointInTimeList> ProjectsProjectIdMachinesMachineIdPointsintimeGetWithHttpInfo (string projectId, string machineId, int? offset = null, int? limit = null);
        /// <summary>
        /// List Replication Configurations
        /// </summary>
        /// <remarks>
        /// Returns the list of replication configuration objects defined in this project.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>ReplicationConfigurationList</returns>
        ReplicationConfigurationList ProjectsProjectIdReplicationConfigurationsGet (string projectId, int? offset = null, int? limit = null);

        /// <summary>
        /// List Replication Configurations
        /// </summary>
        /// <remarks>
        /// Returns the list of replication configuration objects defined in this project.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>ApiResponse of ReplicationConfigurationList</returns>
        ApiResponse<ReplicationConfigurationList> ProjectsProjectIdReplicationConfigurationsGetWithHttpInfo (string projectId, int? offset = null, int? limit = null);
        /// <summary>
        /// Create Replication Configuration
        /// </summary>
        /// <remarks>
        /// Control Data Replication parameters such as target cloud credentials, Staging Area and replication network configuration. A single configuration can exist per target region. Returns the newly created object. 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>ReplicationConfiguration</returns>
        ReplicationConfiguration ProjectsProjectIdReplicationConfigurationsPost (ReplicationConfiguration body, string projectId);

        /// <summary>
        /// Create Replication Configuration
        /// </summary>
        /// <remarks>
        /// Control Data Replication parameters such as target cloud credentials, Staging Area and replication network configuration. A single configuration can exist per target region. Returns the newly created object. 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of ReplicationConfiguration</returns>
        ApiResponse<ReplicationConfiguration> ProjectsProjectIdReplicationConfigurationsPostWithHttpInfo (ReplicationConfiguration body, string projectId);
        /// <summary>
        /// Modify Replication Configuration
        /// </summary>
        /// <remarks>
        /// Modifying volumeEncryptionKey or modifying cloudCredentials to ones matching a different cloud account will result in replication restarting from initial sync. Returns the modified object.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="replicationConfigurationId"></param>
        /// <returns>ReplicationConfiguration</returns>
        ReplicationConfiguration ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatch (ReplicationConfiguration body, string projectId, string replicationConfigurationId);

        /// <summary>
        /// Modify Replication Configuration
        /// </summary>
        /// <remarks>
        /// Modifying volumeEncryptionKey or modifying cloudCredentials to ones matching a different cloud account will result in replication restarting from initial sync. Returns the modified object.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="replicationConfigurationId"></param>
        /// <returns>ApiResponse of ReplicationConfiguration</returns>
        ApiResponse<ReplicationConfiguration> ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatchWithHttpInfo (ReplicationConfiguration body, string projectId, string replicationConfigurationId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get value of network bandwidth throttling setting for Machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of BandwidthThrottling</returns>
        System.Threading.Tasks.Task<BandwidthThrottling> ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGetAsync (string projectId, string machineId);

        /// <summary>
        /// Get value of network bandwidth throttling setting for Machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of ApiResponse (BandwidthThrottling)</returns>
        System.Threading.Tasks.Task<ApiResponse<BandwidthThrottling>> ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGetAsyncWithHttpInfo (string projectId, string machineId);
        /// <summary>
        /// Set value of network bandwidth throttling setting for Machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of BandwidthThrottling</returns>
        System.Threading.Tasks.Task<BandwidthThrottling> ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatchAsync (BandwidthThrottling body, string projectId, string machineId);

        /// <summary>
        /// Set value of network bandwidth throttling setting for Machine
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of ApiResponse (BandwidthThrottling)</returns>
        System.Threading.Tasks.Task<ApiResponse<BandwidthThrottling>> ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatchAsyncWithHttpInfo (BandwidthThrottling body, string projectId, string machineId);
        /// <summary>
        /// Uninstall agent
        /// </summary>
        /// <remarks>
        /// Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProjectsProjectIdMachinesMachineIdDeleteAsync (string projectId, string machineId);

        /// <summary>
        /// Uninstall agent
        /// </summary>
        /// <remarks>
        /// Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsProjectIdMachinesMachineIdDeleteAsyncWithHttpInfo (string projectId, string machineId);
        /// <summary>
        /// List Available Points-in-time
        /// </summary>
        /// <remarks>
        /// Returns the list of available recovery points for this machine.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of PointInTimeList</returns>
        System.Threading.Tasks.Task<PointInTimeList> ProjectsProjectIdMachinesMachineIdPointsintimeGetAsync (string projectId, string machineId, int? offset = null, int? limit = null);

        /// <summary>
        /// List Available Points-in-time
        /// </summary>
        /// <remarks>
        /// Returns the list of available recovery points for this machine.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of ApiResponse (PointInTimeList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PointInTimeList>> ProjectsProjectIdMachinesMachineIdPointsintimeGetAsyncWithHttpInfo (string projectId, string machineId, int? offset = null, int? limit = null);
        /// <summary>
        /// List Replication Configurations
        /// </summary>
        /// <remarks>
        /// Returns the list of replication configuration objects defined in this project.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of ReplicationConfigurationList</returns>
        System.Threading.Tasks.Task<ReplicationConfigurationList> ProjectsProjectIdReplicationConfigurationsGetAsync (string projectId, int? offset = null, int? limit = null);

        /// <summary>
        /// List Replication Configurations
        /// </summary>
        /// <remarks>
        /// Returns the list of replication configuration objects defined in this project.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of ApiResponse (ReplicationConfigurationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplicationConfigurationList>> ProjectsProjectIdReplicationConfigurationsGetAsyncWithHttpInfo (string projectId, int? offset = null, int? limit = null);
        /// <summary>
        /// Create Replication Configuration
        /// </summary>
        /// <remarks>
        /// Control Data Replication parameters such as target cloud credentials, Staging Area and replication network configuration. A single configuration can exist per target region. Returns the newly created object. 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of ReplicationConfiguration</returns>
        System.Threading.Tasks.Task<ReplicationConfiguration> ProjectsProjectIdReplicationConfigurationsPostAsync (ReplicationConfiguration body, string projectId);

        /// <summary>
        /// Create Replication Configuration
        /// </summary>
        /// <remarks>
        /// Control Data Replication parameters such as target cloud credentials, Staging Area and replication network configuration. A single configuration can exist per target region. Returns the newly created object. 
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (ReplicationConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplicationConfiguration>> ProjectsProjectIdReplicationConfigurationsPostAsyncWithHttpInfo (ReplicationConfiguration body, string projectId);
        /// <summary>
        /// Modify Replication Configuration
        /// </summary>
        /// <remarks>
        /// Modifying volumeEncryptionKey or modifying cloudCredentials to ones matching a different cloud account will result in replication restarting from initial sync. Returns the modified object.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="replicationConfigurationId"></param>
        /// <returns>Task of ReplicationConfiguration</returns>
        System.Threading.Tasks.Task<ReplicationConfiguration> ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatchAsync (ReplicationConfiguration body, string projectId, string replicationConfigurationId);

        /// <summary>
        /// Modify Replication Configuration
        /// </summary>
        /// <remarks>
        /// Modifying volumeEncryptionKey or modifying cloudCredentials to ones matching a different cloud account will result in replication restarting from initial sync. Returns the modified object.
        /// </remarks>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="replicationConfigurationId"></param>
        /// <returns>Task of ApiResponse (ReplicationConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplicationConfiguration>> ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatchAsyncWithHttpInfo (ReplicationConfiguration body, string projectId, string replicationConfigurationId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ReplicationApi : IReplicationApi
    {
        private CloudEndure.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReplicationApi(String basePath)
        {
            this.Configuration = new CloudEndure.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationApi"/> class
        /// </summary>
        /// <returns></returns>
        public ReplicationApi()
        {
            this.Configuration = CloudEndure.Client.Configuration.Default;

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReplicationApi(CloudEndure.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CloudEndure.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CloudEndure.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CloudEndure.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CloudEndure.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get value of network bandwidth throttling setting for Machine 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>BandwidthThrottling</returns>
        public BandwidthThrottling ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGet (string projectId, string machineId)
        {
             ApiResponse<BandwidthThrottling> localVarResponse = ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGetWithHttpInfo(projectId, machineId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get value of network bandwidth throttling setting for Machine 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>ApiResponse of BandwidthThrottling</returns>
        public ApiResponse< BandwidthThrottling > ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGetWithHttpInfo (string projectId, string machineId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGet");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGet");

            var localVarPath = "./projects/{projectId}/machines/{machineId}/bandwidthThrottling";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BandwidthThrottling>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BandwidthThrottling) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BandwidthThrottling)));
        }

        /// <summary>
        /// Get value of network bandwidth throttling setting for Machine 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of BandwidthThrottling</returns>
        public async System.Threading.Tasks.Task<BandwidthThrottling> ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGetAsync (string projectId, string machineId)
        {
             ApiResponse<BandwidthThrottling> localVarResponse = await ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGetAsyncWithHttpInfo(projectId, machineId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get value of network bandwidth throttling setting for Machine 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of ApiResponse (BandwidthThrottling)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BandwidthThrottling>> ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGetAsyncWithHttpInfo (string projectId, string machineId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGet");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGet");

            var localVarPath = "./projects/{projectId}/machines/{machineId}/bandwidthThrottling";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdBandwidthThrottlingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BandwidthThrottling>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BandwidthThrottling) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BandwidthThrottling)));
        }

        /// <summary>
        /// Set value of network bandwidth throttling setting for Machine 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>BandwidthThrottling</returns>
        public BandwidthThrottling ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatch (BandwidthThrottling body, string projectId, string machineId)
        {
             ApiResponse<BandwidthThrottling> localVarResponse = ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatchWithHttpInfo(body, projectId, machineId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set value of network bandwidth throttling setting for Machine 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>ApiResponse of BandwidthThrottling</returns>
        public ApiResponse< BandwidthThrottling > ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatchWithHttpInfo (BandwidthThrottling body, string projectId, string machineId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatch");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatch");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatch");

            var localVarPath = "./projects/{projectId}/machines/{machineId}/bandwidthThrottling";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BandwidthThrottling>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BandwidthThrottling) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BandwidthThrottling)));
        }

        /// <summary>
        /// Set value of network bandwidth throttling setting for Machine 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of BandwidthThrottling</returns>
        public async System.Threading.Tasks.Task<BandwidthThrottling> ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatchAsync (BandwidthThrottling body, string projectId, string machineId)
        {
             ApiResponse<BandwidthThrottling> localVarResponse = await ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatchAsyncWithHttpInfo(body, projectId, machineId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set value of network bandwidth throttling setting for Machine 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of ApiResponse (BandwidthThrottling)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BandwidthThrottling>> ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatchAsyncWithHttpInfo (BandwidthThrottling body, string projectId, string machineId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatch");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatch");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatch");

            var localVarPath = "./projects/{projectId}/machines/{machineId}/bandwidthThrottling";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdBandwidthThrottlingPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BandwidthThrottling>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BandwidthThrottling) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BandwidthThrottling)));
        }

        /// <summary>
        /// Uninstall agent Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns></returns>
        public void ProjectsProjectIdMachinesMachineIdDelete (string projectId, string machineId)
        {
             ProjectsProjectIdMachinesMachineIdDeleteWithHttpInfo(projectId, machineId);
        }

        /// <summary>
        /// Uninstall agent Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProjectsProjectIdMachinesMachineIdDeleteWithHttpInfo (string projectId, string machineId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdDelete");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdDelete");

            var localVarPath = "./projects/{projectId}/machines/{machineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Uninstall agent Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProjectsProjectIdMachinesMachineIdDeleteAsync (string projectId, string machineId)
        {
             await ProjectsProjectIdMachinesMachineIdDeleteAsyncWithHttpInfo(projectId, machineId);

        }

        /// <summary>
        /// Uninstall agent Stops replication and removes the cloudendure agent from this machine. All cloud artifacts associated with those machines with the exception of launched target machine are deleted.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProjectsProjectIdMachinesMachineIdDeleteAsyncWithHttpInfo (string projectId, string machineId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdDelete");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdDelete");

            var localVarPath = "./projects/{projectId}/machines/{machineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List Available Points-in-time Returns the list of available recovery points for this machine.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>PointInTimeList</returns>
        public PointInTimeList ProjectsProjectIdMachinesMachineIdPointsintimeGet (string projectId, string machineId, int? offset = null, int? limit = null)
        {
             ApiResponse<PointInTimeList> localVarResponse = ProjectsProjectIdMachinesMachineIdPointsintimeGetWithHttpInfo(projectId, machineId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Available Points-in-time Returns the list of available recovery points for this machine.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>ApiResponse of PointInTimeList</returns>
        public ApiResponse< PointInTimeList > ProjectsProjectIdMachinesMachineIdPointsintimeGetWithHttpInfo (string projectId, string machineId, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdPointsintimeGet");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdPointsintimeGet");

            var localVarPath = "./projects/{projectId}/machines/{machineId}/pointsintime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdPointsintimeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PointInTimeList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PointInTimeList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PointInTimeList)));
        }

        /// <summary>
        /// List Available Points-in-time Returns the list of available recovery points for this machine.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of PointInTimeList</returns>
        public async System.Threading.Tasks.Task<PointInTimeList> ProjectsProjectIdMachinesMachineIdPointsintimeGetAsync (string projectId, string machineId, int? offset = null, int? limit = null)
        {
             ApiResponse<PointInTimeList> localVarResponse = await ProjectsProjectIdMachinesMachineIdPointsintimeGetAsyncWithHttpInfo(projectId, machineId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Available Points-in-time Returns the list of available recovery points for this machine.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="machineId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of ApiResponse (PointInTimeList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PointInTimeList>> ProjectsProjectIdMachinesMachineIdPointsintimeGetAsyncWithHttpInfo (string projectId, string machineId, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdPointsintimeGet");
            // verify the required parameter 'machineId' is set
            if (machineId == null)
                throw new ApiException(400, "Missing required parameter 'machineId' when calling ReplicationApi->ProjectsProjectIdMachinesMachineIdPointsintimeGet");

            var localVarPath = "./projects/{projectId}/machines/{machineId}/pointsintime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (machineId != null) localVarPathParams.Add("machineId", this.Configuration.ApiClient.ParameterToString(machineId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdMachinesMachineIdPointsintimeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PointInTimeList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PointInTimeList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PointInTimeList)));
        }

        /// <summary>
        /// List Replication Configurations Returns the list of replication configuration objects defined in this project.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>ReplicationConfigurationList</returns>
        public ReplicationConfigurationList ProjectsProjectIdReplicationConfigurationsGet (string projectId, int? offset = null, int? limit = null)
        {
             ApiResponse<ReplicationConfigurationList> localVarResponse = ProjectsProjectIdReplicationConfigurationsGetWithHttpInfo(projectId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Replication Configurations Returns the list of replication configuration objects defined in this project.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>ApiResponse of ReplicationConfigurationList</returns>
        public ApiResponse< ReplicationConfigurationList > ProjectsProjectIdReplicationConfigurationsGetWithHttpInfo (string projectId, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ReplicationApi->ProjectsProjectIdReplicationConfigurationsGet");

            var localVarPath = "./projects/{projectId}/replicationConfigurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdReplicationConfigurationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationConfigurationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplicationConfigurationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationConfigurationList)));
        }

        /// <summary>
        /// List Replication Configurations Returns the list of replication configuration objects defined in this project.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of ReplicationConfigurationList</returns>
        public async System.Threading.Tasks.Task<ReplicationConfigurationList> ProjectsProjectIdReplicationConfigurationsGetAsync (string projectId, int? offset = null, int? limit = null)
        {
             ApiResponse<ReplicationConfigurationList> localVarResponse = await ProjectsProjectIdReplicationConfigurationsGetAsyncWithHttpInfo(projectId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Replication Configurations Returns the list of replication configuration objects defined in this project.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="offset">With which item to start (0 based). (optional, default to 0)</param>
        /// <param name="limit">A number specifying how many entries to return. (optional, default to 1500)</param>
        /// <returns>Task of ApiResponse (ReplicationConfigurationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplicationConfigurationList>> ProjectsProjectIdReplicationConfigurationsGetAsyncWithHttpInfo (string projectId, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ReplicationApi->ProjectsProjectIdReplicationConfigurationsGet");

            var localVarPath = "./projects/{projectId}/replicationConfigurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdReplicationConfigurationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationConfigurationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplicationConfigurationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationConfigurationList)));
        }

        /// <summary>
        /// Create Replication Configuration Control Data Replication parameters such as target cloud credentials, Staging Area and replication network configuration. A single configuration can exist per target region. Returns the newly created object. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>ReplicationConfiguration</returns>
        public ReplicationConfiguration ProjectsProjectIdReplicationConfigurationsPost (ReplicationConfiguration body, string projectId)
        {
             ApiResponse<ReplicationConfiguration> localVarResponse = ProjectsProjectIdReplicationConfigurationsPostWithHttpInfo(body, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Replication Configuration Control Data Replication parameters such as target cloud credentials, Staging Area and replication network configuration. A single configuration can exist per target region. Returns the newly created object. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of ReplicationConfiguration</returns>
        public ApiResponse< ReplicationConfiguration > ProjectsProjectIdReplicationConfigurationsPostWithHttpInfo (ReplicationConfiguration body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->ProjectsProjectIdReplicationConfigurationsPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ReplicationApi->ProjectsProjectIdReplicationConfigurationsPost");

            var localVarPath = "./projects/{projectId}/replicationConfigurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdReplicationConfigurationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplicationConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationConfiguration)));
        }

        /// <summary>
        /// Create Replication Configuration Control Data Replication parameters such as target cloud credentials, Staging Area and replication network configuration. A single configuration can exist per target region. Returns the newly created object. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of ReplicationConfiguration</returns>
        public async System.Threading.Tasks.Task<ReplicationConfiguration> ProjectsProjectIdReplicationConfigurationsPostAsync (ReplicationConfiguration body, string projectId)
        {
             ApiResponse<ReplicationConfiguration> localVarResponse = await ProjectsProjectIdReplicationConfigurationsPostAsyncWithHttpInfo(body, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Replication Configuration Control Data Replication parameters such as target cloud credentials, Staging Area and replication network configuration. A single configuration can exist per target region. Returns the newly created object. 
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse (ReplicationConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplicationConfiguration>> ProjectsProjectIdReplicationConfigurationsPostAsyncWithHttpInfo (ReplicationConfiguration body, string projectId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->ProjectsProjectIdReplicationConfigurationsPost");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ReplicationApi->ProjectsProjectIdReplicationConfigurationsPost");

            var localVarPath = "./projects/{projectId}/replicationConfigurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdReplicationConfigurationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplicationConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationConfiguration)));
        }

        /// <summary>
        /// Modify Replication Configuration Modifying volumeEncryptionKey or modifying cloudCredentials to ones matching a different cloud account will result in replication restarting from initial sync. Returns the modified object.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="replicationConfigurationId"></param>
        /// <returns>ReplicationConfiguration</returns>
        public ReplicationConfiguration ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatch (ReplicationConfiguration body, string projectId, string replicationConfigurationId)
        {
             ApiResponse<ReplicationConfiguration> localVarResponse = ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatchWithHttpInfo(body, projectId, replicationConfigurationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify Replication Configuration Modifying volumeEncryptionKey or modifying cloudCredentials to ones matching a different cloud account will result in replication restarting from initial sync. Returns the modified object.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="replicationConfigurationId"></param>
        /// <returns>ApiResponse of ReplicationConfiguration</returns>
        public ApiResponse< ReplicationConfiguration > ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatchWithHttpInfo (ReplicationConfiguration body, string projectId, string replicationConfigurationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatch");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ReplicationApi->ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatch");
            // verify the required parameter 'replicationConfigurationId' is set
            if (replicationConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'replicationConfigurationId' when calling ReplicationApi->ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatch");

            var localVarPath = "./projects/{projectId}/replicationConfigurations/{replicationConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (replicationConfigurationId != null) localVarPathParams.Add("replicationConfigurationId", this.Configuration.ApiClient.ParameterToString(replicationConfigurationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplicationConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationConfiguration)));
        }

        /// <summary>
        /// Modify Replication Configuration Modifying volumeEncryptionKey or modifying cloudCredentials to ones matching a different cloud account will result in replication restarting from initial sync. Returns the modified object.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="replicationConfigurationId"></param>
        /// <returns>Task of ReplicationConfiguration</returns>
        public async System.Threading.Tasks.Task<ReplicationConfiguration> ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatchAsync (ReplicationConfiguration body, string projectId, string replicationConfigurationId)
        {
             ApiResponse<ReplicationConfiguration> localVarResponse = await ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatchAsyncWithHttpInfo(body, projectId, replicationConfigurationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify Replication Configuration Modifying volumeEncryptionKey or modifying cloudCredentials to ones matching a different cloud account will result in replication restarting from initial sync. Returns the modified object.
        /// </summary>
        /// <exception cref="CloudEndure.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="projectId"></param>
        /// <param name="replicationConfigurationId"></param>
        /// <returns>Task of ApiResponse (ReplicationConfiguration)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplicationConfiguration>> ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatchAsyncWithHttpInfo (ReplicationConfiguration body, string projectId, string replicationConfigurationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatch");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling ReplicationApi->ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatch");
            // verify the required parameter 'replicationConfigurationId' is set
            if (replicationConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'replicationConfigurationId' when calling ReplicationApi->ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatch");

            var localVarPath = "./projects/{projectId}/replicationConfigurations/{replicationConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (replicationConfigurationId != null) localVarPathParams.Add("replicationConfigurationId", this.Configuration.ApiClient.ParameterToString(replicationConfigurationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProjectsProjectIdReplicationConfigurationsReplicationConfigurationIdPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationConfiguration>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ReplicationConfiguration) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationConfiguration)));
        }

    }
}
