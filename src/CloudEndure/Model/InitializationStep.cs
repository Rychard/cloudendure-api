/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// A state in the process if initiating replication.
    /// </summary>
    [DataContract]
        public partial class InitializationStep :  IEquatable<InitializationStep>
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum NOTSTARTED for value: NOT_STARTED
            /// </summary>
            [EnumMember(Value = "NOT_STARTED")]
            NOTSTARTED = 1,
            /// <summary>
            /// Enum STARTED for value: STARTED
            /// </summary>
            [EnumMember(Value = "STARTED")]
            STARTED = 2,
            /// <summary>
            /// Enum SUCCEEDED for value: SUCCEEDED
            /// </summary>
            [EnumMember(Value = "SUCCEEDED")]
            SUCCEEDED = 3,
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 4,
            /// <summary>
            /// Enum SKIPPED for value: SKIPPED
            /// </summary>
            [EnumMember(Value = "SKIPPED")]
            SKIPPED = 5        }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines Name
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum NameEnum
        {
            /// <summary>
            /// Enum WAITINGTOINITIATEREPLICATION for value: WAITING_TO_INITIATE_REPLICATION
            /// </summary>
            [EnumMember(Value = "WAITING_TO_INITIATE_REPLICATION")]
            WAITINGTOINITIATEREPLICATION = 1,
            /// <summary>
            /// Enum CREATINGFIREWALLRULES for value: CREATING_FIREWALL_RULES
            /// </summary>
            [EnumMember(Value = "CREATING_FIREWALL_RULES")]
            CREATINGFIREWALLRULES = 2,
            /// <summary>
            /// Enum CREATINGREPLICATIONSERVER for value: CREATING_REPLICATION_SERVER
            /// </summary>
            [EnumMember(Value = "CREATING_REPLICATION_SERVER")]
            CREATINGREPLICATIONSERVER = 3,
            /// <summary>
            /// Enum BOOTINGREPLICATIONSERVER for value: BOOTING_REPLICATION_SERVER
            /// </summary>
            [EnumMember(Value = "BOOTING_REPLICATION_SERVER")]
            BOOTINGREPLICATIONSERVER = 4,
            /// <summary>
            /// Enum RESOLVINGMANAGEMENTSERVERADDRESS for value: RESOLVING_MANAGEMENT_SERVER_ADDRESS
            /// </summary>
            [EnumMember(Value = "RESOLVING_MANAGEMENT_SERVER_ADDRESS")]
            RESOLVINGMANAGEMENTSERVERADDRESS = 5,
            /// <summary>
            /// Enum AUTHENTICATINGWITHMANAGEMENTSERVER for value: AUTHENTICATING_WITH_MANAGEMENT_SERVER
            /// </summary>
            [EnumMember(Value = "AUTHENTICATING_WITH_MANAGEMENT_SERVER")]
            AUTHENTICATINGWITHMANAGEMENTSERVER = 6,
            /// <summary>
            /// Enum DOWNLOADINGREPLICATIONSOFTWARE for value: DOWNLOADING_REPLICATION_SOFTWARE
            /// </summary>
            [EnumMember(Value = "DOWNLOADING_REPLICATION_SOFTWARE")]
            DOWNLOADINGREPLICATIONSOFTWARE = 7,
            /// <summary>
            /// Enum CREATINGREPLICATIONDISKS for value: CREATING_REPLICATION_DISKS
            /// </summary>
            [EnumMember(Value = "CREATING_REPLICATION_DISKS")]
            CREATINGREPLICATIONDISKS = 8,
            /// <summary>
            /// Enum ATTACHINGREPLICATIONDISKS for value: ATTACHING_REPLICATION_DISKS
            /// </summary>
            [EnumMember(Value = "ATTACHING_REPLICATION_DISKS")]
            ATTACHINGREPLICATIONDISKS = 9,
            /// <summary>
            /// Enum PAIRINGREPLICATIONSERVERWITHAGENT for value: PAIRING_REPLICATION_SERVER_WITH_AGENT
            /// </summary>
            [EnumMember(Value = "PAIRING_REPLICATION_SERVER_WITH_AGENT")]
            PAIRINGREPLICATIONSERVERWITHAGENT = 10,
            /// <summary>
            /// Enum ESTABLISHINGAGENTREPLICATORCOMMUNICATION for value: ESTABLISHING_AGENT_REPLICATOR_COMMUNICATION
            /// </summary>
            [EnumMember(Value = "ESTABLISHING_AGENT_REPLICATOR_COMMUNICATION")]
            ESTABLISHINGAGENTREPLICATORCOMMUNICATION = 11        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public NameEnum? Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InitializationStep" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="message">message.</param>
        /// <param name="name">name.</param>
        public InitializationStep(StatusEnum? status = default(StatusEnum?), string message = default(string), NameEnum? name = default(NameEnum?))
        {
            this.Status = status;
            this.Message = message;
            this.Name = name;
        }
        

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InitializationStep {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InitializationStep);
        }

        /// <summary>
        /// Returns true if InitializationStep instances are equal
        /// </summary>
        /// <param name="input">Instance of InitializationStep to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InitializationStep input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }
    }
}
