/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// Target machine characteristics: machine and disk types, network configuration, etc.
    /// </summary>
    [DataContract]
        public partial class Blueprint :  IEquatable<Blueprint>
    {
        /// <summary>
        /// Whether to allocate an ephemeral public IP, or not. AS_SUBNET causes CloudEndure to copy this property from the source machine.
        /// </summary>
        /// <value>Whether to allocate an ephemeral public IP, or not. AS_SUBNET causes CloudEndure to copy this property from the source machine.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PublicIPActionEnum
        {
            /// <summary>
            /// Enum ALLOCATE for value: ALLOCATE
            /// </summary>
            [EnumMember(Value = "ALLOCATE")]
            ALLOCATE = 1,
            /// <summary>
            /// Enum DONTALLOCATE for value: DONT_ALLOCATE
            /// </summary>
            [EnumMember(Value = "DONT_ALLOCATE")]
            DONTALLOCATE = 2,
            /// <summary>
            /// Enum ASSUBNET for value: AS_SUBNET
            /// </summary>
            [EnumMember(Value = "AS_SUBNET")]
            ASSUBNET = 3        }
        /// <summary>
        /// Whether to allocate an ephemeral public IP, or not. AS_SUBNET causes CloudEndure to copy this property from the source machine.
        /// </summary>
        /// <value>Whether to allocate an ephemeral public IP, or not. AS_SUBNET causes CloudEndure to copy this property from the source machine.</value>
        [DataMember(Name="publicIPAction", EmitDefaultValue=false)]
        public PublicIPActionEnum? PublicIPAction { get; set; }
        /// <summary>
        /// How to assign a security group to the target machine.
        /// </summary>
        /// <value>How to assign a security group to the target machine.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum SecurityGroupActionEnum
        {
            /// <summary>
            /// Enum POLICY for value: FROM_POLICY
            /// </summary>
            [EnumMember(Value = "FROM_POLICY")]
            POLICY = 1        }
        /// <summary>
        /// How to assign a security group to the target machine.
        /// </summary>
        /// <value>How to assign a security group to the target machine.</value>
        [DataMember(Name="securityGroupAction", EmitDefaultValue=false)]
        public SecurityGroupActionEnum? SecurityGroupAction { get; set; }
        /// <summary>
        /// Defines Tenancy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TenancyEnum
        {
            /// <summary>
            /// Enum SHARED for value: SHARED
            /// </summary>
            [EnumMember(Value = "SHARED")]
            SHARED = 1,
            /// <summary>
            /// Enum DEDICATED for value: DEDICATED
            /// </summary>
            [EnumMember(Value = "DEDICATED")]
            DEDICATED = 2,
            /// <summary>
            /// Enum HOST for value: HOST
            /// </summary>
            [EnumMember(Value = "HOST")]
            HOST = 3        }
        /// <summary>
        /// Gets or Sets Tenancy
        /// </summary>
        [DataMember(Name="tenancy", EmitDefaultValue=false)]
        public TenancyEnum? Tenancy { get; set; }
        /// <summary>
        /// Defines PrivateIPAction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PrivateIPActionEnum
        {
            /// <summary>
            /// Enum CREATENEW for value: CREATE_NEW
            /// </summary>
            [EnumMember(Value = "CREATE_NEW")]
            CREATENEW = 1,
            /// <summary>
            /// Enum COPYORIGIN for value: COPY_ORIGIN
            /// </summary>
            [EnumMember(Value = "COPY_ORIGIN")]
            COPYORIGIN = 2,
            /// <summary>
            /// Enum CUSTOMIP for value: CUSTOM_IP
            /// </summary>
            [EnumMember(Value = "CUSTOM_IP")]
            CUSTOMIP = 3,
            /// <summary>
            /// Enum USENETWORKINTERFACE for value: USE_NETWORK_INTERFACE
            /// </summary>
            [EnumMember(Value = "USE_NETWORK_INTERFACE")]
            USENETWORKINTERFACE = 4        }
        /// <summary>
        /// Gets or Sets PrivateIPAction
        /// </summary>
        [DataMember(Name="privateIPAction", EmitDefaultValue=false)]
        public PrivateIPActionEnum? PrivateIPAction { get; set; }
        /// <summary>
        /// Defines StaticIpAction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StaticIpActionEnum
        {
            /// <summary>
            /// Enum EXISTING for value: EXISTING
            /// </summary>
            [EnumMember(Value = "EXISTING")]
            EXISTING = 1,
            /// <summary>
            /// Enum DONTCREATE for value: DONT_CREATE
            /// </summary>
            [EnumMember(Value = "DONT_CREATE")]
            DONTCREATE = 2,
            /// <summary>
            /// Enum CREATENEW for value: CREATE_NEW
            /// </summary>
            [EnumMember(Value = "CREATE_NEW")]
            CREATENEW = 3,
            /// <summary>
            /// Enum IFINORIGIN for value: IF_IN_ORIGIN
            /// </summary>
            [EnumMember(Value = "IF_IN_ORIGIN")]
            IFINORIGIN = 4        }
        /// <summary>
        /// Gets or Sets StaticIpAction
        /// </summary>
        [DataMember(Name="staticIpAction", EmitDefaultValue=false)]
        public StaticIpActionEnum? StaticIpAction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Blueprint" /> class.
        /// </summary>
        /// <param name="iamRole">AWS only. Possible values can be fetched from the Region object..</param>
        /// <param name="scsiAdapterType">Currently relevant for vCenter cloud only. Possible values can be fetched from the Region object..</param>
        /// <param name="publicIPAction">Whether to allocate an ephemeral public IP, or not. AS_SUBNET causes CloudEndure to copy this property from the source machine..</param>
        /// <param name="machineName">machineName.</param>
        /// <param name="cpus">Number of CPUs per per Target machine; Currently relevant for vCenter cloud only; Max value can be fetched from the maxCpusPerMachine property of the Region object. .</param>
        /// <param name="securityGroupIDs">AWS only. The security groups that will be applied to the target machine. Possible values can be fetched from the Region object..</param>
        /// <param name="runAfterLaunch">AWS only. Whether to power on the launched target machine after launch. True by default..</param>
        /// <param name="networkInterface">networkInterface.</param>
        /// <param name="mbRam">MB RAM per Target machine; Currently relevant for vCenter cloud only; Max value can be fetched from the maxMbRamPerMachine property of the Region object. .</param>
        /// <param name="instanceType">Possible values can be fetched from the Region object, plus special values \&quot;COPY_ORIGIN\&quot; or \&quot;CUSTOM\&quot;.</param>
        /// <param name="subnetIDs">AWS only. Configures a subnets in which the instance network interface will take part. Possible values can be fetched from the Region object..</param>
        /// <param name="coresPerCpu">Number of CPU cores per CPU in Target machine; Currently relevant for vCenter cloud only..</param>
        /// <param name="staticIp">Possible values can be fetched from the Region object..</param>
        /// <param name="launchOnInstanceId">instance id for target machine managed by AMS..</param>
        /// <param name="tags">AWS only. Tags that will be applied to the target machine..</param>
        /// <param name="securityGroupAction">How to assign a security group to the target machine..</param>
        /// <param name="privateIPs">privateIPs.</param>
        /// <param name="tenancy">tenancy.</param>
        /// <param name="computeLocationId">computeLocationId.</param>
        /// <param name="subnetsHostProject">GCP only. Host project for cross project network subnet..</param>
        /// <param name="logicalLocationId">vcenter &#x3D; vmFolder; relates to $ref LogicalLocation.</param>
        /// <param name="networkAdapterType">Currently relevant for vCenter cloud only. Possible values can be fetched from the Region object..</param>
        /// <param name="byolOnDedicatedInstance">specifies whether to use byol windows license if dedicated instance tenancy is selected..</param>
        /// <param name="placementGroup">AWS only. Possible values can be fetched from the Region object..</param>
        /// <param name="disks">AWS only. Target machine disk properties..</param>
        /// <param name="privateIPAction">privateIPAction.</param>
        /// <param name="staticIpAction">staticIpAction.</param>
        /// <param name="dedicatedHostIdentifier">dedicatedHostIdentifier.</param>
        /// <param name="useSharedRam">useSharedRam.</param>
        public Blueprint(string iamRole = default(string), string scsiAdapterType = default(string), PublicIPActionEnum? publicIPAction = default(PublicIPActionEnum?), string machineName = default(string), int? cpus = default(int?), List<string> securityGroupIDs = default(List<string>), bool? runAfterLaunch = default(bool?), string networkInterface = default(string), int? mbRam = default(int?), string instanceType = default(string), List<string> subnetIDs = default(List<string>), int? coresPerCpu = default(int?), string staticIp = default(string), string launchOnInstanceId = default(string), List<ReplicationConfigurationReplicationTags> tags = default(List<ReplicationConfigurationReplicationTags>), SecurityGroupActionEnum? securityGroupAction = default(SecurityGroupActionEnum?), List<string> privateIPs = default(List<string>), TenancyEnum? tenancy = default(TenancyEnum?), string computeLocationId = default(string), string subnetsHostProject = default(string), string logicalLocationId = default(string), string networkAdapterType = default(string), bool? byolOnDedicatedInstance = default(bool?), string placementGroup = default(string), List<BlueprintDisks> disks = default(List<BlueprintDisks>), PrivateIPActionEnum? privateIPAction = default(PrivateIPActionEnum?), StaticIpActionEnum? staticIpAction = default(StaticIpActionEnum?), string dedicatedHostIdentifier = default(string), bool? useSharedRam = default(bool?))
        {
            this.IamRole = iamRole;
            this.ScsiAdapterType = scsiAdapterType;
            this.PublicIPAction = publicIPAction;
            this.MachineName = machineName;
            this.Cpus = cpus;
            this.SecurityGroupIDs = securityGroupIDs;
            this.RunAfterLaunch = runAfterLaunch;
            this.NetworkInterface = networkInterface;
            this.MbRam = mbRam;
            this.InstanceType = instanceType;
            this.SubnetIDs = subnetIDs;
            this.CoresPerCpu = coresPerCpu;
            this.StaticIp = staticIp;
            this.LaunchOnInstanceId = launchOnInstanceId;
            this.Tags = tags;
            this.SecurityGroupAction = securityGroupAction;
            this.PrivateIPs = privateIPs;
            this.Tenancy = tenancy;
            this.ComputeLocationId = computeLocationId;
            this.SubnetsHostProject = subnetsHostProject;
            this.LogicalLocationId = logicalLocationId;
            this.NetworkAdapterType = networkAdapterType;
            this.ByolOnDedicatedInstance = byolOnDedicatedInstance;
            this.PlacementGroup = placementGroup;
            this.Disks = disks;
            this.PrivateIPAction = privateIPAction;
            this.StaticIpAction = staticIpAction;
            this.DedicatedHostIdentifier = dedicatedHostIdentifier;
            this.UseSharedRam = useSharedRam;
        }
        
        /// <summary>
        /// AWS only. Possible values can be fetched from the Region object.
        /// </summary>
        /// <value>AWS only. Possible values can be fetched from the Region object.</value>
        [DataMember(Name="iamRole", EmitDefaultValue=false)]
        public string IamRole { get; set; }

        /// <summary>
        /// Currently relevant for vCenter cloud only. Possible values can be fetched from the Region object.
        /// </summary>
        /// <value>Currently relevant for vCenter cloud only. Possible values can be fetched from the Region object.</value>
        [DataMember(Name="scsiAdapterType", EmitDefaultValue=false)]
        public string ScsiAdapterType { get; set; }


        /// <summary>
        /// Gets or Sets MachineName
        /// </summary>
        [DataMember(Name="machineName", EmitDefaultValue=false)]
        public string MachineName { get; set; }

        /// <summary>
        /// Number of CPUs per per Target machine; Currently relevant for vCenter cloud only; Max value can be fetched from the maxCpusPerMachine property of the Region object. 
        /// </summary>
        /// <value>Number of CPUs per per Target machine; Currently relevant for vCenter cloud only; Max value can be fetched from the maxCpusPerMachine property of the Region object. </value>
        [DataMember(Name="cpus", EmitDefaultValue=false)]
        public int? Cpus { get; set; }

        /// <summary>
        /// AWS only. The security groups that will be applied to the target machine. Possible values can be fetched from the Region object.
        /// </summary>
        /// <value>AWS only. The security groups that will be applied to the target machine. Possible values can be fetched from the Region object.</value>
        [DataMember(Name="securityGroupIDs", EmitDefaultValue=false)]
        public List<string> SecurityGroupIDs { get; set; }

        /// <summary>
        /// AWS only. Whether to power on the launched target machine after launch. True by default.
        /// </summary>
        /// <value>AWS only. Whether to power on the launched target machine after launch. True by default.</value>
        [DataMember(Name="runAfterLaunch", EmitDefaultValue=false)]
        public bool? RunAfterLaunch { get; set; }

        /// <summary>
        /// The private IP address recommended for use with this machine.
        /// </summary>
        /// <value>The private IP address recommended for use with this machine.</value>
        [DataMember(Name="recommendedPrivateIP", EmitDefaultValue=false)]
        public string RecommendedPrivateIP { get; private set; }

        /// <summary>
        /// Gets or Sets NetworkInterface
        /// </summary>
        [DataMember(Name="networkInterface", EmitDefaultValue=false)]
        public string NetworkInterface { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// MB RAM per Target machine; Currently relevant for vCenter cloud only; Max value can be fetched from the maxMbRamPerMachine property of the Region object. 
        /// </summary>
        /// <value>MB RAM per Target machine; Currently relevant for vCenter cloud only; Max value can be fetched from the maxMbRamPerMachine property of the Region object. </value>
        [DataMember(Name="mbRam", EmitDefaultValue=false)]
        public int? MbRam { get; set; }

        /// <summary>
        /// Possible values can be fetched from the Region object, plus special values \&quot;COPY_ORIGIN\&quot; or \&quot;CUSTOM\&quot;
        /// </summary>
        /// <value>Possible values can be fetched from the Region object, plus special values \&quot;COPY_ORIGIN\&quot; or \&quot;CUSTOM\&quot;</value>
        [DataMember(Name="instanceType", EmitDefaultValue=false)]
        public string InstanceType { get; set; }

        /// <summary>
        /// AWS only. Configures a subnets in which the instance network interface will take part. Possible values can be fetched from the Region object.
        /// </summary>
        /// <value>AWS only. Configures a subnets in which the instance network interface will take part. Possible values can be fetched from the Region object.</value>
        [DataMember(Name="subnetIDs", EmitDefaultValue=false)]
        public List<string> SubnetIDs { get; set; }

        /// <summary>
        /// Number of CPU cores per CPU in Target machine; Currently relevant for vCenter cloud only.
        /// </summary>
        /// <value>Number of CPU cores per CPU in Target machine; Currently relevant for vCenter cloud only.</value>
        [DataMember(Name="coresPerCpu", EmitDefaultValue=false)]
        public int? CoresPerCpu { get; set; }

        /// <summary>
        /// When instance rightsizing is enabled, the instance type suitable for the source machine&#x27;s HW
        /// </summary>
        /// <value>When instance rightsizing is enabled, the instance type suitable for the source machine&#x27;s HW</value>
        [DataMember(Name="recommendedInstanceType", EmitDefaultValue=false)]
        public string RecommendedInstanceType { get; private set; }

        /// <summary>
        /// Possible values can be fetched from the Region object.
        /// </summary>
        /// <value>Possible values can be fetched from the Region object.</value>
        [DataMember(Name="staticIp", EmitDefaultValue=false)]
        public string StaticIp { get; set; }

        /// <summary>
        /// instance id for target machine managed by AMS.
        /// </summary>
        /// <value>instance id for target machine managed by AMS.</value>
        [DataMember(Name="launchOnInstanceId", EmitDefaultValue=false)]
        public string LaunchOnInstanceId { get; set; }

        /// <summary>
        /// AWS only. Tags that will be applied to the target machine.
        /// </summary>
        /// <value>AWS only. Tags that will be applied to the target machine.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<ReplicationConfigurationReplicationTags> Tags { get; set; }


        /// <summary>
        /// Gets or Sets PrivateIPs
        /// </summary>
        [DataMember(Name="privateIPs", EmitDefaultValue=false)]
        public List<string> PrivateIPs { get; set; }


        /// <summary>
        /// Gets or Sets ComputeLocationId
        /// </summary>
        [DataMember(Name="computeLocationId", EmitDefaultValue=false)]
        public string ComputeLocationId { get; set; }

        /// <summary>
        /// GCP only. Host project for cross project network subnet.
        /// </summary>
        /// <value>GCP only. Host project for cross project network subnet.</value>
        [DataMember(Name="subnetsHostProject", EmitDefaultValue=false)]
        public string SubnetsHostProject { get; set; }

        /// <summary>
        /// vcenter &#x3D; vmFolder; relates to $ref LogicalLocation
        /// </summary>
        /// <value>vcenter &#x3D; vmFolder; relates to $ref LogicalLocation</value>
        [DataMember(Name="logicalLocationId", EmitDefaultValue=false)]
        public string LogicalLocationId { get; set; }

        /// <summary>
        /// Currently relevant for vCenter cloud only. Possible values can be fetched from the Region object.
        /// </summary>
        /// <value>Currently relevant for vCenter cloud only. Possible values can be fetched from the Region object.</value>
        [DataMember(Name="networkAdapterType", EmitDefaultValue=false)]
        public string NetworkAdapterType { get; set; }

        /// <summary>
        /// specifies whether to use byol windows license if dedicated instance tenancy is selected.
        /// </summary>
        /// <value>specifies whether to use byol windows license if dedicated instance tenancy is selected.</value>
        [DataMember(Name="byolOnDedicatedInstance", EmitDefaultValue=false)]
        public bool? ByolOnDedicatedInstance { get; set; }

        /// <summary>
        /// AWS only. Possible values can be fetched from the Region object.
        /// </summary>
        /// <value>AWS only. Possible values can be fetched from the Region object.</value>
        [DataMember(Name="placementGroup", EmitDefaultValue=false)]
        public string PlacementGroup { get; set; }

        /// <summary>
        /// Gets or Sets MachineId
        /// </summary>
        [DataMember(Name="machineId", EmitDefaultValue=false)]
        public string MachineId { get; private set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; private set; }

        /// <summary>
        /// AWS only. Target machine disk properties.
        /// </summary>
        /// <value>AWS only. Target machine disk properties.</value>
        [DataMember(Name="disks", EmitDefaultValue=false)]
        public List<BlueprintDisks> Disks { get; set; }



        /// <summary>
        /// Gets or Sets DedicatedHostIdentifier
        /// </summary>
        [DataMember(Name="dedicatedHostIdentifier", EmitDefaultValue=false)]
        public string DedicatedHostIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets UseSharedRam
        /// </summary>
        [DataMember(Name="useSharedRam", EmitDefaultValue=false)]
        public bool? UseSharedRam { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Blueprint {\n");
            sb.Append("  IamRole: ").Append(IamRole).Append("\n");
            sb.Append("  ScsiAdapterType: ").Append(ScsiAdapterType).Append("\n");
            sb.Append("  PublicIPAction: ").Append(PublicIPAction).Append("\n");
            sb.Append("  MachineName: ").Append(MachineName).Append("\n");
            sb.Append("  Cpus: ").Append(Cpus).Append("\n");
            sb.Append("  SecurityGroupIDs: ").Append(SecurityGroupIDs).Append("\n");
            sb.Append("  RunAfterLaunch: ").Append(RunAfterLaunch).Append("\n");
            sb.Append("  RecommendedPrivateIP: ").Append(RecommendedPrivateIP).Append("\n");
            sb.Append("  NetworkInterface: ").Append(NetworkInterface).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MbRam: ").Append(MbRam).Append("\n");
            sb.Append("  InstanceType: ").Append(InstanceType).Append("\n");
            sb.Append("  SubnetIDs: ").Append(SubnetIDs).Append("\n");
            sb.Append("  CoresPerCpu: ").Append(CoresPerCpu).Append("\n");
            sb.Append("  RecommendedInstanceType: ").Append(RecommendedInstanceType).Append("\n");
            sb.Append("  StaticIp: ").Append(StaticIp).Append("\n");
            sb.Append("  LaunchOnInstanceId: ").Append(LaunchOnInstanceId).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  SecurityGroupAction: ").Append(SecurityGroupAction).Append("\n");
            sb.Append("  PrivateIPs: ").Append(PrivateIPs).Append("\n");
            sb.Append("  Tenancy: ").Append(Tenancy).Append("\n");
            sb.Append("  ComputeLocationId: ").Append(ComputeLocationId).Append("\n");
            sb.Append("  SubnetsHostProject: ").Append(SubnetsHostProject).Append("\n");
            sb.Append("  LogicalLocationId: ").Append(LogicalLocationId).Append("\n");
            sb.Append("  NetworkAdapterType: ").Append(NetworkAdapterType).Append("\n");
            sb.Append("  ByolOnDedicatedInstance: ").Append(ByolOnDedicatedInstance).Append("\n");
            sb.Append("  PlacementGroup: ").Append(PlacementGroup).Append("\n");
            sb.Append("  MachineId: ").Append(MachineId).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Disks: ").Append(Disks).Append("\n");
            sb.Append("  PrivateIPAction: ").Append(PrivateIPAction).Append("\n");
            sb.Append("  StaticIpAction: ").Append(StaticIpAction).Append("\n");
            sb.Append("  DedicatedHostIdentifier: ").Append(DedicatedHostIdentifier).Append("\n");
            sb.Append("  UseSharedRam: ").Append(UseSharedRam).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Blueprint);
        }

        /// <summary>
        /// Returns true if Blueprint instances are equal
        /// </summary>
        /// <param name="input">Instance of Blueprint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Blueprint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IamRole == input.IamRole ||
                    (this.IamRole != null &&
                    this.IamRole.Equals(input.IamRole))
                ) && 
                (
                    this.ScsiAdapterType == input.ScsiAdapterType ||
                    (this.ScsiAdapterType != null &&
                    this.ScsiAdapterType.Equals(input.ScsiAdapterType))
                ) && 
                (
                    this.PublicIPAction == input.PublicIPAction ||
                    (this.PublicIPAction != null &&
                    this.PublicIPAction.Equals(input.PublicIPAction))
                ) && 
                (
                    this.MachineName == input.MachineName ||
                    (this.MachineName != null &&
                    this.MachineName.Equals(input.MachineName))
                ) && 
                (
                    this.Cpus == input.Cpus ||
                    (this.Cpus != null &&
                    this.Cpus.Equals(input.Cpus))
                ) && 
                (
                    this.SecurityGroupIDs == input.SecurityGroupIDs ||
                    this.SecurityGroupIDs != null &&
                    input.SecurityGroupIDs != null &&
                    this.SecurityGroupIDs.SequenceEqual(input.SecurityGroupIDs)
                ) && 
                (
                    this.RunAfterLaunch == input.RunAfterLaunch ||
                    (this.RunAfterLaunch != null &&
                    this.RunAfterLaunch.Equals(input.RunAfterLaunch))
                ) && 
                (
                    this.RecommendedPrivateIP == input.RecommendedPrivateIP ||
                    (this.RecommendedPrivateIP != null &&
                    this.RecommendedPrivateIP.Equals(input.RecommendedPrivateIP))
                ) && 
                (
                    this.NetworkInterface == input.NetworkInterface ||
                    (this.NetworkInterface != null &&
                    this.NetworkInterface.Equals(input.NetworkInterface))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MbRam == input.MbRam ||
                    (this.MbRam != null &&
                    this.MbRam.Equals(input.MbRam))
                ) && 
                (
                    this.InstanceType == input.InstanceType ||
                    (this.InstanceType != null &&
                    this.InstanceType.Equals(input.InstanceType))
                ) && 
                (
                    this.SubnetIDs == input.SubnetIDs ||
                    this.SubnetIDs != null &&
                    input.SubnetIDs != null &&
                    this.SubnetIDs.SequenceEqual(input.SubnetIDs)
                ) && 
                (
                    this.CoresPerCpu == input.CoresPerCpu ||
                    (this.CoresPerCpu != null &&
                    this.CoresPerCpu.Equals(input.CoresPerCpu))
                ) && 
                (
                    this.RecommendedInstanceType == input.RecommendedInstanceType ||
                    (this.RecommendedInstanceType != null &&
                    this.RecommendedInstanceType.Equals(input.RecommendedInstanceType))
                ) && 
                (
                    this.StaticIp == input.StaticIp ||
                    (this.StaticIp != null &&
                    this.StaticIp.Equals(input.StaticIp))
                ) && 
                (
                    this.LaunchOnInstanceId == input.LaunchOnInstanceId ||
                    (this.LaunchOnInstanceId != null &&
                    this.LaunchOnInstanceId.Equals(input.LaunchOnInstanceId))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.SecurityGroupAction == input.SecurityGroupAction ||
                    (this.SecurityGroupAction != null &&
                    this.SecurityGroupAction.Equals(input.SecurityGroupAction))
                ) && 
                (
                    this.PrivateIPs == input.PrivateIPs ||
                    this.PrivateIPs != null &&
                    input.PrivateIPs != null &&
                    this.PrivateIPs.SequenceEqual(input.PrivateIPs)
                ) && 
                (
                    this.Tenancy == input.Tenancy ||
                    (this.Tenancy != null &&
                    this.Tenancy.Equals(input.Tenancy))
                ) && 
                (
                    this.ComputeLocationId == input.ComputeLocationId ||
                    (this.ComputeLocationId != null &&
                    this.ComputeLocationId.Equals(input.ComputeLocationId))
                ) && 
                (
                    this.SubnetsHostProject == input.SubnetsHostProject ||
                    (this.SubnetsHostProject != null &&
                    this.SubnetsHostProject.Equals(input.SubnetsHostProject))
                ) && 
                (
                    this.LogicalLocationId == input.LogicalLocationId ||
                    (this.LogicalLocationId != null &&
                    this.LogicalLocationId.Equals(input.LogicalLocationId))
                ) && 
                (
                    this.NetworkAdapterType == input.NetworkAdapterType ||
                    (this.NetworkAdapterType != null &&
                    this.NetworkAdapterType.Equals(input.NetworkAdapterType))
                ) && 
                (
                    this.ByolOnDedicatedInstance == input.ByolOnDedicatedInstance ||
                    (this.ByolOnDedicatedInstance != null &&
                    this.ByolOnDedicatedInstance.Equals(input.ByolOnDedicatedInstance))
                ) && 
                (
                    this.PlacementGroup == input.PlacementGroup ||
                    (this.PlacementGroup != null &&
                    this.PlacementGroup.Equals(input.PlacementGroup))
                ) && 
                (
                    this.MachineId == input.MachineId ||
                    (this.MachineId != null &&
                    this.MachineId.Equals(input.MachineId))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Disks == input.Disks ||
                    this.Disks != null &&
                    input.Disks != null &&
                    this.Disks.SequenceEqual(input.Disks)
                ) && 
                (
                    this.PrivateIPAction == input.PrivateIPAction ||
                    (this.PrivateIPAction != null &&
                    this.PrivateIPAction.Equals(input.PrivateIPAction))
                ) && 
                (
                    this.StaticIpAction == input.StaticIpAction ||
                    (this.StaticIpAction != null &&
                    this.StaticIpAction.Equals(input.StaticIpAction))
                ) && 
                (
                    this.DedicatedHostIdentifier == input.DedicatedHostIdentifier ||
                    (this.DedicatedHostIdentifier != null &&
                    this.DedicatedHostIdentifier.Equals(input.DedicatedHostIdentifier))
                ) && 
                (
                    this.UseSharedRam == input.UseSharedRam ||
                    (this.UseSharedRam != null &&
                    this.UseSharedRam.Equals(input.UseSharedRam))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IamRole != null)
                    hashCode = hashCode * 59 + this.IamRole.GetHashCode();
                if (this.ScsiAdapterType != null)
                    hashCode = hashCode * 59 + this.ScsiAdapterType.GetHashCode();
                if (this.PublicIPAction != null)
                    hashCode = hashCode * 59 + this.PublicIPAction.GetHashCode();
                if (this.MachineName != null)
                    hashCode = hashCode * 59 + this.MachineName.GetHashCode();
                if (this.Cpus != null)
                    hashCode = hashCode * 59 + this.Cpus.GetHashCode();
                if (this.SecurityGroupIDs != null)
                    hashCode = hashCode * 59 + this.SecurityGroupIDs.GetHashCode();
                if (this.RunAfterLaunch != null)
                    hashCode = hashCode * 59 + this.RunAfterLaunch.GetHashCode();
                if (this.RecommendedPrivateIP != null)
                    hashCode = hashCode * 59 + this.RecommendedPrivateIP.GetHashCode();
                if (this.NetworkInterface != null)
                    hashCode = hashCode * 59 + this.NetworkInterface.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MbRam != null)
                    hashCode = hashCode * 59 + this.MbRam.GetHashCode();
                if (this.InstanceType != null)
                    hashCode = hashCode * 59 + this.InstanceType.GetHashCode();
                if (this.SubnetIDs != null)
                    hashCode = hashCode * 59 + this.SubnetIDs.GetHashCode();
                if (this.CoresPerCpu != null)
                    hashCode = hashCode * 59 + this.CoresPerCpu.GetHashCode();
                if (this.RecommendedInstanceType != null)
                    hashCode = hashCode * 59 + this.RecommendedInstanceType.GetHashCode();
                if (this.StaticIp != null)
                    hashCode = hashCode * 59 + this.StaticIp.GetHashCode();
                if (this.LaunchOnInstanceId != null)
                    hashCode = hashCode * 59 + this.LaunchOnInstanceId.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.SecurityGroupAction != null)
                    hashCode = hashCode * 59 + this.SecurityGroupAction.GetHashCode();
                if (this.PrivateIPs != null)
                    hashCode = hashCode * 59 + this.PrivateIPs.GetHashCode();
                if (this.Tenancy != null)
                    hashCode = hashCode * 59 + this.Tenancy.GetHashCode();
                if (this.ComputeLocationId != null)
                    hashCode = hashCode * 59 + this.ComputeLocationId.GetHashCode();
                if (this.SubnetsHostProject != null)
                    hashCode = hashCode * 59 + this.SubnetsHostProject.GetHashCode();
                if (this.LogicalLocationId != null)
                    hashCode = hashCode * 59 + this.LogicalLocationId.GetHashCode();
                if (this.NetworkAdapterType != null)
                    hashCode = hashCode * 59 + this.NetworkAdapterType.GetHashCode();
                if (this.ByolOnDedicatedInstance != null)
                    hashCode = hashCode * 59 + this.ByolOnDedicatedInstance.GetHashCode();
                if (this.PlacementGroup != null)
                    hashCode = hashCode * 59 + this.PlacementGroup.GetHashCode();
                if (this.MachineId != null)
                    hashCode = hashCode * 59 + this.MachineId.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.Disks != null)
                    hashCode = hashCode * 59 + this.Disks.GetHashCode();
                if (this.PrivateIPAction != null)
                    hashCode = hashCode * 59 + this.PrivateIPAction.GetHashCode();
                if (this.StaticIpAction != null)
                    hashCode = hashCode * 59 + this.StaticIpAction.GetHashCode();
                if (this.DedicatedHostIdentifier != null)
                    hashCode = hashCode * 59 + this.DedicatedHostIdentifier.GetHashCode();
                if (this.UseSharedRam != null)
                    hashCode = hashCode * 59 + this.UseSharedRam.GetHashCode();
                return hashCode;
            }
        }
    }
}
