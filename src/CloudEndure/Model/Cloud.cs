/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// Identifies a cloud by name, and the role it can serve in a specific account.
    /// </summary>
    [DataContract]
        public partial class Cloud :  IEquatable<Cloud>
    {
        /// <summary>
        /// Defines Roles
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum RolesEnum
        {
            /// <summary>
            /// Enum SOURCE for value: SOURCE
            /// </summary>
            [EnumMember(Value = "SOURCE")]
            SOURCE = 1,
            /// <summary>
            /// Enum TARGET for value: TARGET
            /// </summary>
            [EnumMember(Value = "TARGET")]
            TARGET = 2,
            /// <summary>
            /// Enum BACKUPTARGET for value: BACKUP_TARGET
            /// </summary>
            [EnumMember(Value = "BACKUP_TARGET")]
            BACKUPTARGET = 3,
            /// <summary>
            /// Enum FAILBACK for value: FAILBACK
            /// </summary>
            [EnumMember(Value = "FAILBACK")]
            FAILBACK = 4        }
        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<RolesEnum> Roles { get; set; }
        /// <summary>
        /// Defines Name
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum NameEnum
        {
            /// <summary>
            /// Enum AWS for value: AWS
            /// </summary>
            [EnumMember(Value = "AWS")]
            AWS = 1,
            /// <summary>
            /// Enum GCP for value: GCP
            /// </summary>
            [EnumMember(Value = "GCP")]
            GCP = 2,
            /// <summary>
            /// Enum AZURE for value: AZURE
            /// </summary>
            [EnumMember(Value = "AZURE")]
            AZURE = 3,
            /// <summary>
            /// Enum AZUREARM for value: AZURE_ARM
            /// </summary>
            [EnumMember(Value = "AZURE_ARM")]
            AZUREARM = 4,
            /// <summary>
            /// Enum VCENTER for value: VCENTER
            /// </summary>
            [EnumMember(Value = "VCENTER")]
            VCENTER = 5,
            /// <summary>
            /// Enum GENERIC for value: GENERIC
            /// </summary>
            [EnumMember(Value = "GENERIC")]
            GENERIC = 6,
            /// <summary>
            /// Enum VIOBEZEQ for value: VIO_BEZEQ
            /// </summary>
            [EnumMember(Value = "VIO_BEZEQ")]
            VIOBEZEQ = 7        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public NameEnum? Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cloud" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="roles">roles.</param>
        /// <param name="name">name.</param>
        public Cloud(string id = default(string), List<RolesEnum> roles = default(List<RolesEnum>), NameEnum? name = default(NameEnum?))
        {
            this.Id = id;
            this.Roles = roles;
            this.Name = name;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cloud {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cloud);
        }

        /// <summary>
        /// Returns true if Cloud instances are equal
        /// </summary>
        /// <param name="input">Instance of Cloud to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cloud input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    input.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }
    }
}
