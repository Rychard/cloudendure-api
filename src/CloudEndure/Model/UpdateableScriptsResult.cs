/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// UpdateableScriptsResult
    /// </summary>
    [DataContract]
        public partial class UpdateableScriptsResult :  IEquatable<UpdateableScriptsResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateableScriptsResult" /> class.
        /// </summary>
        /// <param name="onPremiseVolumes">onPremiseVolumes.</param>
        /// <param name="mountPoints">mountPoints.</param>
        /// <param name="postbootAutoCopyDatetime">postbootAutoCopyDatetime.</param>
        /// <param name="lvmVgs">lvmVgs.</param>
        /// <param name="prebootEnvironment">prebootEnvironment.</param>
        /// <param name="postboot">postboot.</param>
        /// <param name="converterAmi">converterAmi.</param>
        /// <param name="postbootUninstallDisable">postbootUninstallDisable.</param>
        /// <param name="volumeId">volumeId.</param>
        /// <param name="prebootAutoCopyDatetime">prebootAutoCopyDatetime.</param>
        /// <param name="partitions">partitions.</param>
        /// <param name="preboot">preboot.</param>
        /// <param name="onPremiseRootDevice">onPremiseRootDevice.</param>
        /// <param name="migration">migration.</param>
        public UpdateableScriptsResult(List<UpdateableScriptsResultOnPremiseVolumes> onPremiseVolumes = default(List<UpdateableScriptsResultOnPremiseVolumes>), List<string> mountPoints = default(List<string>), string postbootAutoCopyDatetime = default(string), List<string> lvmVgs = default(List<string>), Dictionary<string, string> prebootEnvironment = default(Dictionary<string, string>), List<string> postboot = default(List<string>), string converterAmi = default(string), bool? postbootUninstallDisable = default(bool?), string volumeId = default(string), string prebootAutoCopyDatetime = default(string), List<int?> partitions = default(List<int?>), List<string> preboot = default(List<string>), string onPremiseRootDevice = default(string), string migration = default(string))
        {
            this.OnPremiseVolumes = onPremiseVolumes;
            this.MountPoints = mountPoints;
            this.PostbootAutoCopyDatetime = postbootAutoCopyDatetime;
            this.LvmVgs = lvmVgs;
            this.PrebootEnvironment = prebootEnvironment;
            this.Postboot = postboot;
            this.ConverterAmi = converterAmi;
            this.PostbootUninstallDisable = postbootUninstallDisable;
            this.VolumeId = volumeId;
            this.PrebootAutoCopyDatetime = prebootAutoCopyDatetime;
            this.Partitions = partitions;
            this.Preboot = preboot;
            this.OnPremiseRootDevice = onPremiseRootDevice;
            this.Migration = migration;
        }
        
        /// <summary>
        /// Gets or Sets OnPremiseVolumes
        /// </summary>
        [DataMember(Name="on_premise_volumes", EmitDefaultValue=false)]
        public List<UpdateableScriptsResultOnPremiseVolumes> OnPremiseVolumes { get; set; }

        /// <summary>
        /// Gets or Sets MountPoints
        /// </summary>
        [DataMember(Name="mount_points", EmitDefaultValue=false)]
        public List<string> MountPoints { get; set; }

        /// <summary>
        /// Gets or Sets PostbootAutoCopyDatetime
        /// </summary>
        [DataMember(Name="postboot_auto_copy_datetime", EmitDefaultValue=false)]
        public string PostbootAutoCopyDatetime { get; set; }

        /// <summary>
        /// Gets or Sets LvmVgs
        /// </summary>
        [DataMember(Name="lvm_vgs", EmitDefaultValue=false)]
        public List<string> LvmVgs { get; set; }

        /// <summary>
        /// Gets or Sets PrebootEnvironment
        /// </summary>
        [DataMember(Name="preboot_environment", EmitDefaultValue=false)]
        public Dictionary<string, string> PrebootEnvironment { get; set; }

        /// <summary>
        /// Gets or Sets Postboot
        /// </summary>
        [DataMember(Name="postboot", EmitDefaultValue=false)]
        public List<string> Postboot { get; set; }

        /// <summary>
        /// Gets or Sets ConverterAmi
        /// </summary>
        [DataMember(Name="converter_ami", EmitDefaultValue=false)]
        public string ConverterAmi { get; set; }

        /// <summary>
        /// Gets or Sets PostbootUninstallDisable
        /// </summary>
        [DataMember(Name="postboot_uninstall_disable", EmitDefaultValue=false)]
        public bool? PostbootUninstallDisable { get; set; }

        /// <summary>
        /// Gets or Sets VolumeId
        /// </summary>
        [DataMember(Name="volume_id", EmitDefaultValue=false)]
        public string VolumeId { get; set; }

        /// <summary>
        /// Gets or Sets PrebootAutoCopyDatetime
        /// </summary>
        [DataMember(Name="preboot_auto_copy_datetime", EmitDefaultValue=false)]
        public string PrebootAutoCopyDatetime { get; set; }

        /// <summary>
        /// Gets or Sets Partitions
        /// </summary>
        [DataMember(Name="partitions", EmitDefaultValue=false)]
        public List<int?> Partitions { get; set; }

        /// <summary>
        /// Gets or Sets Preboot
        /// </summary>
        [DataMember(Name="preboot", EmitDefaultValue=false)]
        public List<string> Preboot { get; set; }

        /// <summary>
        /// Gets or Sets OnPremiseRootDevice
        /// </summary>
        [DataMember(Name="on_premise_root_device", EmitDefaultValue=false)]
        public string OnPremiseRootDevice { get; set; }

        /// <summary>
        /// Gets or Sets Migration
        /// </summary>
        [DataMember(Name="migration", EmitDefaultValue=false)]
        public string Migration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateableScriptsResult {\n");
            sb.Append("  OnPremiseVolumes: ").Append(OnPremiseVolumes).Append("\n");
            sb.Append("  MountPoints: ").Append(MountPoints).Append("\n");
            sb.Append("  PostbootAutoCopyDatetime: ").Append(PostbootAutoCopyDatetime).Append("\n");
            sb.Append("  LvmVgs: ").Append(LvmVgs).Append("\n");
            sb.Append("  PrebootEnvironment: ").Append(PrebootEnvironment).Append("\n");
            sb.Append("  Postboot: ").Append(Postboot).Append("\n");
            sb.Append("  ConverterAmi: ").Append(ConverterAmi).Append("\n");
            sb.Append("  PostbootUninstallDisable: ").Append(PostbootUninstallDisable).Append("\n");
            sb.Append("  VolumeId: ").Append(VolumeId).Append("\n");
            sb.Append("  PrebootAutoCopyDatetime: ").Append(PrebootAutoCopyDatetime).Append("\n");
            sb.Append("  Partitions: ").Append(Partitions).Append("\n");
            sb.Append("  Preboot: ").Append(Preboot).Append("\n");
            sb.Append("  OnPremiseRootDevice: ").Append(OnPremiseRootDevice).Append("\n");
            sb.Append("  Migration: ").Append(Migration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateableScriptsResult);
        }

        /// <summary>
        /// Returns true if UpdateableScriptsResult instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateableScriptsResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateableScriptsResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OnPremiseVolumes == input.OnPremiseVolumes ||
                    this.OnPremiseVolumes != null &&
                    input.OnPremiseVolumes != null &&
                    this.OnPremiseVolumes.SequenceEqual(input.OnPremiseVolumes)
                ) && 
                (
                    this.MountPoints == input.MountPoints ||
                    this.MountPoints != null &&
                    input.MountPoints != null &&
                    this.MountPoints.SequenceEqual(input.MountPoints)
                ) && 
                (
                    this.PostbootAutoCopyDatetime == input.PostbootAutoCopyDatetime ||
                    (this.PostbootAutoCopyDatetime != null &&
                    this.PostbootAutoCopyDatetime.Equals(input.PostbootAutoCopyDatetime))
                ) && 
                (
                    this.LvmVgs == input.LvmVgs ||
                    this.LvmVgs != null &&
                    input.LvmVgs != null &&
                    this.LvmVgs.SequenceEqual(input.LvmVgs)
                ) && 
                (
                    this.PrebootEnvironment == input.PrebootEnvironment ||
                    this.PrebootEnvironment != null &&
                    input.PrebootEnvironment != null &&
                    this.PrebootEnvironment.SequenceEqual(input.PrebootEnvironment)
                ) && 
                (
                    this.Postboot == input.Postboot ||
                    this.Postboot != null &&
                    input.Postboot != null &&
                    this.Postboot.SequenceEqual(input.Postboot)
                ) && 
                (
                    this.ConverterAmi == input.ConverterAmi ||
                    (this.ConverterAmi != null &&
                    this.ConverterAmi.Equals(input.ConverterAmi))
                ) && 
                (
                    this.PostbootUninstallDisable == input.PostbootUninstallDisable ||
                    (this.PostbootUninstallDisable != null &&
                    this.PostbootUninstallDisable.Equals(input.PostbootUninstallDisable))
                ) && 
                (
                    this.VolumeId == input.VolumeId ||
                    (this.VolumeId != null &&
                    this.VolumeId.Equals(input.VolumeId))
                ) && 
                (
                    this.PrebootAutoCopyDatetime == input.PrebootAutoCopyDatetime ||
                    (this.PrebootAutoCopyDatetime != null &&
                    this.PrebootAutoCopyDatetime.Equals(input.PrebootAutoCopyDatetime))
                ) && 
                (
                    this.Partitions == input.Partitions ||
                    this.Partitions != null &&
                    input.Partitions != null &&
                    this.Partitions.SequenceEqual(input.Partitions)
                ) && 
                (
                    this.Preboot == input.Preboot ||
                    this.Preboot != null &&
                    input.Preboot != null &&
                    this.Preboot.SequenceEqual(input.Preboot)
                ) && 
                (
                    this.OnPremiseRootDevice == input.OnPremiseRootDevice ||
                    (this.OnPremiseRootDevice != null &&
                    this.OnPremiseRootDevice.Equals(input.OnPremiseRootDevice))
                ) && 
                (
                    this.Migration == input.Migration ||
                    (this.Migration != null &&
                    this.Migration.Equals(input.Migration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OnPremiseVolumes != null)
                    hashCode = hashCode * 59 + this.OnPremiseVolumes.GetHashCode();
                if (this.MountPoints != null)
                    hashCode = hashCode * 59 + this.MountPoints.GetHashCode();
                if (this.PostbootAutoCopyDatetime != null)
                    hashCode = hashCode * 59 + this.PostbootAutoCopyDatetime.GetHashCode();
                if (this.LvmVgs != null)
                    hashCode = hashCode * 59 + this.LvmVgs.GetHashCode();
                if (this.PrebootEnvironment != null)
                    hashCode = hashCode * 59 + this.PrebootEnvironment.GetHashCode();
                if (this.Postboot != null)
                    hashCode = hashCode * 59 + this.Postboot.GetHashCode();
                if (this.ConverterAmi != null)
                    hashCode = hashCode * 59 + this.ConverterAmi.GetHashCode();
                if (this.PostbootUninstallDisable != null)
                    hashCode = hashCode * 59 + this.PostbootUninstallDisable.GetHashCode();
                if (this.VolumeId != null)
                    hashCode = hashCode * 59 + this.VolumeId.GetHashCode();
                if (this.PrebootAutoCopyDatetime != null)
                    hashCode = hashCode * 59 + this.PrebootAutoCopyDatetime.GetHashCode();
                if (this.Partitions != null)
                    hashCode = hashCode * 59 + this.Partitions.GetHashCode();
                if (this.Preboot != null)
                    hashCode = hashCode * 59 + this.Preboot.GetHashCode();
                if (this.OnPremiseRootDevice != null)
                    hashCode = hashCode * 59 + this.OnPremiseRootDevice.GetHashCode();
                if (this.Migration != null)
                    hashCode = hashCode * 59 + this.Migration.GetHashCode();
                return hashCode;
            }
        }
    }
}
