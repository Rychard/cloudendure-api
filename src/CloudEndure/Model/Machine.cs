/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// A machine on which a CloudEndure agent has been installed (Replication source).
    /// </summary>
    [DataContract]
        public partial class Machine :  IEquatable<Machine>
    {
        /// <summary>
        /// Is replication started, paused or stopped
        /// </summary>
        /// <value>Is replication started, paused or stopped</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ReplicationStatusEnum
        {
            /// <summary>
            /// Enum STOPPED for value: STOPPED
            /// </summary>
            [EnumMember(Value = "STOPPED")]
            STOPPED = 1,
            /// <summary>
            /// Enum PAUSED for value: PAUSED
            /// </summary>
            [EnumMember(Value = "PAUSED")]
            PAUSED = 2,
            /// <summary>
            /// Enum STARTED for value: STARTED
            /// </summary>
            [EnumMember(Value = "STARTED")]
            STARTED = 3        }
        /// <summary>
        /// Is replication started, paused or stopped
        /// </summary>
        /// <value>Is replication started, paused or stopped</value>
        [DataMember(Name="replicationStatus", EmitDefaultValue=false)]
        public ReplicationStatusEnum? ReplicationStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Machine" /> class.
        /// </summary>
        /// <param name="sourceProperties">sourceProperties.</param>
        /// <param name="replicationInfo">replicationInfo.</param>
        /// <param name="license">license.</param>
        /// <param name="tags">tags.</param>
        /// <param name="restoreServers">RestoreServer IDs .</param>
        /// <param name="fromPointInTime">fromPointInTime.</param>
        /// <param name="replicationStatus">Is replication started, paused or stopped.</param>
        /// <param name="replica">The ID of the target machine that has been previously launched, if such exists..</param>
        /// <param name="id">id.</param>
        /// <param name="replicationConfiguration">replicationConfiguration.</param>
        /// <param name="lifeCycle">lifeCycle.</param>
        /// <param name="isAgentInstalled">Whether a CloudEndure agent is currently installed on this machine..</param>
        public Machine(MachineSourceProperties sourceProperties = default(MachineSourceProperties), MachineReplicationInfo replicationInfo = default(MachineReplicationInfo), MachineLicense license = default(MachineLicense), List<string> tags = default(List<string>), List<Guid?> restoreServers = default(List<Guid?>), PointInTime fromPointInTime = default(PointInTime), ReplicationStatusEnum? replicationStatus = default(ReplicationStatusEnum?), string replica = default(string), string id = default(string), MachineReplicationConfiguration replicationConfiguration = default(MachineReplicationConfiguration), MachineLifeCycle lifeCycle = default(MachineLifeCycle), bool? isAgentInstalled = default(bool?))
        {
            this.SourceProperties = sourceProperties;
            this.ReplicationInfo = replicationInfo;
            this.License = license;
            this.Tags = tags;
            this.RestoreServers = restoreServers;
            this.FromPointInTime = fromPointInTime;
            this.ReplicationStatus = replicationStatus;
            this.Replica = replica;
            this.Id = id;
            this.ReplicationConfiguration = replicationConfiguration;
            this.LifeCycle = lifeCycle;
            this.IsAgentInstalled = isAgentInstalled;
        }
        
        /// <summary>
        /// Gets or Sets SourceProperties
        /// </summary>
        [DataMember(Name="sourceProperties", EmitDefaultValue=false)]
        public MachineSourceProperties SourceProperties { get; set; }

        /// <summary>
        /// Gets or Sets ReplicationInfo
        /// </summary>
        [DataMember(Name="replicationInfo", EmitDefaultValue=false)]
        public MachineReplicationInfo ReplicationInfo { get; set; }

        /// <summary>
        /// Gets or Sets License
        /// </summary>
        [DataMember(Name="license", EmitDefaultValue=false)]
        public MachineLicense License { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// RestoreServer IDs 
        /// </summary>
        /// <value>RestoreServer IDs </value>
        [DataMember(Name="restoreServers", EmitDefaultValue=false)]
        public List<Guid?> RestoreServers { get; set; }

        /// <summary>
        /// Gets or Sets FromPointInTime
        /// </summary>
        [DataMember(Name="fromPointInTime", EmitDefaultValue=false)]
        public PointInTime FromPointInTime { get; set; }


        /// <summary>
        /// The ID of the target machine that has been previously launched, if such exists.
        /// </summary>
        /// <value>The ID of the target machine that has been previously launched, if such exists.</value>
        [DataMember(Name="replica", EmitDefaultValue=false)]
        public string Replica { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ReplicationConfiguration
        /// </summary>
        [DataMember(Name="replicationConfiguration", EmitDefaultValue=false)]
        public MachineReplicationConfiguration ReplicationConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets LifeCycle
        /// </summary>
        [DataMember(Name="lifeCycle", EmitDefaultValue=false)]
        public MachineLifeCycle LifeCycle { get; set; }

        /// <summary>
        /// Whether a CloudEndure agent is currently installed on this machine.
        /// </summary>
        /// <value>Whether a CloudEndure agent is currently installed on this machine.</value>
        [DataMember(Name="isAgentInstalled", EmitDefaultValue=false)]
        public bool? IsAgentInstalled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Machine {\n");
            sb.Append("  SourceProperties: ").Append(SourceProperties).Append("\n");
            sb.Append("  ReplicationInfo: ").Append(ReplicationInfo).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  RestoreServers: ").Append(RestoreServers).Append("\n");
            sb.Append("  FromPointInTime: ").Append(FromPointInTime).Append("\n");
            sb.Append("  ReplicationStatus: ").Append(ReplicationStatus).Append("\n");
            sb.Append("  Replica: ").Append(Replica).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ReplicationConfiguration: ").Append(ReplicationConfiguration).Append("\n");
            sb.Append("  LifeCycle: ").Append(LifeCycle).Append("\n");
            sb.Append("  IsAgentInstalled: ").Append(IsAgentInstalled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Machine);
        }

        /// <summary>
        /// Returns true if Machine instances are equal
        /// </summary>
        /// <param name="input">Instance of Machine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Machine input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SourceProperties == input.SourceProperties ||
                    (this.SourceProperties != null &&
                    this.SourceProperties.Equals(input.SourceProperties))
                ) && 
                (
                    this.ReplicationInfo == input.ReplicationInfo ||
                    (this.ReplicationInfo != null &&
                    this.ReplicationInfo.Equals(input.ReplicationInfo))
                ) && 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.RestoreServers == input.RestoreServers ||
                    this.RestoreServers != null &&
                    input.RestoreServers != null &&
                    this.RestoreServers.SequenceEqual(input.RestoreServers)
                ) && 
                (
                    this.FromPointInTime == input.FromPointInTime ||
                    (this.FromPointInTime != null &&
                    this.FromPointInTime.Equals(input.FromPointInTime))
                ) && 
                (
                    this.ReplicationStatus == input.ReplicationStatus ||
                    (this.ReplicationStatus != null &&
                    this.ReplicationStatus.Equals(input.ReplicationStatus))
                ) && 
                (
                    this.Replica == input.Replica ||
                    (this.Replica != null &&
                    this.Replica.Equals(input.Replica))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ReplicationConfiguration == input.ReplicationConfiguration ||
                    (this.ReplicationConfiguration != null &&
                    this.ReplicationConfiguration.Equals(input.ReplicationConfiguration))
                ) && 
                (
                    this.LifeCycle == input.LifeCycle ||
                    (this.LifeCycle != null &&
                    this.LifeCycle.Equals(input.LifeCycle))
                ) && 
                (
                    this.IsAgentInstalled == input.IsAgentInstalled ||
                    (this.IsAgentInstalled != null &&
                    this.IsAgentInstalled.Equals(input.IsAgentInstalled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceProperties != null)
                    hashCode = hashCode * 59 + this.SourceProperties.GetHashCode();
                if (this.ReplicationInfo != null)
                    hashCode = hashCode * 59 + this.ReplicationInfo.GetHashCode();
                if (this.License != null)
                    hashCode = hashCode * 59 + this.License.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.RestoreServers != null)
                    hashCode = hashCode * 59 + this.RestoreServers.GetHashCode();
                if (this.FromPointInTime != null)
                    hashCode = hashCode * 59 + this.FromPointInTime.GetHashCode();
                if (this.ReplicationStatus != null)
                    hashCode = hashCode * 59 + this.ReplicationStatus.GetHashCode();
                if (this.Replica != null)
                    hashCode = hashCode * 59 + this.Replica.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ReplicationConfiguration != null)
                    hashCode = hashCode * 59 + this.ReplicationConfiguration.GetHashCode();
                if (this.LifeCycle != null)
                    hashCode = hashCode * 59 + this.LifeCycle.GetHashCode();
                if (this.IsAgentInstalled != null)
                    hashCode = hashCode * 59 + this.IsAgentInstalled.GetHashCode();
                return hashCode;
            }
        }
    }
}
