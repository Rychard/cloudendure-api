/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// BlueprintDisks
    /// </summary>
    [DataContract]
        public partial class BlueprintDisks :  IEquatable<BlueprintDisks>
    {
        /// <summary>
        /// The type of disk to allocate in the target machine. COPY_ORIGIN will use the source setting.
        /// </summary>
        /// <value>The type of disk to allocate in the target machine. COPY_ORIGIN will use the source setting.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum COPYORIGIN for value: COPY_ORIGIN
            /// </summary>
            [EnumMember(Value = "COPY_ORIGIN")]
            COPYORIGIN = 1,
            /// <summary>
            /// Enum STANDARD for value: STANDARD
            /// </summary>
            [EnumMember(Value = "STANDARD")]
            STANDARD = 2,
            /// <summary>
            /// Enum SSD for value: SSD
            /// </summary>
            [EnumMember(Value = "SSD")]
            SSD = 3,
            /// <summary>
            /// Enum PROVISIONEDSSD for value: PROVISIONED_SSD
            /// </summary>
            [EnumMember(Value = "PROVISIONED_SSD")]
            PROVISIONEDSSD = 4,
            /// <summary>
            /// Enum ST1 for value: ST1
            /// </summary>
            [EnumMember(Value = "ST1")]
            ST1 = 5,
            /// <summary>
            /// Enum SC1 for value: SC1
            /// </summary>
            [EnumMember(Value = "SC1")]
            SC1 = 6        }
        /// <summary>
        /// The type of disk to allocate in the target machine. COPY_ORIGIN will use the source setting.
        /// </summary>
        /// <value>The type of disk to allocate in the target machine. COPY_ORIGIN will use the source setting.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlueprintDisks" /> class.
        /// </summary>
        /// <param name="iops">iops.</param>
        /// <param name="type">The type of disk to allocate in the target machine. COPY_ORIGIN will use the source setting..</param>
        /// <param name="name">Disk name as appears in the source machine object..</param>
        public BlueprintDisks(int? iops = default(int?), TypeEnum? type = default(TypeEnum?), string name = default(string))
        {
            this.Iops = iops;
            this.Type = type;
            this.Name = name;
        }
        
        /// <summary>
        /// Gets or Sets Iops
        /// </summary>
        [DataMember(Name="iops", EmitDefaultValue=false)]
        public int? Iops { get; set; }


        /// <summary>
        /// Disk name as appears in the source machine object.
        /// </summary>
        /// <value>Disk name as appears in the source machine object.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlueprintDisks {\n");
            sb.Append("  Iops: ").Append(Iops).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlueprintDisks);
        }

        /// <summary>
        /// Returns true if BlueprintDisks instances are equal
        /// </summary>
        /// <param name="input">Instance of BlueprintDisks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlueprintDisks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Iops == input.Iops ||
                    (this.Iops != null &&
                    this.Iops.Equals(input.Iops))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Iops != null)
                    hashCode = hashCode * 59 + this.Iops.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }
    }
}
