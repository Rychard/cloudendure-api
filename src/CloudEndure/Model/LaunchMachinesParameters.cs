/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// The machine and pointInTime IDs to start replica creation for.
    /// </summary>
    [DataContract]
        public partial class LaunchMachinesParameters :  IEquatable<LaunchMachinesParameters>
    {
        /// <summary>
        /// Defines LaunchType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum LaunchTypeEnum
        {
            /// <summary>
            /// Enum TEST for value: TEST
            /// </summary>
            [EnumMember(Value = "TEST")]
            TEST = 1,
            /// <summary>
            /// Enum RECOVERY for value: RECOVERY
            /// </summary>
            [EnumMember(Value = "RECOVERY")]
            RECOVERY = 2,
            /// <summary>
            /// Enum CUTOVER for value: CUTOVER
            /// </summary>
            [EnumMember(Value = "CUTOVER")]
            CUTOVER = 3,
            /// <summary>
            /// Enum DEBUG for value: DEBUG
            /// </summary>
            [EnumMember(Value = "DEBUG")]
            DEBUG = 4        }
        /// <summary>
        /// Gets or Sets LaunchType
        /// </summary>
        [DataMember(Name="launchType", EmitDefaultValue=false)]
        public LaunchTypeEnum LaunchType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LaunchMachinesParameters" /> class.
        /// </summary>
        /// <param name="items">items.</param>
        /// <param name="launchType">launchType (required).</param>
        /// <param name="debugScripts">debugScripts.</param>
        public LaunchMachinesParameters(List<MachineAndPointInTime> items = default(List<MachineAndPointInTime>), LaunchTypeEnum launchType = default(LaunchTypeEnum), LaunchMachinesParametersDebugScripts debugScripts = default(LaunchMachinesParametersDebugScripts))
        {
            // to ensure "launchType" is required (not null)
            if (launchType == null)
            {
                throw new InvalidDataException("launchType is a required property for LaunchMachinesParameters and cannot be null");
            }
            else
            {
                this.LaunchType = launchType;
            }
            this.Items = items;
            this.DebugScripts = debugScripts;
        }
        
        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<MachineAndPointInTime> Items { get; set; }


        /// <summary>
        /// Gets or Sets DebugScripts
        /// </summary>
        [DataMember(Name="debugScripts", EmitDefaultValue=false)]
        public LaunchMachinesParametersDebugScripts DebugScripts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LaunchMachinesParameters {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  LaunchType: ").Append(LaunchType).Append("\n");
            sb.Append("  DebugScripts: ").Append(DebugScripts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LaunchMachinesParameters);
        }

        /// <summary>
        /// Returns true if LaunchMachinesParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of LaunchMachinesParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LaunchMachinesParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.LaunchType == input.LaunchType ||
                    (this.LaunchType != null &&
                    this.LaunchType.Equals(input.LaunchType))
                ) && 
                (
                    this.DebugScripts == input.DebugScripts ||
                    (this.DebugScripts != null &&
                    this.DebugScripts.Equals(input.DebugScripts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.LaunchType != null)
                    hashCode = hashCode * 59 + this.LaunchType.GetHashCode();
                if (this.DebugScripts != null)
                    hashCode = hashCode * 59 + this.DebugScripts.GetHashCode();
                return hashCode;
            }
        }
    }
}
