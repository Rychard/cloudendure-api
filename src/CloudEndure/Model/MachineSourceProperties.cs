/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// Source machine properties.
    /// </summary>
    [DataContract]
        public partial class MachineSourceProperties :  IEquatable<MachineSourceProperties>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineSourceProperties" /> class.
        /// </summary>
        /// <param name="name">Machine name in the source environment..</param>
        /// <param name="installedApplications">installedApplications.</param>
        /// <param name="disks">Identified disks..</param>
        /// <param name="machineCloudState">Machine current state in the source environment..</param>
        /// <param name="publicIps">Static (non-ephemral) public IPs. On some clouds this also includes ephemeral IPs..</param>
        /// <param name="memory">Available RAM (in Bytes)..</param>
        /// <param name="os">Running Operating System..</param>
        /// <param name="cpu">Identified CPUs..</param>
        /// <param name="runningServices">runningServices.</param>
        /// <param name="machineCloudId">Machine ID in the source environment..</param>
        public MachineSourceProperties(string name = default(string), MachineSourcePropertiesInstalledApplications installedApplications = default(MachineSourcePropertiesInstalledApplications), List<MachineSourcePropertiesDisks> disks = default(List<MachineSourcePropertiesDisks>), string machineCloudState = default(string), List<string> publicIps = default(List<string>), int? memory = default(int?), string os = default(string), List<MachineSourcePropertiesCpu> cpu = default(List<MachineSourcePropertiesCpu>), MachineSourcePropertiesRunningServices runningServices = default(MachineSourcePropertiesRunningServices), string machineCloudId = default(string))
        {
            this.Name = name;
            this.InstalledApplications = installedApplications;
            this.Disks = disks;
            this.MachineCloudState = machineCloudState;
            this.PublicIps = publicIps;
            this.Memory = memory;
            this.Os = os;
            this.Cpu = cpu;
            this.RunningServices = runningServices;
            this.MachineCloudId = machineCloudId;
        }
        
        /// <summary>
        /// Machine name in the source environment.
        /// </summary>
        /// <value>Machine name in the source environment.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets InstalledApplications
        /// </summary>
        [DataMember(Name="installedApplications", EmitDefaultValue=false)]
        public MachineSourcePropertiesInstalledApplications InstalledApplications { get; set; }

        /// <summary>
        /// Identified disks.
        /// </summary>
        /// <value>Identified disks.</value>
        [DataMember(Name="disks", EmitDefaultValue=false)]
        public List<MachineSourcePropertiesDisks> Disks { get; set; }

        /// <summary>
        /// Machine current state in the source environment.
        /// </summary>
        /// <value>Machine current state in the source environment.</value>
        [DataMember(Name="machineCloudState", EmitDefaultValue=false)]
        public string MachineCloudState { get; set; }

        /// <summary>
        /// Static (non-ephemral) public IPs. On some clouds this also includes ephemeral IPs.
        /// </summary>
        /// <value>Static (non-ephemral) public IPs. On some clouds this also includes ephemeral IPs.</value>
        [DataMember(Name="publicIps", EmitDefaultValue=false)]
        public List<string> PublicIps { get; set; }

        /// <summary>
        /// Available RAM (in Bytes).
        /// </summary>
        /// <value>Available RAM (in Bytes).</value>
        [DataMember(Name="memory", EmitDefaultValue=false)]
        public int? Memory { get; set; }

        /// <summary>
        /// Running Operating System.
        /// </summary>
        /// <value>Running Operating System.</value>
        [DataMember(Name="os", EmitDefaultValue=false)]
        public string Os { get; set; }

        /// <summary>
        /// Identified CPUs.
        /// </summary>
        /// <value>Identified CPUs.</value>
        [DataMember(Name="cpu", EmitDefaultValue=false)]
        public List<MachineSourcePropertiesCpu> Cpu { get; set; }

        /// <summary>
        /// Gets or Sets RunningServices
        /// </summary>
        [DataMember(Name="runningServices", EmitDefaultValue=false)]
        public MachineSourcePropertiesRunningServices RunningServices { get; set; }

        /// <summary>
        /// Machine ID in the source environment.
        /// </summary>
        /// <value>Machine ID in the source environment.</value>
        [DataMember(Name="machineCloudId", EmitDefaultValue=false)]
        public string MachineCloudId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MachineSourceProperties {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  InstalledApplications: ").Append(InstalledApplications).Append("\n");
            sb.Append("  Disks: ").Append(Disks).Append("\n");
            sb.Append("  MachineCloudState: ").Append(MachineCloudState).Append("\n");
            sb.Append("  PublicIps: ").Append(PublicIps).Append("\n");
            sb.Append("  Memory: ").Append(Memory).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("  Cpu: ").Append(Cpu).Append("\n");
            sb.Append("  RunningServices: ").Append(RunningServices).Append("\n");
            sb.Append("  MachineCloudId: ").Append(MachineCloudId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MachineSourceProperties);
        }

        /// <summary>
        /// Returns true if MachineSourceProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of MachineSourceProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MachineSourceProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.InstalledApplications == input.InstalledApplications ||
                    (this.InstalledApplications != null &&
                    this.InstalledApplications.Equals(input.InstalledApplications))
                ) && 
                (
                    this.Disks == input.Disks ||
                    this.Disks != null &&
                    input.Disks != null &&
                    this.Disks.SequenceEqual(input.Disks)
                ) && 
                (
                    this.MachineCloudState == input.MachineCloudState ||
                    (this.MachineCloudState != null &&
                    this.MachineCloudState.Equals(input.MachineCloudState))
                ) && 
                (
                    this.PublicIps == input.PublicIps ||
                    this.PublicIps != null &&
                    input.PublicIps != null &&
                    this.PublicIps.SequenceEqual(input.PublicIps)
                ) && 
                (
                    this.Memory == input.Memory ||
                    (this.Memory != null &&
                    this.Memory.Equals(input.Memory))
                ) && 
                (
                    this.Os == input.Os ||
                    (this.Os != null &&
                    this.Os.Equals(input.Os))
                ) && 
                (
                    this.Cpu == input.Cpu ||
                    this.Cpu != null &&
                    input.Cpu != null &&
                    this.Cpu.SequenceEqual(input.Cpu)
                ) && 
                (
                    this.RunningServices == input.RunningServices ||
                    (this.RunningServices != null &&
                    this.RunningServices.Equals(input.RunningServices))
                ) && 
                (
                    this.MachineCloudId == input.MachineCloudId ||
                    (this.MachineCloudId != null &&
                    this.MachineCloudId.Equals(input.MachineCloudId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.InstalledApplications != null)
                    hashCode = hashCode * 59 + this.InstalledApplications.GetHashCode();
                if (this.Disks != null)
                    hashCode = hashCode * 59 + this.Disks.GetHashCode();
                if (this.MachineCloudState != null)
                    hashCode = hashCode * 59 + this.MachineCloudState.GetHashCode();
                if (this.PublicIps != null)
                    hashCode = hashCode * 59 + this.PublicIps.GetHashCode();
                if (this.Memory != null)
                    hashCode = hashCode * 59 + this.Memory.GetHashCode();
                if (this.Os != null)
                    hashCode = hashCode * 59 + this.Os.GetHashCode();
                if (this.Cpu != null)
                    hashCode = hashCode * 59 + this.Cpu.GetHashCode();
                if (this.RunningServices != null)
                    hashCode = hashCode * 59 + this.RunningServices.GetHashCode();
                if (this.MachineCloudId != null)
                    hashCode = hashCode * 59 + this.MachineCloudId.GetHashCode();
                return hashCode;
            }
        }
    }
}
