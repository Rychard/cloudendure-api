/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// Returns all info relevant for user UI initialization
    /// </summary>
    [DataContract]
        public partial class ExtendedAccountInfo :  IEquatable<ExtendedAccountInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtendedAccountInfo" /> class.
        /// </summary>
        /// <param name="account">account.</param>
        /// <param name="clouds">clouds.</param>
        /// <param name="genericRegion">genericRegion.</param>
        /// <param name="dateTime">dateTime.</param>
        /// <param name="user">user.</param>
        /// <param name="projects">projects.</param>
        /// <param name="isNewlyRegistered">isNewlyRegistered.</param>
        /// <param name="replicationConfigurations">replicationConfigurations.</param>
        public ExtendedAccountInfo(Account account = default(Account), CloudsList clouds = default(CloudsList), Region genericRegion = default(Region), Time dateTime = default(Time), User user = default(User), ProjectsList projects = default(ProjectsList), bool? isNewlyRegistered = default(bool?), ReplicationConfigurationList replicationConfigurations = default(ReplicationConfigurationList))
        {
            this.Account = account;
            this.Clouds = clouds;
            this.GenericRegion = genericRegion;
            this.DateTime = dateTime;
            this.User = user;
            this.Projects = projects;
            this.IsNewlyRegistered = isNewlyRegistered;
            this.ReplicationConfigurations = replicationConfigurations;
        }
        
        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public Account Account { get; set; }

        /// <summary>
        /// Gets or Sets Clouds
        /// </summary>
        [DataMember(Name="clouds", EmitDefaultValue=false)]
        public CloudsList Clouds { get; set; }

        /// <summary>
        /// Gets or Sets GenericRegion
        /// </summary>
        [DataMember(Name="genericRegion", EmitDefaultValue=false)]
        public Region GenericRegion { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name="dateTime", EmitDefaultValue=false)]
        public Time DateTime { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Gets or Sets Projects
        /// </summary>
        [DataMember(Name="projects", EmitDefaultValue=false)]
        public ProjectsList Projects { get; set; }

        /// <summary>
        /// Gets or Sets IsNewlyRegistered
        /// </summary>
        [DataMember(Name="isNewlyRegistered", EmitDefaultValue=false)]
        public bool? IsNewlyRegistered { get; set; }

        /// <summary>
        /// Gets or Sets ReplicationConfigurations
        /// </summary>
        [DataMember(Name="replicationConfigurations", EmitDefaultValue=false)]
        public ReplicationConfigurationList ReplicationConfigurations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtendedAccountInfo {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Clouds: ").Append(Clouds).Append("\n");
            sb.Append("  GenericRegion: ").Append(GenericRegion).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  IsNewlyRegistered: ").Append(IsNewlyRegistered).Append("\n");
            sb.Append("  ReplicationConfigurations: ").Append(ReplicationConfigurations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtendedAccountInfo);
        }

        /// <summary>
        /// Returns true if ExtendedAccountInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtendedAccountInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtendedAccountInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Clouds == input.Clouds ||
                    (this.Clouds != null &&
                    this.Clouds.Equals(input.Clouds))
                ) && 
                (
                    this.GenericRegion == input.GenericRegion ||
                    (this.GenericRegion != null &&
                    this.GenericRegion.Equals(input.GenericRegion))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Projects == input.Projects ||
                    (this.Projects != null &&
                    this.Projects.Equals(input.Projects))
                ) && 
                (
                    this.IsNewlyRegistered == input.IsNewlyRegistered ||
                    (this.IsNewlyRegistered != null &&
                    this.IsNewlyRegistered.Equals(input.IsNewlyRegistered))
                ) && 
                (
                    this.ReplicationConfigurations == input.ReplicationConfigurations ||
                    (this.ReplicationConfigurations != null &&
                    this.ReplicationConfigurations.Equals(input.ReplicationConfigurations))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Clouds != null)
                    hashCode = hashCode * 59 + this.Clouds.GetHashCode();
                if (this.GenericRegion != null)
                    hashCode = hashCode * 59 + this.GenericRegion.GetHashCode();
                if (this.DateTime != null)
                    hashCode = hashCode * 59 + this.DateTime.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Projects != null)
                    hashCode = hashCode * 59 + this.Projects.GetHashCode();
                if (this.IsNewlyRegistered != null)
                    hashCode = hashCode * 59 + this.IsNewlyRegistered.GetHashCode();
                if (this.ReplicationConfigurations != null)
                    hashCode = hashCode * 59 + this.ReplicationConfigurations.GetHashCode();
                return hashCode;
            }
        }
    }
}
