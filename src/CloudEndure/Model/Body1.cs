/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// Body1
    /// </summary>
    [DataContract]
        public partial class Body1 :  IEquatable<Body1>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body1" /> class.
        /// </summary>
        /// <param name="username">username.</param>
        /// <param name="loginToken">loginToken.</param>
        /// <param name="userApiToken">userApiToken.</param>
        /// <param name="agentInstallationToken">agentInstallationToken.</param>
        /// <param name="password">password.</param>
        /// <param name="accountIdentifier">accountIdentifier.</param>
        /// <param name="googleOauthCode">googleOauthCode.</param>
        public Body1(string username = default(string), string loginToken = default(string), string userApiToken = default(string), string agentInstallationToken = default(string), string password = default(string), string accountIdentifier = default(string), string googleOauthCode = default(string))
        {
            this.Username = username;
            this.LoginToken = loginToken;
            this.UserApiToken = userApiToken;
            this.AgentInstallationToken = agentInstallationToken;
            this.Password = password;
            this.AccountIdentifier = accountIdentifier;
            this.GoogleOauthCode = googleOauthCode;
        }
        
        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets LoginToken
        /// </summary>
        [DataMember(Name="loginToken", EmitDefaultValue=false)]
        public string LoginToken { get; set; }

        /// <summary>
        /// Gets or Sets UserApiToken
        /// </summary>
        [DataMember(Name="userApiToken", EmitDefaultValue=false)]
        public string UserApiToken { get; set; }

        /// <summary>
        /// Gets or Sets AgentInstallationToken
        /// </summary>
        [DataMember(Name="agentInstallationToken", EmitDefaultValue=false)]
        public string AgentInstallationToken { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets AccountIdentifier
        /// </summary>
        [DataMember(Name="accountIdentifier", EmitDefaultValue=false)]
        public string AccountIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets GoogleOauthCode
        /// </summary>
        [DataMember(Name="googleOauthCode", EmitDefaultValue=false)]
        public string GoogleOauthCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body1 {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  LoginToken: ").Append(LoginToken).Append("\n");
            sb.Append("  UserApiToken: ").Append(UserApiToken).Append("\n");
            sb.Append("  AgentInstallationToken: ").Append(AgentInstallationToken).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  AccountIdentifier: ").Append(AccountIdentifier).Append("\n");
            sb.Append("  GoogleOauthCode: ").Append(GoogleOauthCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body1);
        }

        /// <summary>
        /// Returns true if Body1 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.LoginToken == input.LoginToken ||
                    (this.LoginToken != null &&
                    this.LoginToken.Equals(input.LoginToken))
                ) && 
                (
                    this.UserApiToken == input.UserApiToken ||
                    (this.UserApiToken != null &&
                    this.UserApiToken.Equals(input.UserApiToken))
                ) && 
                (
                    this.AgentInstallationToken == input.AgentInstallationToken ||
                    (this.AgentInstallationToken != null &&
                    this.AgentInstallationToken.Equals(input.AgentInstallationToken))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.AccountIdentifier == input.AccountIdentifier ||
                    (this.AccountIdentifier != null &&
                    this.AccountIdentifier.Equals(input.AccountIdentifier))
                ) && 
                (
                    this.GoogleOauthCode == input.GoogleOauthCode ||
                    (this.GoogleOauthCode != null &&
                    this.GoogleOauthCode.Equals(input.GoogleOauthCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.LoginToken != null)
                    hashCode = hashCode * 59 + this.LoginToken.GetHashCode();
                if (this.UserApiToken != null)
                    hashCode = hashCode * 59 + this.UserApiToken.GetHashCode();
                if (this.AgentInstallationToken != null)
                    hashCode = hashCode * 59 + this.AgentInstallationToken.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.AccountIdentifier != null)
                    hashCode = hashCode * 59 + this.AccountIdentifier.GetHashCode();
                if (this.GoogleOauthCode != null)
                    hashCode = hashCode * 59 + this.GoogleOauthCode.GetHashCode();
                return hashCode;
            }
        }
    }
}
