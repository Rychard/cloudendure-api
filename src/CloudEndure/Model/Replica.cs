/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// A launched target machine (For a specific replication source).
    /// </summary>
    [DataContract]
        public partial class Replica :  IEquatable<Replica>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Replica" /> class.
        /// </summary>
        /// <param name="machine">The ID of the source machine for this target machine..</param>
        /// <param name="pointInTime">The ID of the pointInTime object from which this target machine was created..</param>
        public Replica(string machine = default(string), string pointInTime = default(string))
        {
            this.Machine = machine;
            this.PointInTime = pointInTime;
        }
        
        /// <summary>
        /// The ID of the source machine for this target machine.
        /// </summary>
        /// <value>The ID of the source machine for this target machine.</value>
        [DataMember(Name="machine", EmitDefaultValue=false)]
        public string Machine { get; set; }

        /// <summary>
        /// Timestamp for launching this target machine.
        /// </summary>
        /// <value>Timestamp for launching this target machine.</value>
        [DataMember(Name="cloudEndureCreationDateTime", EmitDefaultValue=false)]
        public DateTime? CloudEndureCreationDateTime { get; private set; }

        /// <summary>
        /// Target machine name in the target environment.
        /// </summary>
        /// <value>Target machine name in the target environment.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// The ID of the pointInTime object from which this target machine was created.
        /// </summary>
        /// <value>The ID of the pointInTime object from which this target machine was created.</value>
        [DataMember(Name="pointInTime", EmitDefaultValue=false)]
        public string PointInTime { get; set; }

        /// <summary>
        /// Gets or Sets JobId
        /// </summary>
        [DataMember(Name="jobId", EmitDefaultValue=false)]
        public string JobId { get; private set; }

        /// <summary>
        /// Target machine state in the target environment.
        /// </summary>
        /// <value>Target machine state in the target environment.</value>
        [DataMember(Name="machineCloudState", EmitDefaultValue=false)]
        public string MachineCloudState { get; private set; }

        /// <summary>
        /// Static (non-ephemral) public IPs. On some clouds this also includes ephemeral IPs.
        /// </summary>
        /// <value>Static (non-ephemral) public IPs. On some clouds this also includes ephemeral IPs.</value>
        [DataMember(Name="publicIps", EmitDefaultValue=false)]
        public List<string> PublicIps { get; private set; }

        /// <summary>
        /// The ID of the region where this target machine has been launched.
        /// </summary>
        /// <value>The ID of the region where this target machine has been launched.</value>
        [DataMember(Name="regionId", EmitDefaultValue=false)]
        public string RegionId { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Target machine ID in the target environment.
        /// </summary>
        /// <value>Target machine ID in the target environment.</value>
        [DataMember(Name="machineCloudId", EmitDefaultValue=false)]
        public string MachineCloudId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Replica {\n");
            sb.Append("  Machine: ").Append(Machine).Append("\n");
            sb.Append("  CloudEndureCreationDateTime: ").Append(CloudEndureCreationDateTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PointInTime: ").Append(PointInTime).Append("\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  MachineCloudState: ").Append(MachineCloudState).Append("\n");
            sb.Append("  PublicIps: ").Append(PublicIps).Append("\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MachineCloudId: ").Append(MachineCloudId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Replica);
        }

        /// <summary>
        /// Returns true if Replica instances are equal
        /// </summary>
        /// <param name="input">Instance of Replica to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Replica input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Machine == input.Machine ||
                    (this.Machine != null &&
                    this.Machine.Equals(input.Machine))
                ) && 
                (
                    this.CloudEndureCreationDateTime == input.CloudEndureCreationDateTime ||
                    (this.CloudEndureCreationDateTime != null &&
                    this.CloudEndureCreationDateTime.Equals(input.CloudEndureCreationDateTime))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PointInTime == input.PointInTime ||
                    (this.PointInTime != null &&
                    this.PointInTime.Equals(input.PointInTime))
                ) && 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.MachineCloudState == input.MachineCloudState ||
                    (this.MachineCloudState != null &&
                    this.MachineCloudState.Equals(input.MachineCloudState))
                ) && 
                (
                    this.PublicIps == input.PublicIps ||
                    this.PublicIps != null &&
                    input.PublicIps != null &&
                    this.PublicIps.SequenceEqual(input.PublicIps)
                ) && 
                (
                    this.RegionId == input.RegionId ||
                    (this.RegionId != null &&
                    this.RegionId.Equals(input.RegionId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MachineCloudId == input.MachineCloudId ||
                    (this.MachineCloudId != null &&
                    this.MachineCloudId.Equals(input.MachineCloudId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Machine != null)
                    hashCode = hashCode * 59 + this.Machine.GetHashCode();
                if (this.CloudEndureCreationDateTime != null)
                    hashCode = hashCode * 59 + this.CloudEndureCreationDateTime.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PointInTime != null)
                    hashCode = hashCode * 59 + this.PointInTime.GetHashCode();
                if (this.JobId != null)
                    hashCode = hashCode * 59 + this.JobId.GetHashCode();
                if (this.MachineCloudState != null)
                    hashCode = hashCode * 59 + this.MachineCloudState.GetHashCode();
                if (this.PublicIps != null)
                    hashCode = hashCode * 59 + this.PublicIps.GetHashCode();
                if (this.RegionId != null)
                    hashCode = hashCode * 59 + this.RegionId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MachineCloudId != null)
                    hashCode = hashCode * 59 + this.MachineCloudId.GetHashCode();
                return hashCode;
            }
        }
    }
}
