/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// An asynchoronous job running in the backend. A single job can run at any given time for a specific project.
    /// </summary>
    [DataContract]
        public partial class Job :  IEquatable<Job>
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,
            /// <summary>
            /// Enum STARTED for value: STARTED
            /// </summary>
            [EnumMember(Value = "STARTED")]
            STARTED = 2,
            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 3,
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 4        }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum CLEANUP for value: CLEANUP
            /// </summary>
            [EnumMember(Value = "CLEANUP")]
            CLEANUP = 1,
            /// <summary>
            /// Enum CUTOVERLAUNCH for value: CUTOVER_LAUNCH
            /// </summary>
            [EnumMember(Value = "CUTOVER_LAUNCH")]
            CUTOVERLAUNCH = 2,
            /// <summary>
            /// Enum RECOVERYLAUNCH for value: RECOVERY_LAUNCH
            /// </summary>
            [EnumMember(Value = "RECOVERY_LAUNCH")]
            RECOVERYLAUNCH = 3,
            /// <summary>
            /// Enum RESTORELAUNCH for value: RESTORE_LAUNCH
            /// </summary>
            [EnumMember(Value = "RESTORE_LAUNCH")]
            RESTORELAUNCH = 4,
            /// <summary>
            /// Enum TESTLAUNCH for value: TEST_LAUNCH
            /// </summary>
            [EnumMember(Value = "TEST_LAUNCH")]
            TESTLAUNCH = 5,
            /// <summary>
            /// Enum CONSOLIDATEVMDKS for value: CONSOLIDATE_VMDKS
            /// </summary>
            [EnumMember(Value = "CONSOLIDATE_VMDKS")]
            CONSOLIDATEVMDKS = 6,
            /// <summary>
            /// Enum RECOVERYPLANRECOVERY for value: RECOVERY_PLAN_RECOVERY
            /// </summary>
            [EnumMember(Value = "RECOVERY_PLAN_RECOVERY")]
            RECOVERYPLANRECOVERY = 7,
            /// <summary>
            /// Enum RECOVERYPLANTEST for value: RECOVERY_PLAN_TEST
            /// </summary>
            [EnumMember(Value = "RECOVERY_PLAN_TEST")]
            RECOVERYPLANTEST = 8,
            /// <summary>
            /// Enum RECOVERYPLANCUTOVER for value: RECOVERY_PLAN_CUTOVER
            /// </summary>
            [EnumMember(Value = "RECOVERY_PLAN_CUTOVER")]
            RECOVERYPLANCUTOVER = 9,
            /// <summary>
            /// Enum RECOVERYPLANCLEANUP for value: RECOVERY_PLAN_CLEANUP
            /// </summary>
            [EnumMember(Value = "RECOVERY_PLAN_CLEANUP")]
            RECOVERYPLANCLEANUP = 10        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Job" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="participatingMachines">participatingMachines.</param>
        /// <param name="log">log.</param>
        /// <param name="type">type.</param>
        /// <param name="endDateTime">endDateTime.</param>
        /// <param name="creationDateTime">creationDateTime.</param>
        /// <param name="id">id.</param>
        /// <param name="initiatedBy">username of user who initiated the job.</param>
        public Job(StatusEnum? status = default(StatusEnum?), List<string> participatingMachines = default(List<string>), List<JobLog> log = default(List<JobLog>), TypeEnum? type = default(TypeEnum?), DateTime? endDateTime = default(DateTime?), DateTime? creationDateTime = default(DateTime?), string id = default(string), string initiatedBy = default(string))
        {
            this.Status = status;
            this.ParticipatingMachines = participatingMachines;
            this.Log = log;
            this.Type = type;
            this.EndDateTime = endDateTime;
            this.CreationDateTime = creationDateTime;
            this.Id = id;
            this.InitiatedBy = initiatedBy;
        }
        

        /// <summary>
        /// Gets or Sets ParticipatingMachines
        /// </summary>
        [DataMember(Name="participatingMachines", EmitDefaultValue=false)]
        public List<string> ParticipatingMachines { get; set; }

        /// <summary>
        /// Gets or Sets Log
        /// </summary>
        [DataMember(Name="log", EmitDefaultValue=false)]
        public List<JobLog> Log { get; set; }


        /// <summary>
        /// Gets or Sets EndDateTime
        /// </summary>
        [DataMember(Name="endDateTime", EmitDefaultValue=false)]
        public DateTime? EndDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreationDateTime
        /// </summary>
        [DataMember(Name="creationDateTime", EmitDefaultValue=false)]
        public DateTime? CreationDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// username of user who initiated the job
        /// </summary>
        /// <value>username of user who initiated the job</value>
        [DataMember(Name="initiatedBy", EmitDefaultValue=false)]
        public string InitiatedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Job {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ParticipatingMachines: ").Append(ParticipatingMachines).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  CreationDateTime: ").Append(CreationDateTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InitiatedBy: ").Append(InitiatedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Job);
        }

        /// <summary>
        /// Returns true if Job instances are equal
        /// </summary>
        /// <param name="input">Instance of Job to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Job input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ParticipatingMachines == input.ParticipatingMachines ||
                    this.ParticipatingMachines != null &&
                    input.ParticipatingMachines != null &&
                    this.ParticipatingMachines.SequenceEqual(input.ParticipatingMachines)
                ) && 
                (
                    this.Log == input.Log ||
                    this.Log != null &&
                    input.Log != null &&
                    this.Log.SequenceEqual(input.Log)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.EndDateTime == input.EndDateTime ||
                    (this.EndDateTime != null &&
                    this.EndDateTime.Equals(input.EndDateTime))
                ) && 
                (
                    this.CreationDateTime == input.CreationDateTime ||
                    (this.CreationDateTime != null &&
                    this.CreationDateTime.Equals(input.CreationDateTime))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InitiatedBy == input.InitiatedBy ||
                    (this.InitiatedBy != null &&
                    this.InitiatedBy.Equals(input.InitiatedBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ParticipatingMachines != null)
                    hashCode = hashCode * 59 + this.ParticipatingMachines.GetHashCode();
                if (this.Log != null)
                    hashCode = hashCode * 59 + this.Log.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.EndDateTime != null)
                    hashCode = hashCode * 59 + this.EndDateTime.GetHashCode();
                if (this.CreationDateTime != null)
                    hashCode = hashCode * 59 + this.CreationDateTime.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InitiatedBy != null)
                    hashCode = hashCode * 59 + this.InitiatedBy.GetHashCode();
                return hashCode;
            }
        }
    }
}
