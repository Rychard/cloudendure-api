/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// Configurations name and value
    /// </summary>
    [DataContract]
        public partial class ListUsersResult :  IEquatable<ListUsersResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListUsersResult" /> class.
        /// </summary>
        /// <param name="username">username.</param>
        /// <param name="isAccountOwner">isAccountOwner.</param>
        /// <param name="state">state.</param>
        /// <param name="version">version.</param>
        /// <param name="accountUuid">accountUuid.</param>
        public ListUsersResult(string username = default(string), bool? isAccountOwner = default(bool?), string state = default(string), string version = default(string), string accountUuid = default(string))
        {
            this.Username = username;
            this.IsAccountOwner = isAccountOwner;
            this.State = state;
            this.Version = version;
            this.AccountUuid = accountUuid;
        }
        
        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets IsAccountOwner
        /// </summary>
        [DataMember(Name="is_account_owner", EmitDefaultValue=false)]
        public bool? IsAccountOwner { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets AccountUuid
        /// </summary>
        [DataMember(Name="account_uuid", EmitDefaultValue=false)]
        public string AccountUuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListUsersResult {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  IsAccountOwner: ").Append(IsAccountOwner).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  AccountUuid: ").Append(AccountUuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListUsersResult);
        }

        /// <summary>
        /// Returns true if ListUsersResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ListUsersResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListUsersResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.IsAccountOwner == input.IsAccountOwner ||
                    (this.IsAccountOwner != null &&
                    this.IsAccountOwner.Equals(input.IsAccountOwner))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.AccountUuid == input.AccountUuid ||
                    (this.AccountUuid != null &&
                    this.AccountUuid.Equals(input.AccountUuid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.IsAccountOwner != null)
                    hashCode = hashCode * 59 + this.IsAccountOwner.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.AccountUuid != null)
                    hashCode = hashCode * 59 + this.AccountUuid.GetHashCode();
                return hashCode;
            }
        }
    }
}
