/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// Contains the project characteristics such as the replicationConfiguration in use, source region and project type.
    /// </summary>
    [DataContract]
        public partial class Project :  IEquatable<Project>
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum MIGRATION for value: MIGRATION
            /// </summary>
            [EnumMember(Value = "MIGRATION")]
            MIGRATION = 1,
            /// <summary>
            /// Enum DR for value: DR
            /// </summary>
            [EnumMember(Value = "DR")]
            DR = 2,
            /// <summary>
            /// Enum BACKUP for value: BACKUP
            /// </summary>
            [EnumMember(Value = "BACKUP")]
            BACKUP = 3        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Project" /> class.
        /// </summary>
        /// <param name="replicationConfiguration">The ID of the replication configuration object to use (corresponding to the ones available in /projects/{projectId}/replicationConfigurations)..</param>
        /// <param name="features">features.</param>
        /// <param name="cloudCredentialsIDs">The IDs of the cloud credentials to use (array of one)..</param>
        /// <param name="sourceRegion">The ID of the region to use as source..</param>
        /// <param name="targetCloudId">targetCloudId.</param>
        /// <param name="name">name.</param>
        /// <param name="usersIDs">usersIDs.</param>
        /// <param name="licensesIDs">The IDs of the licenses associated with this project (array of one)..</param>
        /// <param name="ceAdminProperties">ceAdminProperties.</param>
        public Project(string replicationConfiguration = default(string), ProjectFeatures features = default(ProjectFeatures), List<string> cloudCredentialsIDs = default(List<string>), string sourceRegion = default(string), string targetCloudId = default(string), string name = default(string), List<string> usersIDs = default(List<string>), List<string> licensesIDs = default(List<string>), ProjectCeAdminProperties ceAdminProperties = default(ProjectCeAdminProperties))
        {
            this.ReplicationConfiguration = replicationConfiguration;
            this.Features = features;
            this.CloudCredentialsIDs = cloudCredentialsIDs;
            this.SourceRegion = sourceRegion;
            this.TargetCloudId = targetCloudId;
            this.Name = name;
            this.UsersIDs = usersIDs;
            this.LicensesIDs = licensesIDs;
            this.CeAdminProperties = ceAdminProperties;
        }
        
        /// <summary>
        /// The ID of the replication configuration object to use (corresponding to the ones available in /projects/{projectId}/replicationConfigurations).
        /// </summary>
        /// <value>The ID of the replication configuration object to use (corresponding to the ones available in /projects/{projectId}/replicationConfigurations).</value>
        [DataMember(Name="replicationConfiguration", EmitDefaultValue=false)]
        public string ReplicationConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public ProjectFeatures Features { get; set; }

        /// <summary>
        /// Gets or Sets ReplicationReversed
        /// </summary>
        [DataMember(Name="replicationReversed", EmitDefaultValue=false)]
        public bool? ReplicationReversed { get; private set; }

        /// <summary>
        /// The IDs of the cloud credentials to use (array of one).
        /// </summary>
        /// <value>The IDs of the cloud credentials to use (array of one).</value>
        [DataMember(Name="cloudCredentialsIDs", EmitDefaultValue=false)]
        public List<string> CloudCredentialsIDs { get; set; }

        /// <summary>
        /// The ID of the region to use as source.
        /// </summary>
        /// <value>The ID of the region to use as source.</value>
        [DataMember(Name="sourceRegion", EmitDefaultValue=false)]
        public string SourceRegion { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or Sets TargetCloudId
        /// </summary>
        [DataMember(Name="targetCloudId", EmitDefaultValue=false)]
        public string TargetCloudId { get; set; }

        /// <summary>
        /// Gets or Sets AgentInstallationToken
        /// </summary>
        [DataMember(Name="agentInstallationToken", EmitDefaultValue=false)]
        public string AgentInstallationToken { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UsersIDs
        /// </summary>
        [DataMember(Name="usersIDs", EmitDefaultValue=false)]
        public List<string> UsersIDs { get; set; }


        /// <summary>
        /// Gets or Sets SourceCloudCredentialsId
        /// </summary>
        [DataMember(Name="sourceCloudCredentialsId", EmitDefaultValue=false)]
        public string SourceCloudCredentialsId { get; private set; }

        /// <summary>
        /// Gets or Sets TargetCloudCredentialsId
        /// </summary>
        [DataMember(Name="targetCloudCredentialsId", EmitDefaultValue=false)]
        public string TargetCloudCredentialsId { get; private set; }

        /// <summary>
        /// The IDs of the licenses associated with this project (array of one).
        /// </summary>
        /// <value>The IDs of the licenses associated with this project (array of one).</value>
        [DataMember(Name="licensesIDs", EmitDefaultValue=false)]
        public List<string> LicensesIDs { get; set; }

        /// <summary>
        /// Gets or Sets CeAdminProperties
        /// </summary>
        [DataMember(Name="ceAdminProperties", EmitDefaultValue=false)]
        public ProjectCeAdminProperties CeAdminProperties { get; set; }

        /// <summary>
        /// Gets or Sets SourceCloudId
        /// </summary>
        [DataMember(Name="sourceCloudId", EmitDefaultValue=false)]
        public string SourceCloudId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Project {\n");
            sb.Append("  ReplicationConfiguration: ").Append(ReplicationConfiguration).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  ReplicationReversed: ").Append(ReplicationReversed).Append("\n");
            sb.Append("  CloudCredentialsIDs: ").Append(CloudCredentialsIDs).Append("\n");
            sb.Append("  SourceRegion: ").Append(SourceRegion).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TargetCloudId: ").Append(TargetCloudId).Append("\n");
            sb.Append("  AgentInstallationToken: ").Append(AgentInstallationToken).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UsersIDs: ").Append(UsersIDs).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SourceCloudCredentialsId: ").Append(SourceCloudCredentialsId).Append("\n");
            sb.Append("  TargetCloudCredentialsId: ").Append(TargetCloudCredentialsId).Append("\n");
            sb.Append("  LicensesIDs: ").Append(LicensesIDs).Append("\n");
            sb.Append("  CeAdminProperties: ").Append(CeAdminProperties).Append("\n");
            sb.Append("  SourceCloudId: ").Append(SourceCloudId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Project);
        }

        /// <summary>
        /// Returns true if Project instances are equal
        /// </summary>
        /// <param name="input">Instance of Project to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Project input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReplicationConfiguration == input.ReplicationConfiguration ||
                    (this.ReplicationConfiguration != null &&
                    this.ReplicationConfiguration.Equals(input.ReplicationConfiguration))
                ) && 
                (
                    this.Features == input.Features ||
                    (this.Features != null &&
                    this.Features.Equals(input.Features))
                ) && 
                (
                    this.ReplicationReversed == input.ReplicationReversed ||
                    (this.ReplicationReversed != null &&
                    this.ReplicationReversed.Equals(input.ReplicationReversed))
                ) && 
                (
                    this.CloudCredentialsIDs == input.CloudCredentialsIDs ||
                    this.CloudCredentialsIDs != null &&
                    input.CloudCredentialsIDs != null &&
                    this.CloudCredentialsIDs.SequenceEqual(input.CloudCredentialsIDs)
                ) && 
                (
                    this.SourceRegion == input.SourceRegion ||
                    (this.SourceRegion != null &&
                    this.SourceRegion.Equals(input.SourceRegion))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TargetCloudId == input.TargetCloudId ||
                    (this.TargetCloudId != null &&
                    this.TargetCloudId.Equals(input.TargetCloudId))
                ) && 
                (
                    this.AgentInstallationToken == input.AgentInstallationToken ||
                    (this.AgentInstallationToken != null &&
                    this.AgentInstallationToken.Equals(input.AgentInstallationToken))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UsersIDs == input.UsersIDs ||
                    this.UsersIDs != null &&
                    input.UsersIDs != null &&
                    this.UsersIDs.SequenceEqual(input.UsersIDs)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SourceCloudCredentialsId == input.SourceCloudCredentialsId ||
                    (this.SourceCloudCredentialsId != null &&
                    this.SourceCloudCredentialsId.Equals(input.SourceCloudCredentialsId))
                ) && 
                (
                    this.TargetCloudCredentialsId == input.TargetCloudCredentialsId ||
                    (this.TargetCloudCredentialsId != null &&
                    this.TargetCloudCredentialsId.Equals(input.TargetCloudCredentialsId))
                ) && 
                (
                    this.LicensesIDs == input.LicensesIDs ||
                    this.LicensesIDs != null &&
                    input.LicensesIDs != null &&
                    this.LicensesIDs.SequenceEqual(input.LicensesIDs)
                ) && 
                (
                    this.CeAdminProperties == input.CeAdminProperties ||
                    (this.CeAdminProperties != null &&
                    this.CeAdminProperties.Equals(input.CeAdminProperties))
                ) && 
                (
                    this.SourceCloudId == input.SourceCloudId ||
                    (this.SourceCloudId != null &&
                    this.SourceCloudId.Equals(input.SourceCloudId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReplicationConfiguration != null)
                    hashCode = hashCode * 59 + this.ReplicationConfiguration.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.ReplicationReversed != null)
                    hashCode = hashCode * 59 + this.ReplicationReversed.GetHashCode();
                if (this.CloudCredentialsIDs != null)
                    hashCode = hashCode * 59 + this.CloudCredentialsIDs.GetHashCode();
                if (this.SourceRegion != null)
                    hashCode = hashCode * 59 + this.SourceRegion.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TargetCloudId != null)
                    hashCode = hashCode * 59 + this.TargetCloudId.GetHashCode();
                if (this.AgentInstallationToken != null)
                    hashCode = hashCode * 59 + this.AgentInstallationToken.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.UsersIDs != null)
                    hashCode = hashCode * 59 + this.UsersIDs.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SourceCloudCredentialsId != null)
                    hashCode = hashCode * 59 + this.SourceCloudCredentialsId.GetHashCode();
                if (this.TargetCloudCredentialsId != null)
                    hashCode = hashCode * 59 + this.TargetCloudCredentialsId.GetHashCode();
                if (this.LicensesIDs != null)
                    hashCode = hashCode * 59 + this.LicensesIDs.GetHashCode();
                if (this.CeAdminProperties != null)
                    hashCode = hashCode * 59 + this.CeAdminProperties.GetHashCode();
                if (this.SourceCloudId != null)
                    hashCode = hashCode * 59 + this.SourceCloudId.GetHashCode();
                return hashCode;
            }
        }
    }
}
