/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// License
    /// </summary>
    [DataContract]
        public partial class License :  IEquatable<License>
    {
        /// <summary>
        /// License type. DR licenses can be moved from one machine to another. Migration licenses are consumed upon installation.
        /// </summary>
        /// <value>License type. DR licenses can be moved from one machine to another. Migration licenses are consumed upon installation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum MIGRATION for value: MIGRATION
            /// </summary>
            [EnumMember(Value = "MIGRATION")]
            MIGRATION = 1,
            /// <summary>
            /// Enum DR for value: DR
            /// </summary>
            [EnumMember(Value = "DR")]
            DR = 2,
            /// <summary>
            /// Enum BACKUP for value: BACKUP
            /// </summary>
            [EnumMember(Value = "BACKUP")]
            BACKUP = 3,
            /// <summary>
            /// Enum DRTRIAL for value: DR_TRIAL
            /// </summary>
            [EnumMember(Value = "DR_TRIAL")]
            DRTRIAL = 4        }
        /// <summary>
        /// License type. DR licenses can be moved from one machine to another. Migration licenses are consumed upon installation.
        /// </summary>
        /// <value>License type. DR licenses can be moved from one machine to another. Migration licenses are consumed upon installation.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="License" /> class.
        /// </summary>
        /// <param name="count">The total number of licenses..</param>
        /// <param name="durationFromStartOfUse">Validity period for a a single license from the time of agent installation..</param>
        /// <param name="features">features.</param>
        /// <param name="expirationDateTime">expirationDateTime.</param>
        /// <param name="ceAdminProperties">ceAdminProperties.</param>
        /// <param name="type">License type. DR licenses can be moved from one machine to another. Migration licenses are consumed upon installation..</param>
        /// <param name="id">id.</param>
        public License(int? count = default(int?), string durationFromStartOfUse = default(string), LicenseFeatures features = default(LicenseFeatures), DateTime? expirationDateTime = default(DateTime?), LicenseCeAdminProperties ceAdminProperties = default(LicenseCeAdminProperties), TypeEnum? type = default(TypeEnum?), string id = default(string))
        {
            this.Count = count;
            this.DurationFromStartOfUse = durationFromStartOfUse;
            this.Features = features;
            this.ExpirationDateTime = expirationDateTime;
            this.CeAdminProperties = ceAdminProperties;
            this.Type = type;
            this.Id = id;
        }
        
        /// <summary>
        /// The total number of licenses.
        /// </summary>
        /// <value>The total number of licenses.</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }

        /// <summary>
        /// Validity period for a a single license from the time of agent installation.
        /// </summary>
        /// <value>Validity period for a a single license from the time of agent installation.</value>
        [DataMember(Name="durationFromStartOfUse", EmitDefaultValue=false)]
        public string DurationFromStartOfUse { get; set; }

        /// <summary>
        /// How many licenses have already been consumed.
        /// </summary>
        /// <value>How many licenses have already been consumed.</value>
        [DataMember(Name="used", EmitDefaultValue=false)]
        public int? Used { get; private set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public LicenseFeatures Features { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDateTime
        /// </summary>
        [DataMember(Name="expirationDateTime", EmitDefaultValue=false)]
        public DateTime? ExpirationDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CeAdminProperties
        /// </summary>
        [DataMember(Name="ceAdminProperties", EmitDefaultValue=false)]
        public LicenseCeAdminProperties CeAdminProperties { get; set; }


        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class License {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  DurationFromStartOfUse: ").Append(DurationFromStartOfUse).Append("\n");
            sb.Append("  Used: ").Append(Used).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  ExpirationDateTime: ").Append(ExpirationDateTime).Append("\n");
            sb.Append("  CeAdminProperties: ").Append(CeAdminProperties).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as License);
        }

        /// <summary>
        /// Returns true if License instances are equal
        /// </summary>
        /// <param name="input">Instance of License to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(License input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.DurationFromStartOfUse == input.DurationFromStartOfUse ||
                    (this.DurationFromStartOfUse != null &&
                    this.DurationFromStartOfUse.Equals(input.DurationFromStartOfUse))
                ) && 
                (
                    this.Used == input.Used ||
                    (this.Used != null &&
                    this.Used.Equals(input.Used))
                ) && 
                (
                    this.Features == input.Features ||
                    (this.Features != null &&
                    this.Features.Equals(input.Features))
                ) && 
                (
                    this.ExpirationDateTime == input.ExpirationDateTime ||
                    (this.ExpirationDateTime != null &&
                    this.ExpirationDateTime.Equals(input.ExpirationDateTime))
                ) && 
                (
                    this.CeAdminProperties == input.CeAdminProperties ||
                    (this.CeAdminProperties != null &&
                    this.CeAdminProperties.Equals(input.CeAdminProperties))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.DurationFromStartOfUse != null)
                    hashCode = hashCode * 59 + this.DurationFromStartOfUse.GetHashCode();
                if (this.Used != null)
                    hashCode = hashCode * 59 + this.Used.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.ExpirationDateTime != null)
                    hashCode = hashCode * 59 + this.ExpirationDateTime.GetHashCode();
                if (this.CeAdminProperties != null)
                    hashCode = hashCode * 59 + this.CeAdminProperties.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }
    }
}
