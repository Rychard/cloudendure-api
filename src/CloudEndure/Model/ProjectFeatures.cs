/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// ProjectFeatures
    /// </summary>
    [DataContract]
        public partial class ProjectFeatures :  IEquatable<ProjectFeatures>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectFeatures" /> class.
        /// </summary>
        /// <param name="awsExtendedHddTypes">Whether the hard disk ST1 and SC1 types are supported..</param>
        /// <param name="allowRecoveryPlans">Whether the Recovery Plans are enabled..</param>
        /// <param name="forceNoRescanAfterReboot">makes installing the new driver on project machines the default behavior..</param>
        /// <param name="allowNoRescanAfterReboot">allows installing the new driver on project machines..</param>
        /// <param name="allowArchiving">Enables machine archiving for backup.</param>
        /// <param name="isDemo">Enables clicking the target private IP (for demo).</param>
        /// <param name="drTier2">Whether the account is in DR level.</param>
        /// <param name="allowByolOnDedicatedInstance">specifies whether to allow byol windows license in the UI if dedicated instance tenancy is selected..</param>
        /// <param name="pit">Whether the account can use PIT when creating replicas..</param>
        public ProjectFeatures(bool? awsExtendedHddTypes = default(bool?), bool? allowRecoveryPlans = default(bool?), bool? forceNoRescanAfterReboot = default(bool?), bool? allowNoRescanAfterReboot = default(bool?), bool? allowArchiving = default(bool?), bool? isDemo = default(bool?), bool? drTier2 = default(bool?), bool? allowByolOnDedicatedInstance = default(bool?), bool? pit = default(bool?))
        {
            this.AwsExtendedHddTypes = awsExtendedHddTypes;
            this.AllowRecoveryPlans = allowRecoveryPlans;
            this.ForceNoRescanAfterReboot = forceNoRescanAfterReboot;
            this.AllowNoRescanAfterReboot = allowNoRescanAfterReboot;
            this.AllowArchiving = allowArchiving;
            this.IsDemo = isDemo;
            this.DrTier2 = drTier2;
            this.AllowByolOnDedicatedInstance = allowByolOnDedicatedInstance;
            this.Pit = pit;
        }
        
        /// <summary>
        /// Whether the hard disk ST1 and SC1 types are supported.
        /// </summary>
        /// <value>Whether the hard disk ST1 and SC1 types are supported.</value>
        [DataMember(Name="awsExtendedHddTypes", EmitDefaultValue=false)]
        public bool? AwsExtendedHddTypes { get; set; }

        /// <summary>
        /// Whether the Recovery Plans are enabled.
        /// </summary>
        /// <value>Whether the Recovery Plans are enabled.</value>
        [DataMember(Name="allowRecoveryPlans", EmitDefaultValue=false)]
        public bool? AllowRecoveryPlans { get; set; }

        /// <summary>
        /// makes installing the new driver on project machines the default behavior.
        /// </summary>
        /// <value>makes installing the new driver on project machines the default behavior.</value>
        [DataMember(Name="forceNoRescanAfterReboot", EmitDefaultValue=false)]
        public bool? ForceNoRescanAfterReboot { get; set; }

        /// <summary>
        /// allows installing the new driver on project machines.
        /// </summary>
        /// <value>allows installing the new driver on project machines.</value>
        [DataMember(Name="allowNoRescanAfterReboot", EmitDefaultValue=false)]
        public bool? AllowNoRescanAfterReboot { get; set; }

        /// <summary>
        /// Enables machine archiving for backup
        /// </summary>
        /// <value>Enables machine archiving for backup</value>
        [DataMember(Name="allowArchiving", EmitDefaultValue=false)]
        public bool? AllowArchiving { get; set; }

        /// <summary>
        /// Enables clicking the target private IP (for demo)
        /// </summary>
        /// <value>Enables clicking the target private IP (for demo)</value>
        [DataMember(Name="isDemo", EmitDefaultValue=false)]
        public bool? IsDemo { get; set; }

        /// <summary>
        /// Whether the account is in DR level
        /// </summary>
        /// <value>Whether the account is in DR level</value>
        [DataMember(Name="drTier2", EmitDefaultValue=false)]
        public bool? DrTier2 { get; set; }

        /// <summary>
        /// specifies whether to allow byol windows license in the UI if dedicated instance tenancy is selected.
        /// </summary>
        /// <value>specifies whether to allow byol windows license in the UI if dedicated instance tenancy is selected.</value>
        [DataMember(Name="allowByolOnDedicatedInstance", EmitDefaultValue=false)]
        public bool? AllowByolOnDedicatedInstance { get; set; }

        /// <summary>
        /// Whether the account can use PIT when creating replicas.
        /// </summary>
        /// <value>Whether the account can use PIT when creating replicas.</value>
        [DataMember(Name="pit", EmitDefaultValue=false)]
        public bool? Pit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectFeatures {\n");
            sb.Append("  AwsExtendedHddTypes: ").Append(AwsExtendedHddTypes).Append("\n");
            sb.Append("  AllowRecoveryPlans: ").Append(AllowRecoveryPlans).Append("\n");
            sb.Append("  ForceNoRescanAfterReboot: ").Append(ForceNoRescanAfterReboot).Append("\n");
            sb.Append("  AllowNoRescanAfterReboot: ").Append(AllowNoRescanAfterReboot).Append("\n");
            sb.Append("  AllowArchiving: ").Append(AllowArchiving).Append("\n");
            sb.Append("  IsDemo: ").Append(IsDemo).Append("\n");
            sb.Append("  DrTier2: ").Append(DrTier2).Append("\n");
            sb.Append("  AllowByolOnDedicatedInstance: ").Append(AllowByolOnDedicatedInstance).Append("\n");
            sb.Append("  Pit: ").Append(Pit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectFeatures);
        }

        /// <summary>
        /// Returns true if ProjectFeatures instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectFeatures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectFeatures input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AwsExtendedHddTypes == input.AwsExtendedHddTypes ||
                    (this.AwsExtendedHddTypes != null &&
                    this.AwsExtendedHddTypes.Equals(input.AwsExtendedHddTypes))
                ) && 
                (
                    this.AllowRecoveryPlans == input.AllowRecoveryPlans ||
                    (this.AllowRecoveryPlans != null &&
                    this.AllowRecoveryPlans.Equals(input.AllowRecoveryPlans))
                ) && 
                (
                    this.ForceNoRescanAfterReboot == input.ForceNoRescanAfterReboot ||
                    (this.ForceNoRescanAfterReboot != null &&
                    this.ForceNoRescanAfterReboot.Equals(input.ForceNoRescanAfterReboot))
                ) && 
                (
                    this.AllowNoRescanAfterReboot == input.AllowNoRescanAfterReboot ||
                    (this.AllowNoRescanAfterReboot != null &&
                    this.AllowNoRescanAfterReboot.Equals(input.AllowNoRescanAfterReboot))
                ) && 
                (
                    this.AllowArchiving == input.AllowArchiving ||
                    (this.AllowArchiving != null &&
                    this.AllowArchiving.Equals(input.AllowArchiving))
                ) && 
                (
                    this.IsDemo == input.IsDemo ||
                    (this.IsDemo != null &&
                    this.IsDemo.Equals(input.IsDemo))
                ) && 
                (
                    this.DrTier2 == input.DrTier2 ||
                    (this.DrTier2 != null &&
                    this.DrTier2.Equals(input.DrTier2))
                ) && 
                (
                    this.AllowByolOnDedicatedInstance == input.AllowByolOnDedicatedInstance ||
                    (this.AllowByolOnDedicatedInstance != null &&
                    this.AllowByolOnDedicatedInstance.Equals(input.AllowByolOnDedicatedInstance))
                ) && 
                (
                    this.Pit == input.Pit ||
                    (this.Pit != null &&
                    this.Pit.Equals(input.Pit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AwsExtendedHddTypes != null)
                    hashCode = hashCode * 59 + this.AwsExtendedHddTypes.GetHashCode();
                if (this.AllowRecoveryPlans != null)
                    hashCode = hashCode * 59 + this.AllowRecoveryPlans.GetHashCode();
                if (this.ForceNoRescanAfterReboot != null)
                    hashCode = hashCode * 59 + this.ForceNoRescanAfterReboot.GetHashCode();
                if (this.AllowNoRescanAfterReboot != null)
                    hashCode = hashCode * 59 + this.AllowNoRescanAfterReboot.GetHashCode();
                if (this.AllowArchiving != null)
                    hashCode = hashCode * 59 + this.AllowArchiving.GetHashCode();
                if (this.IsDemo != null)
                    hashCode = hashCode * 59 + this.IsDemo.GetHashCode();
                if (this.DrTier2 != null)
                    hashCode = hashCode * 59 + this.DrTier2.GetHashCode();
                if (this.AllowByolOnDedicatedInstance != null)
                    hashCode = hashCode * 59 + this.AllowByolOnDedicatedInstance.GetHashCode();
                if (this.Pit != null)
                    hashCode = hashCode * 59 + this.Pit.GetHashCode();
                return hashCode;
            }
        }
    }
}
