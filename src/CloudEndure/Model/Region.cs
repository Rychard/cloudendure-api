/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// A representation of a cloud region within a specific account.
    /// </summary>
    [DataContract]
        public partial class Region :  IEquatable<Region>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Region" /> class.
        /// </summary>
        /// <param name="subnets">subnets.</param>
        /// <param name="placementGroups">placementGroups.</param>
        /// <param name="scsiAdapterTypes">scsiAdapterTypes.</param>
        /// <param name="instanceTypes">instanceTypes.</param>
        /// <param name="zones">zones.</param>
        /// <param name="volumeEncryptionKeys">volumeEncryptionKeys.</param>
        /// <param name="cloud">cloud.</param>
        /// <param name="securityGroups">securityGroups.</param>
        /// <param name="logicalLocations">logicalLocations.</param>
        /// <param name="staticIps">staticIps.</param>
        /// <param name="maxCpusPerMachine">Maximum CPUs per per Target machine (currently relevant for vCenter cloud only).</param>
        /// <param name="networkInterfaces">networkInterfaces.</param>
        /// <param name="computeLocations">Compute location (e.g. vCenter Host).</param>
        /// <param name="name">name.</param>
        /// <param name="storageLocations">Storage location (e.g. Azure Storage Account, vCenter Data Store).</param>
        /// <param name="iamRoles">iamRoles.</param>
        /// <param name="id">id.</param>
        /// <param name="maxCoresPerMachineCpu">Maximum CPU cores per CPU in Target machines (currently relevant for vCenter cloud only).</param>
        /// <param name="dedicatedHosts">dedicatedHosts.</param>
        /// <param name="networkAdapterTypes">networkAdapterTypes.</param>
        /// <param name="maxMbRamPerMachine">Maximum MB RAM per Target machine (currently relevant for vCenter cloud only).</param>
        public Region(List<Subnet> subnets = default(List<Subnet>), List<string> placementGroups = default(List<string>), List<string> scsiAdapterTypes = default(List<string>), List<string> instanceTypes = default(List<string>), List<string> zones = default(List<string>), List<string> volumeEncryptionKeys = default(List<string>), string cloud = default(string), List<SecurityGroup> securityGroups = default(List<SecurityGroup>), List<LogicalLocation> logicalLocations = default(List<LogicalLocation>), List<string> staticIps = default(List<string>), int? maxCpusPerMachine = default(int?), List<NetworkInterface> networkInterfaces = default(List<NetworkInterface>), List<ComputeLocation> computeLocations = default(List<ComputeLocation>), string name = default(string), List<StorageLocation> storageLocations = default(List<StorageLocation>), List<string> iamRoles = default(List<string>), string id = default(string), int? maxCoresPerMachineCpu = default(int?), List<string> dedicatedHosts = default(List<string>), List<string> networkAdapterTypes = default(List<string>), int? maxMbRamPerMachine = default(int?))
        {
            this.Subnets = subnets;
            this.PlacementGroups = placementGroups;
            this.ScsiAdapterTypes = scsiAdapterTypes;
            this.InstanceTypes = instanceTypes;
            this.Zones = zones;
            this.VolumeEncryptionKeys = volumeEncryptionKeys;
            this.Cloud = cloud;
            this.SecurityGroups = securityGroups;
            this.LogicalLocations = logicalLocations;
            this.StaticIps = staticIps;
            this.MaxCpusPerMachine = maxCpusPerMachine;
            this.NetworkInterfaces = networkInterfaces;
            this.ComputeLocations = computeLocations;
            this.Name = name;
            this.StorageLocations = storageLocations;
            this.IamRoles = iamRoles;
            this.Id = id;
            this.MaxCoresPerMachineCpu = maxCoresPerMachineCpu;
            this.DedicatedHosts = dedicatedHosts;
            this.NetworkAdapterTypes = networkAdapterTypes;
            this.MaxMbRamPerMachine = maxMbRamPerMachine;
        }
        
        /// <summary>
        /// Gets or Sets Subnets
        /// </summary>
        [DataMember(Name="subnets", EmitDefaultValue=false)]
        public List<Subnet> Subnets { get; set; }

        /// <summary>
        /// Gets or Sets PlacementGroups
        /// </summary>
        [DataMember(Name="placementGroups", EmitDefaultValue=false)]
        public List<string> PlacementGroups { get; set; }

        /// <summary>
        /// Gets or Sets ScsiAdapterTypes
        /// </summary>
        [DataMember(Name="scsiAdapterTypes", EmitDefaultValue=false)]
        public List<string> ScsiAdapterTypes { get; set; }

        /// <summary>
        /// Gets or Sets InstanceTypes
        /// </summary>
        [DataMember(Name="instanceTypes", EmitDefaultValue=false)]
        public List<string> InstanceTypes { get; set; }

        /// <summary>
        /// Gets or Sets Zones
        /// </summary>
        [DataMember(Name="zones", EmitDefaultValue=false)]
        public List<string> Zones { get; set; }

        /// <summary>
        /// Gets or Sets VolumeEncryptionKeys
        /// </summary>
        [DataMember(Name="volumeEncryptionKeys", EmitDefaultValue=false)]
        public List<string> VolumeEncryptionKeys { get; set; }

        /// <summary>
        /// Gets or Sets Cloud
        /// </summary>
        [DataMember(Name="cloud", EmitDefaultValue=false)]
        public string Cloud { get; set; }

        /// <summary>
        /// Gets or Sets SecurityGroups
        /// </summary>
        [DataMember(Name="securityGroups", EmitDefaultValue=false)]
        public List<SecurityGroup> SecurityGroups { get; set; }

        /// <summary>
        /// Gets or Sets LogicalLocations
        /// </summary>
        [DataMember(Name="logicalLocations", EmitDefaultValue=false)]
        public List<LogicalLocation> LogicalLocations { get; set; }

        /// <summary>
        /// Gets or Sets StaticIps
        /// </summary>
        [DataMember(Name="staticIps", EmitDefaultValue=false)]
        public List<string> StaticIps { get; set; }

        /// <summary>
        /// Maximum CPUs per per Target machine (currently relevant for vCenter cloud only)
        /// </summary>
        /// <value>Maximum CPUs per per Target machine (currently relevant for vCenter cloud only)</value>
        [DataMember(Name="maxCpusPerMachine", EmitDefaultValue=false)]
        public int? MaxCpusPerMachine { get; set; }

        /// <summary>
        /// Gets or Sets NetworkInterfaces
        /// </summary>
        [DataMember(Name="networkInterfaces", EmitDefaultValue=false)]
        public List<NetworkInterface> NetworkInterfaces { get; set; }

        /// <summary>
        /// Compute location (e.g. vCenter Host)
        /// </summary>
        /// <value>Compute location (e.g. vCenter Host)</value>
        [DataMember(Name="computeLocations", EmitDefaultValue=false)]
        public List<ComputeLocation> ComputeLocations { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Storage location (e.g. Azure Storage Account, vCenter Data Store)
        /// </summary>
        /// <value>Storage location (e.g. Azure Storage Account, vCenter Data Store)</value>
        [DataMember(Name="storageLocations", EmitDefaultValue=false)]
        public List<StorageLocation> StorageLocations { get; set; }

        /// <summary>
        /// Gets or Sets IamRoles
        /// </summary>
        [DataMember(Name="iamRoles", EmitDefaultValue=false)]
        public List<string> IamRoles { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Maximum CPU cores per CPU in Target machines (currently relevant for vCenter cloud only)
        /// </summary>
        /// <value>Maximum CPU cores per CPU in Target machines (currently relevant for vCenter cloud only)</value>
        [DataMember(Name="maxCoresPerMachineCpu", EmitDefaultValue=false)]
        public int? MaxCoresPerMachineCpu { get; set; }

        /// <summary>
        /// Gets or Sets DedicatedHosts
        /// </summary>
        [DataMember(Name="dedicatedHosts", EmitDefaultValue=false)]
        public List<string> DedicatedHosts { get; set; }

        /// <summary>
        /// Gets or Sets NetworkAdapterTypes
        /// </summary>
        [DataMember(Name="networkAdapterTypes", EmitDefaultValue=false)]
        public List<string> NetworkAdapterTypes { get; set; }

        /// <summary>
        /// Maximum MB RAM per Target machine (currently relevant for vCenter cloud only)
        /// </summary>
        /// <value>Maximum MB RAM per Target machine (currently relevant for vCenter cloud only)</value>
        [DataMember(Name="maxMbRamPerMachine", EmitDefaultValue=false)]
        public int? MaxMbRamPerMachine { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Region {\n");
            sb.Append("  Subnets: ").Append(Subnets).Append("\n");
            sb.Append("  PlacementGroups: ").Append(PlacementGroups).Append("\n");
            sb.Append("  ScsiAdapterTypes: ").Append(ScsiAdapterTypes).Append("\n");
            sb.Append("  InstanceTypes: ").Append(InstanceTypes).Append("\n");
            sb.Append("  Zones: ").Append(Zones).Append("\n");
            sb.Append("  VolumeEncryptionKeys: ").Append(VolumeEncryptionKeys).Append("\n");
            sb.Append("  Cloud: ").Append(Cloud).Append("\n");
            sb.Append("  SecurityGroups: ").Append(SecurityGroups).Append("\n");
            sb.Append("  LogicalLocations: ").Append(LogicalLocations).Append("\n");
            sb.Append("  StaticIps: ").Append(StaticIps).Append("\n");
            sb.Append("  MaxCpusPerMachine: ").Append(MaxCpusPerMachine).Append("\n");
            sb.Append("  NetworkInterfaces: ").Append(NetworkInterfaces).Append("\n");
            sb.Append("  ComputeLocations: ").Append(ComputeLocations).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StorageLocations: ").Append(StorageLocations).Append("\n");
            sb.Append("  IamRoles: ").Append(IamRoles).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MaxCoresPerMachineCpu: ").Append(MaxCoresPerMachineCpu).Append("\n");
            sb.Append("  DedicatedHosts: ").Append(DedicatedHosts).Append("\n");
            sb.Append("  NetworkAdapterTypes: ").Append(NetworkAdapterTypes).Append("\n");
            sb.Append("  MaxMbRamPerMachine: ").Append(MaxMbRamPerMachine).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Region);
        }

        /// <summary>
        /// Returns true if Region instances are equal
        /// </summary>
        /// <param name="input">Instance of Region to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Region input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Subnets == input.Subnets ||
                    this.Subnets != null &&
                    input.Subnets != null &&
                    this.Subnets.SequenceEqual(input.Subnets)
                ) && 
                (
                    this.PlacementGroups == input.PlacementGroups ||
                    this.PlacementGroups != null &&
                    input.PlacementGroups != null &&
                    this.PlacementGroups.SequenceEqual(input.PlacementGroups)
                ) && 
                (
                    this.ScsiAdapterTypes == input.ScsiAdapterTypes ||
                    this.ScsiAdapterTypes != null &&
                    input.ScsiAdapterTypes != null &&
                    this.ScsiAdapterTypes.SequenceEqual(input.ScsiAdapterTypes)
                ) && 
                (
                    this.InstanceTypes == input.InstanceTypes ||
                    this.InstanceTypes != null &&
                    input.InstanceTypes != null &&
                    this.InstanceTypes.SequenceEqual(input.InstanceTypes)
                ) && 
                (
                    this.Zones == input.Zones ||
                    this.Zones != null &&
                    input.Zones != null &&
                    this.Zones.SequenceEqual(input.Zones)
                ) && 
                (
                    this.VolumeEncryptionKeys == input.VolumeEncryptionKeys ||
                    this.VolumeEncryptionKeys != null &&
                    input.VolumeEncryptionKeys != null &&
                    this.VolumeEncryptionKeys.SequenceEqual(input.VolumeEncryptionKeys)
                ) && 
                (
                    this.Cloud == input.Cloud ||
                    (this.Cloud != null &&
                    this.Cloud.Equals(input.Cloud))
                ) && 
                (
                    this.SecurityGroups == input.SecurityGroups ||
                    this.SecurityGroups != null &&
                    input.SecurityGroups != null &&
                    this.SecurityGroups.SequenceEqual(input.SecurityGroups)
                ) && 
                (
                    this.LogicalLocations == input.LogicalLocations ||
                    this.LogicalLocations != null &&
                    input.LogicalLocations != null &&
                    this.LogicalLocations.SequenceEqual(input.LogicalLocations)
                ) && 
                (
                    this.StaticIps == input.StaticIps ||
                    this.StaticIps != null &&
                    input.StaticIps != null &&
                    this.StaticIps.SequenceEqual(input.StaticIps)
                ) && 
                (
                    this.MaxCpusPerMachine == input.MaxCpusPerMachine ||
                    (this.MaxCpusPerMachine != null &&
                    this.MaxCpusPerMachine.Equals(input.MaxCpusPerMachine))
                ) && 
                (
                    this.NetworkInterfaces == input.NetworkInterfaces ||
                    this.NetworkInterfaces != null &&
                    input.NetworkInterfaces != null &&
                    this.NetworkInterfaces.SequenceEqual(input.NetworkInterfaces)
                ) && 
                (
                    this.ComputeLocations == input.ComputeLocations ||
                    this.ComputeLocations != null &&
                    input.ComputeLocations != null &&
                    this.ComputeLocations.SequenceEqual(input.ComputeLocations)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StorageLocations == input.StorageLocations ||
                    this.StorageLocations != null &&
                    input.StorageLocations != null &&
                    this.StorageLocations.SequenceEqual(input.StorageLocations)
                ) && 
                (
                    this.IamRoles == input.IamRoles ||
                    this.IamRoles != null &&
                    input.IamRoles != null &&
                    this.IamRoles.SequenceEqual(input.IamRoles)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MaxCoresPerMachineCpu == input.MaxCoresPerMachineCpu ||
                    (this.MaxCoresPerMachineCpu != null &&
                    this.MaxCoresPerMachineCpu.Equals(input.MaxCoresPerMachineCpu))
                ) && 
                (
                    this.DedicatedHosts == input.DedicatedHosts ||
                    this.DedicatedHosts != null &&
                    input.DedicatedHosts != null &&
                    this.DedicatedHosts.SequenceEqual(input.DedicatedHosts)
                ) && 
                (
                    this.NetworkAdapterTypes == input.NetworkAdapterTypes ||
                    this.NetworkAdapterTypes != null &&
                    input.NetworkAdapterTypes != null &&
                    this.NetworkAdapterTypes.SequenceEqual(input.NetworkAdapterTypes)
                ) && 
                (
                    this.MaxMbRamPerMachine == input.MaxMbRamPerMachine ||
                    (this.MaxMbRamPerMachine != null &&
                    this.MaxMbRamPerMachine.Equals(input.MaxMbRamPerMachine))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Subnets != null)
                    hashCode = hashCode * 59 + this.Subnets.GetHashCode();
                if (this.PlacementGroups != null)
                    hashCode = hashCode * 59 + this.PlacementGroups.GetHashCode();
                if (this.ScsiAdapterTypes != null)
                    hashCode = hashCode * 59 + this.ScsiAdapterTypes.GetHashCode();
                if (this.InstanceTypes != null)
                    hashCode = hashCode * 59 + this.InstanceTypes.GetHashCode();
                if (this.Zones != null)
                    hashCode = hashCode * 59 + this.Zones.GetHashCode();
                if (this.VolumeEncryptionKeys != null)
                    hashCode = hashCode * 59 + this.VolumeEncryptionKeys.GetHashCode();
                if (this.Cloud != null)
                    hashCode = hashCode * 59 + this.Cloud.GetHashCode();
                if (this.SecurityGroups != null)
                    hashCode = hashCode * 59 + this.SecurityGroups.GetHashCode();
                if (this.LogicalLocations != null)
                    hashCode = hashCode * 59 + this.LogicalLocations.GetHashCode();
                if (this.StaticIps != null)
                    hashCode = hashCode * 59 + this.StaticIps.GetHashCode();
                if (this.MaxCpusPerMachine != null)
                    hashCode = hashCode * 59 + this.MaxCpusPerMachine.GetHashCode();
                if (this.NetworkInterfaces != null)
                    hashCode = hashCode * 59 + this.NetworkInterfaces.GetHashCode();
                if (this.ComputeLocations != null)
                    hashCode = hashCode * 59 + this.ComputeLocations.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StorageLocations != null)
                    hashCode = hashCode * 59 + this.StorageLocations.GetHashCode();
                if (this.IamRoles != null)
                    hashCode = hashCode * 59 + this.IamRoles.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MaxCoresPerMachineCpu != null)
                    hashCode = hashCode * 59 + this.MaxCoresPerMachineCpu.GetHashCode();
                if (this.DedicatedHosts != null)
                    hashCode = hashCode * 59 + this.DedicatedHosts.GetHashCode();
                if (this.NetworkAdapterTypes != null)
                    hashCode = hashCode * 59 + this.NetworkAdapterTypes.GetHashCode();
                if (this.MaxMbRamPerMachine != null)
                    hashCode = hashCode * 59 + this.MaxMbRamPerMachine.GetHashCode();
                return hashCode;
            }
        }
    }
}
