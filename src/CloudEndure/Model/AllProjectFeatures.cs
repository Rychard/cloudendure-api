/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// AllProjectFeatures
    /// </summary>
    [DataContract]
        public partial class AllProjectFeatures :  IEquatable<AllProjectFeatures>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllProjectFeatures" /> class.
        /// </summary>
        /// <param name="google">google.</param>
        /// <param name="noPublicIps">noPublicIps.</param>
        /// <param name="windowsConverters">windowsConverters.</param>
        /// <param name="forceReversedHandshakeDirection">forceReversedHandshakeDirection.</param>
        /// <param name="noConverters">noConverters.</param>
        /// <param name="vio">vio.</param>
        /// <param name="awsPendingSnapshotsForConsistentSnapshot">awsPendingSnapshotsForConsistentSnapshot.</param>
        /// <param name="noCloud">noCloud.</param>
        /// <param name="consistentSnapshotCreationIntervalMin">consistentSnapshotCreationIntervalMin.</param>
        /// <param name="isDemo">isDemo.</param>
        /// <param name="dailyPitNumber">dailyPitNumber.</param>
        /// <param name="mtuSize">mtuSize.</param>
        /// <param name="allowByolOnDedicatedInstance">allowByolOnDedicatedInstance.</param>
        /// <param name="forceNoRescanAfterReboot">forceNoRescanAfterReboot.</param>
        /// <param name="maxConverterVolumes">maxConverterVolumes.</param>
        /// <param name="azurearm">azurearm.</param>
        /// <param name="vcenter">vcenter.</param>
        /// <param name="allowedAzIds">allowedAzIds.</param>
        /// <param name="subnetFilter">subnetFilter.</param>
        /// <param name="noSnapshotConsideredLagMilliseconds">noSnapshotConsideredLagMilliseconds.</param>
        /// <param name="awsPendingSnapshotsForDisconnection">awsPendingSnapshotsForDisconnection.</param>
        /// <param name="noConvertersWindows">noConvertersWindows.</param>
        /// <param name="disableReplicaCreation">disableReplicaCreation.</param>
        /// <param name="awsPendingSnapshotsForConsistencyLost">awsPendingSnapshotsForConsistencyLost.</param>
        /// <param name="aws">aws.</param>
        /// <param name="awsPendingSnapshotsForInconsistentSnapshot">awsPendingSnapshotsForInconsistentSnapshot.</param>
        /// <param name="maxReplicatorVolumes">maxReplicatorVolumes.</param>
        /// <param name="allowRecoveryPlans">allowRecoveryPlans.</param>
        /// <param name="snapshotCreationIntervalMin">snapshotCreationIntervalMin.</param>
        /// <param name="snapshotOnDemandTimeout">snapshotOnDemandTimeout.</param>
        /// <param name="allowArchiving">allowArchiving.</param>
        /// <param name="allowNoRescanAfterReboot">allowNoRescanAfterReboot.</param>
        /// <param name="customReplicatorInstanceType">customReplicatorInstanceType.</param>
        /// <param name="disableSnapshotOnDemand">disableSnapshotOnDemand.</param>
        /// <param name="disableInstall">disableInstall.</param>
        /// <param name="hdd">hdd.</param>
        /// <param name="snapshotCreationIntervalMax">snapshotCreationIntervalMax.</param>
        /// <param name="ceAdminProperties">ceAdminProperties.</param>
        /// <param name="azure">azure.</param>
        /// <param name="awsPendingSnapshotsForUserInitiated">awsPendingSnapshotsForUserInitiated.</param>
        public AllProjectFeatures(bool? google = default(bool?), bool? noPublicIps = default(bool?), bool? windowsConverters = default(bool?), bool? forceReversedHandshakeDirection = default(bool?), bool? noConverters = default(bool?), bool? vio = default(bool?), int? awsPendingSnapshotsForConsistentSnapshot = default(int?), bool? noCloud = default(bool?), int? consistentSnapshotCreationIntervalMin = default(int?), bool? isDemo = default(bool?), int? dailyPitNumber = default(int?), int? mtuSize = default(int?), bool? allowByolOnDedicatedInstance = default(bool?), bool? forceNoRescanAfterReboot = default(bool?), int? maxConverterVolumes = default(int?), bool? azurearm = default(bool?), bool? vcenter = default(bool?), string allowedAzIds = default(string), string subnetFilter = default(string), int? noSnapshotConsideredLagMilliseconds = default(int?), int? awsPendingSnapshotsForDisconnection = default(int?), bool? noConvertersWindows = default(bool?), bool? disableReplicaCreation = default(bool?), int? awsPendingSnapshotsForConsistencyLost = default(int?), bool? aws = default(bool?), int? awsPendingSnapshotsForInconsistentSnapshot = default(int?), int? maxReplicatorVolumes = default(int?), bool? allowRecoveryPlans = default(bool?), int? snapshotCreationIntervalMin = default(int?), int? snapshotOnDemandTimeout = default(int?), bool? allowArchiving = default(bool?), bool? allowNoRescanAfterReboot = default(bool?), string customReplicatorInstanceType = default(string), bool? disableSnapshotOnDemand = default(bool?), bool? disableInstall = default(bool?), bool? hdd = default(bool?), int? snapshotCreationIntervalMax = default(int?), ProjectCeAdminProperties ceAdminProperties = default(ProjectCeAdminProperties), bool? azure = default(bool?), int? awsPendingSnapshotsForUserInitiated = default(int?))
        {
            this.Google = google;
            this.NoPublicIps = noPublicIps;
            this.WindowsConverters = windowsConverters;
            this.ForceReversedHandshakeDirection = forceReversedHandshakeDirection;
            this.NoConverters = noConverters;
            this.Vio = vio;
            this.AwsPendingSnapshotsForConsistentSnapshot = awsPendingSnapshotsForConsistentSnapshot;
            this.NoCloud = noCloud;
            this.ConsistentSnapshotCreationIntervalMin = consistentSnapshotCreationIntervalMin;
            this.IsDemo = isDemo;
            this.DailyPitNumber = dailyPitNumber;
            this.MtuSize = mtuSize;
            this.AllowByolOnDedicatedInstance = allowByolOnDedicatedInstance;
            this.ForceNoRescanAfterReboot = forceNoRescanAfterReboot;
            this.MaxConverterVolumes = maxConverterVolumes;
            this.Azurearm = azurearm;
            this.Vcenter = vcenter;
            this.AllowedAzIds = allowedAzIds;
            this.SubnetFilter = subnetFilter;
            this.NoSnapshotConsideredLagMilliseconds = noSnapshotConsideredLagMilliseconds;
            this.AwsPendingSnapshotsForDisconnection = awsPendingSnapshotsForDisconnection;
            this.NoConvertersWindows = noConvertersWindows;
            this.DisableReplicaCreation = disableReplicaCreation;
            this.AwsPendingSnapshotsForConsistencyLost = awsPendingSnapshotsForConsistencyLost;
            this.Aws = aws;
            this.AwsPendingSnapshotsForInconsistentSnapshot = awsPendingSnapshotsForInconsistentSnapshot;
            this.MaxReplicatorVolumes = maxReplicatorVolumes;
            this.AllowRecoveryPlans = allowRecoveryPlans;
            this.SnapshotCreationIntervalMin = snapshotCreationIntervalMin;
            this.SnapshotOnDemandTimeout = snapshotOnDemandTimeout;
            this.AllowArchiving = allowArchiving;
            this.AllowNoRescanAfterReboot = allowNoRescanAfterReboot;
            this.CustomReplicatorInstanceType = customReplicatorInstanceType;
            this.DisableSnapshotOnDemand = disableSnapshotOnDemand;
            this.DisableInstall = disableInstall;
            this.Hdd = hdd;
            this.SnapshotCreationIntervalMax = snapshotCreationIntervalMax;
            this.CeAdminProperties = ceAdminProperties;
            this.Azure = azure;
            this.AwsPendingSnapshotsForUserInitiated = awsPendingSnapshotsForUserInitiated;
        }
        
        /// <summary>
        /// Gets or Sets Google
        /// </summary>
        [DataMember(Name="google", EmitDefaultValue=false)]
        public bool? Google { get; set; }

        /// <summary>
        /// Gets or Sets NoPublicIps
        /// </summary>
        [DataMember(Name="no_public_ips", EmitDefaultValue=false)]
        public bool? NoPublicIps { get; set; }

        /// <summary>
        /// Gets or Sets WindowsConverters
        /// </summary>
        [DataMember(Name="windows_converters", EmitDefaultValue=false)]
        public bool? WindowsConverters { get; set; }

        /// <summary>
        /// Gets or Sets ForceReversedHandshakeDirection
        /// </summary>
        [DataMember(Name="force_reversed_handshake_direction", EmitDefaultValue=false)]
        public bool? ForceReversedHandshakeDirection { get; set; }

        /// <summary>
        /// Gets or Sets NoConverters
        /// </summary>
        [DataMember(Name="no_converters", EmitDefaultValue=false)]
        public bool? NoConverters { get; set; }

        /// <summary>
        /// Gets or Sets Vio
        /// </summary>
        [DataMember(Name="vio", EmitDefaultValue=false)]
        public bool? Vio { get; set; }

        /// <summary>
        /// Gets or Sets AwsPendingSnapshotsForConsistentSnapshot
        /// </summary>
        [DataMember(Name="aws_pending_snapshots_for_consistent_snapshot", EmitDefaultValue=false)]
        public int? AwsPendingSnapshotsForConsistentSnapshot { get; set; }

        /// <summary>
        /// Gets or Sets NoCloud
        /// </summary>
        [DataMember(Name="no_cloud", EmitDefaultValue=false)]
        public bool? NoCloud { get; set; }

        /// <summary>
        /// Gets or Sets ConsistentSnapshotCreationIntervalMin
        /// </summary>
        [DataMember(Name="consistent_snapshot_creation_interval_min", EmitDefaultValue=false)]
        public int? ConsistentSnapshotCreationIntervalMin { get; set; }

        /// <summary>
        /// Gets or Sets IsDemo
        /// </summary>
        [DataMember(Name="is_demo", EmitDefaultValue=false)]
        public bool? IsDemo { get; set; }

        /// <summary>
        /// Gets or Sets DailyPitNumber
        /// </summary>
        [DataMember(Name="daily_pit_number", EmitDefaultValue=false)]
        public int? DailyPitNumber { get; set; }

        /// <summary>
        /// Gets or Sets MtuSize
        /// </summary>
        [DataMember(Name="mtu_size", EmitDefaultValue=false)]
        public int? MtuSize { get; set; }

        /// <summary>
        /// Gets or Sets AllowByolOnDedicatedInstance
        /// </summary>
        [DataMember(Name="allow_byol_on_dedicated_instance", EmitDefaultValue=false)]
        public bool? AllowByolOnDedicatedInstance { get; set; }

        /// <summary>
        /// Gets or Sets ForceNoRescanAfterReboot
        /// </summary>
        [DataMember(Name="force_no_rescan_after_reboot", EmitDefaultValue=false)]
        public bool? ForceNoRescanAfterReboot { get; set; }

        /// <summary>
        /// Gets or Sets MaxConverterVolumes
        /// </summary>
        [DataMember(Name="max_converter_volumes", EmitDefaultValue=false)]
        public int? MaxConverterVolumes { get; set; }

        /// <summary>
        /// Gets or Sets Azurearm
        /// </summary>
        [DataMember(Name="azurearm", EmitDefaultValue=false)]
        public bool? Azurearm { get; set; }

        /// <summary>
        /// Gets or Sets Vcenter
        /// </summary>
        [DataMember(Name="vcenter", EmitDefaultValue=false)]
        public bool? Vcenter { get; set; }

        /// <summary>
        /// Gets or Sets AllowedAzIds
        /// </summary>
        [DataMember(Name="allowed_az_ids", EmitDefaultValue=false)]
        public string AllowedAzIds { get; set; }

        /// <summary>
        /// Gets or Sets SubnetFilter
        /// </summary>
        [DataMember(Name="subnet_filter", EmitDefaultValue=false)]
        public string SubnetFilter { get; set; }

        /// <summary>
        /// Gets or Sets NoSnapshotConsideredLagMilliseconds
        /// </summary>
        [DataMember(Name="no_snapshot_considered_lag_milliseconds", EmitDefaultValue=false)]
        public int? NoSnapshotConsideredLagMilliseconds { get; set; }

        /// <summary>
        /// Gets or Sets AwsPendingSnapshotsForDisconnection
        /// </summary>
        [DataMember(Name="aws_pending_snapshots_for_disconnection", EmitDefaultValue=false)]
        public int? AwsPendingSnapshotsForDisconnection { get; set; }

        /// <summary>
        /// Gets or Sets NoConvertersWindows
        /// </summary>
        [DataMember(Name="no_converters_windows", EmitDefaultValue=false)]
        public bool? NoConvertersWindows { get; set; }

        /// <summary>
        /// Gets or Sets DisableReplicaCreation
        /// </summary>
        [DataMember(Name="disable_replica_creation", EmitDefaultValue=false)]
        public bool? DisableReplicaCreation { get; set; }

        /// <summary>
        /// Gets or Sets AwsPendingSnapshotsForConsistencyLost
        /// </summary>
        [DataMember(Name="aws_pending_snapshots_for_consistency_lost", EmitDefaultValue=false)]
        public int? AwsPendingSnapshotsForConsistencyLost { get; set; }

        /// <summary>
        /// Gets or Sets Aws
        /// </summary>
        [DataMember(Name="aws", EmitDefaultValue=false)]
        public bool? Aws { get; set; }

        /// <summary>
        /// Gets or Sets AwsPendingSnapshotsForInconsistentSnapshot
        /// </summary>
        [DataMember(Name="aws_pending_snapshots_for_inconsistent_snapshot", EmitDefaultValue=false)]
        public int? AwsPendingSnapshotsForInconsistentSnapshot { get; set; }

        /// <summary>
        /// Gets or Sets MaxReplicatorVolumes
        /// </summary>
        [DataMember(Name="max_replicator_volumes", EmitDefaultValue=false)]
        public int? MaxReplicatorVolumes { get; set; }

        /// <summary>
        /// Gets or Sets AllowRecoveryPlans
        /// </summary>
        [DataMember(Name="allow_recovery_plans", EmitDefaultValue=false)]
        public bool? AllowRecoveryPlans { get; set; }

        /// <summary>
        /// Gets or Sets SnapshotCreationIntervalMin
        /// </summary>
        [DataMember(Name="snapshot_creation_interval_min", EmitDefaultValue=false)]
        public int? SnapshotCreationIntervalMin { get; set; }

        /// <summary>
        /// Gets or Sets SnapshotOnDemandTimeout
        /// </summary>
        [DataMember(Name="snapshot_on_demand_timeout", EmitDefaultValue=false)]
        public int? SnapshotOnDemandTimeout { get; set; }

        /// <summary>
        /// Gets or Sets AllowArchiving
        /// </summary>
        [DataMember(Name="allow_archiving", EmitDefaultValue=false)]
        public bool? AllowArchiving { get; set; }

        /// <summary>
        /// Gets or Sets AllowNoRescanAfterReboot
        /// </summary>
        [DataMember(Name="allow_no_rescan_after_reboot", EmitDefaultValue=false)]
        public bool? AllowNoRescanAfterReboot { get; set; }

        /// <summary>
        /// Gets or Sets CustomReplicatorInstanceType
        /// </summary>
        [DataMember(Name="custom_replicator_instance_type", EmitDefaultValue=false)]
        public string CustomReplicatorInstanceType { get; set; }

        /// <summary>
        /// Gets or Sets DisableSnapshotOnDemand
        /// </summary>
        [DataMember(Name="disable_snapshot_on_demand", EmitDefaultValue=false)]
        public bool? DisableSnapshotOnDemand { get; set; }

        /// <summary>
        /// Gets or Sets DisableInstall
        /// </summary>
        [DataMember(Name="disable_install", EmitDefaultValue=false)]
        public bool? DisableInstall { get; set; }

        /// <summary>
        /// Gets or Sets Hdd
        /// </summary>
        [DataMember(Name="hdd", EmitDefaultValue=false)]
        public bool? Hdd { get; set; }

        /// <summary>
        /// Gets or Sets SnapshotCreationIntervalMax
        /// </summary>
        [DataMember(Name="snapshot_creation_interval_max", EmitDefaultValue=false)]
        public int? SnapshotCreationIntervalMax { get; set; }

        /// <summary>
        /// Gets or Sets CeAdminProperties
        /// </summary>
        [DataMember(Name="ceAdminProperties", EmitDefaultValue=false)]
        public ProjectCeAdminProperties CeAdminProperties { get; set; }

        /// <summary>
        /// Gets or Sets Azure
        /// </summary>
        [DataMember(Name="azure", EmitDefaultValue=false)]
        public bool? Azure { get; set; }

        /// <summary>
        /// Gets or Sets AwsPendingSnapshotsForUserInitiated
        /// </summary>
        [DataMember(Name="aws_pending_snapshots_for_user_initiated", EmitDefaultValue=false)]
        public int? AwsPendingSnapshotsForUserInitiated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AllProjectFeatures {\n");
            sb.Append("  Google: ").Append(Google).Append("\n");
            sb.Append("  NoPublicIps: ").Append(NoPublicIps).Append("\n");
            sb.Append("  WindowsConverters: ").Append(WindowsConverters).Append("\n");
            sb.Append("  ForceReversedHandshakeDirection: ").Append(ForceReversedHandshakeDirection).Append("\n");
            sb.Append("  NoConverters: ").Append(NoConverters).Append("\n");
            sb.Append("  Vio: ").Append(Vio).Append("\n");
            sb.Append("  AwsPendingSnapshotsForConsistentSnapshot: ").Append(AwsPendingSnapshotsForConsistentSnapshot).Append("\n");
            sb.Append("  NoCloud: ").Append(NoCloud).Append("\n");
            sb.Append("  ConsistentSnapshotCreationIntervalMin: ").Append(ConsistentSnapshotCreationIntervalMin).Append("\n");
            sb.Append("  IsDemo: ").Append(IsDemo).Append("\n");
            sb.Append("  DailyPitNumber: ").Append(DailyPitNumber).Append("\n");
            sb.Append("  MtuSize: ").Append(MtuSize).Append("\n");
            sb.Append("  AllowByolOnDedicatedInstance: ").Append(AllowByolOnDedicatedInstance).Append("\n");
            sb.Append("  ForceNoRescanAfterReboot: ").Append(ForceNoRescanAfterReboot).Append("\n");
            sb.Append("  MaxConverterVolumes: ").Append(MaxConverterVolumes).Append("\n");
            sb.Append("  Azurearm: ").Append(Azurearm).Append("\n");
            sb.Append("  Vcenter: ").Append(Vcenter).Append("\n");
            sb.Append("  AllowedAzIds: ").Append(AllowedAzIds).Append("\n");
            sb.Append("  SubnetFilter: ").Append(SubnetFilter).Append("\n");
            sb.Append("  NoSnapshotConsideredLagMilliseconds: ").Append(NoSnapshotConsideredLagMilliseconds).Append("\n");
            sb.Append("  AwsPendingSnapshotsForDisconnection: ").Append(AwsPendingSnapshotsForDisconnection).Append("\n");
            sb.Append("  NoConvertersWindows: ").Append(NoConvertersWindows).Append("\n");
            sb.Append("  DisableReplicaCreation: ").Append(DisableReplicaCreation).Append("\n");
            sb.Append("  AwsPendingSnapshotsForConsistencyLost: ").Append(AwsPendingSnapshotsForConsistencyLost).Append("\n");
            sb.Append("  Aws: ").Append(Aws).Append("\n");
            sb.Append("  AwsPendingSnapshotsForInconsistentSnapshot: ").Append(AwsPendingSnapshotsForInconsistentSnapshot).Append("\n");
            sb.Append("  MaxReplicatorVolumes: ").Append(MaxReplicatorVolumes).Append("\n");
            sb.Append("  AllowRecoveryPlans: ").Append(AllowRecoveryPlans).Append("\n");
            sb.Append("  SnapshotCreationIntervalMin: ").Append(SnapshotCreationIntervalMin).Append("\n");
            sb.Append("  SnapshotOnDemandTimeout: ").Append(SnapshotOnDemandTimeout).Append("\n");
            sb.Append("  AllowArchiving: ").Append(AllowArchiving).Append("\n");
            sb.Append("  AllowNoRescanAfterReboot: ").Append(AllowNoRescanAfterReboot).Append("\n");
            sb.Append("  CustomReplicatorInstanceType: ").Append(CustomReplicatorInstanceType).Append("\n");
            sb.Append("  DisableSnapshotOnDemand: ").Append(DisableSnapshotOnDemand).Append("\n");
            sb.Append("  DisableInstall: ").Append(DisableInstall).Append("\n");
            sb.Append("  Hdd: ").Append(Hdd).Append("\n");
            sb.Append("  SnapshotCreationIntervalMax: ").Append(SnapshotCreationIntervalMax).Append("\n");
            sb.Append("  CeAdminProperties: ").Append(CeAdminProperties).Append("\n");
            sb.Append("  Azure: ").Append(Azure).Append("\n");
            sb.Append("  AwsPendingSnapshotsForUserInitiated: ").Append(AwsPendingSnapshotsForUserInitiated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllProjectFeatures);
        }

        /// <summary>
        /// Returns true if AllProjectFeatures instances are equal
        /// </summary>
        /// <param name="input">Instance of AllProjectFeatures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllProjectFeatures input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Google == input.Google ||
                    (this.Google != null &&
                    this.Google.Equals(input.Google))
                ) && 
                (
                    this.NoPublicIps == input.NoPublicIps ||
                    (this.NoPublicIps != null &&
                    this.NoPublicIps.Equals(input.NoPublicIps))
                ) && 
                (
                    this.WindowsConverters == input.WindowsConverters ||
                    (this.WindowsConverters != null &&
                    this.WindowsConverters.Equals(input.WindowsConverters))
                ) && 
                (
                    this.ForceReversedHandshakeDirection == input.ForceReversedHandshakeDirection ||
                    (this.ForceReversedHandshakeDirection != null &&
                    this.ForceReversedHandshakeDirection.Equals(input.ForceReversedHandshakeDirection))
                ) && 
                (
                    this.NoConverters == input.NoConverters ||
                    (this.NoConverters != null &&
                    this.NoConverters.Equals(input.NoConverters))
                ) && 
                (
                    this.Vio == input.Vio ||
                    (this.Vio != null &&
                    this.Vio.Equals(input.Vio))
                ) && 
                (
                    this.AwsPendingSnapshotsForConsistentSnapshot == input.AwsPendingSnapshotsForConsistentSnapshot ||
                    (this.AwsPendingSnapshotsForConsistentSnapshot != null &&
                    this.AwsPendingSnapshotsForConsistentSnapshot.Equals(input.AwsPendingSnapshotsForConsistentSnapshot))
                ) && 
                (
                    this.NoCloud == input.NoCloud ||
                    (this.NoCloud != null &&
                    this.NoCloud.Equals(input.NoCloud))
                ) && 
                (
                    this.ConsistentSnapshotCreationIntervalMin == input.ConsistentSnapshotCreationIntervalMin ||
                    (this.ConsistentSnapshotCreationIntervalMin != null &&
                    this.ConsistentSnapshotCreationIntervalMin.Equals(input.ConsistentSnapshotCreationIntervalMin))
                ) && 
                (
                    this.IsDemo == input.IsDemo ||
                    (this.IsDemo != null &&
                    this.IsDemo.Equals(input.IsDemo))
                ) && 
                (
                    this.DailyPitNumber == input.DailyPitNumber ||
                    (this.DailyPitNumber != null &&
                    this.DailyPitNumber.Equals(input.DailyPitNumber))
                ) && 
                (
                    this.MtuSize == input.MtuSize ||
                    (this.MtuSize != null &&
                    this.MtuSize.Equals(input.MtuSize))
                ) && 
                (
                    this.AllowByolOnDedicatedInstance == input.AllowByolOnDedicatedInstance ||
                    (this.AllowByolOnDedicatedInstance != null &&
                    this.AllowByolOnDedicatedInstance.Equals(input.AllowByolOnDedicatedInstance))
                ) && 
                (
                    this.ForceNoRescanAfterReboot == input.ForceNoRescanAfterReboot ||
                    (this.ForceNoRescanAfterReboot != null &&
                    this.ForceNoRescanAfterReboot.Equals(input.ForceNoRescanAfterReboot))
                ) && 
                (
                    this.MaxConverterVolumes == input.MaxConverterVolumes ||
                    (this.MaxConverterVolumes != null &&
                    this.MaxConverterVolumes.Equals(input.MaxConverterVolumes))
                ) && 
                (
                    this.Azurearm == input.Azurearm ||
                    (this.Azurearm != null &&
                    this.Azurearm.Equals(input.Azurearm))
                ) && 
                (
                    this.Vcenter == input.Vcenter ||
                    (this.Vcenter != null &&
                    this.Vcenter.Equals(input.Vcenter))
                ) && 
                (
                    this.AllowedAzIds == input.AllowedAzIds ||
                    (this.AllowedAzIds != null &&
                    this.AllowedAzIds.Equals(input.AllowedAzIds))
                ) && 
                (
                    this.SubnetFilter == input.SubnetFilter ||
                    (this.SubnetFilter != null &&
                    this.SubnetFilter.Equals(input.SubnetFilter))
                ) && 
                (
                    this.NoSnapshotConsideredLagMilliseconds == input.NoSnapshotConsideredLagMilliseconds ||
                    (this.NoSnapshotConsideredLagMilliseconds != null &&
                    this.NoSnapshotConsideredLagMilliseconds.Equals(input.NoSnapshotConsideredLagMilliseconds))
                ) && 
                (
                    this.AwsPendingSnapshotsForDisconnection == input.AwsPendingSnapshotsForDisconnection ||
                    (this.AwsPendingSnapshotsForDisconnection != null &&
                    this.AwsPendingSnapshotsForDisconnection.Equals(input.AwsPendingSnapshotsForDisconnection))
                ) && 
                (
                    this.NoConvertersWindows == input.NoConvertersWindows ||
                    (this.NoConvertersWindows != null &&
                    this.NoConvertersWindows.Equals(input.NoConvertersWindows))
                ) && 
                (
                    this.DisableReplicaCreation == input.DisableReplicaCreation ||
                    (this.DisableReplicaCreation != null &&
                    this.DisableReplicaCreation.Equals(input.DisableReplicaCreation))
                ) && 
                (
                    this.AwsPendingSnapshotsForConsistencyLost == input.AwsPendingSnapshotsForConsistencyLost ||
                    (this.AwsPendingSnapshotsForConsistencyLost != null &&
                    this.AwsPendingSnapshotsForConsistencyLost.Equals(input.AwsPendingSnapshotsForConsistencyLost))
                ) && 
                (
                    this.Aws == input.Aws ||
                    (this.Aws != null &&
                    this.Aws.Equals(input.Aws))
                ) && 
                (
                    this.AwsPendingSnapshotsForInconsistentSnapshot == input.AwsPendingSnapshotsForInconsistentSnapshot ||
                    (this.AwsPendingSnapshotsForInconsistentSnapshot != null &&
                    this.AwsPendingSnapshotsForInconsistentSnapshot.Equals(input.AwsPendingSnapshotsForInconsistentSnapshot))
                ) && 
                (
                    this.MaxReplicatorVolumes == input.MaxReplicatorVolumes ||
                    (this.MaxReplicatorVolumes != null &&
                    this.MaxReplicatorVolumes.Equals(input.MaxReplicatorVolumes))
                ) && 
                (
                    this.AllowRecoveryPlans == input.AllowRecoveryPlans ||
                    (this.AllowRecoveryPlans != null &&
                    this.AllowRecoveryPlans.Equals(input.AllowRecoveryPlans))
                ) && 
                (
                    this.SnapshotCreationIntervalMin == input.SnapshotCreationIntervalMin ||
                    (this.SnapshotCreationIntervalMin != null &&
                    this.SnapshotCreationIntervalMin.Equals(input.SnapshotCreationIntervalMin))
                ) && 
                (
                    this.SnapshotOnDemandTimeout == input.SnapshotOnDemandTimeout ||
                    (this.SnapshotOnDemandTimeout != null &&
                    this.SnapshotOnDemandTimeout.Equals(input.SnapshotOnDemandTimeout))
                ) && 
                (
                    this.AllowArchiving == input.AllowArchiving ||
                    (this.AllowArchiving != null &&
                    this.AllowArchiving.Equals(input.AllowArchiving))
                ) && 
                (
                    this.AllowNoRescanAfterReboot == input.AllowNoRescanAfterReboot ||
                    (this.AllowNoRescanAfterReboot != null &&
                    this.AllowNoRescanAfterReboot.Equals(input.AllowNoRescanAfterReboot))
                ) && 
                (
                    this.CustomReplicatorInstanceType == input.CustomReplicatorInstanceType ||
                    (this.CustomReplicatorInstanceType != null &&
                    this.CustomReplicatorInstanceType.Equals(input.CustomReplicatorInstanceType))
                ) && 
                (
                    this.DisableSnapshotOnDemand == input.DisableSnapshotOnDemand ||
                    (this.DisableSnapshotOnDemand != null &&
                    this.DisableSnapshotOnDemand.Equals(input.DisableSnapshotOnDemand))
                ) && 
                (
                    this.DisableInstall == input.DisableInstall ||
                    (this.DisableInstall != null &&
                    this.DisableInstall.Equals(input.DisableInstall))
                ) && 
                (
                    this.Hdd == input.Hdd ||
                    (this.Hdd != null &&
                    this.Hdd.Equals(input.Hdd))
                ) && 
                (
                    this.SnapshotCreationIntervalMax == input.SnapshotCreationIntervalMax ||
                    (this.SnapshotCreationIntervalMax != null &&
                    this.SnapshotCreationIntervalMax.Equals(input.SnapshotCreationIntervalMax))
                ) && 
                (
                    this.CeAdminProperties == input.CeAdminProperties ||
                    (this.CeAdminProperties != null &&
                    this.CeAdminProperties.Equals(input.CeAdminProperties))
                ) && 
                (
                    this.Azure == input.Azure ||
                    (this.Azure != null &&
                    this.Azure.Equals(input.Azure))
                ) && 
                (
                    this.AwsPendingSnapshotsForUserInitiated == input.AwsPendingSnapshotsForUserInitiated ||
                    (this.AwsPendingSnapshotsForUserInitiated != null &&
                    this.AwsPendingSnapshotsForUserInitiated.Equals(input.AwsPendingSnapshotsForUserInitiated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Google != null)
                    hashCode = hashCode * 59 + this.Google.GetHashCode();
                if (this.NoPublicIps != null)
                    hashCode = hashCode * 59 + this.NoPublicIps.GetHashCode();
                if (this.WindowsConverters != null)
                    hashCode = hashCode * 59 + this.WindowsConverters.GetHashCode();
                if (this.ForceReversedHandshakeDirection != null)
                    hashCode = hashCode * 59 + this.ForceReversedHandshakeDirection.GetHashCode();
                if (this.NoConverters != null)
                    hashCode = hashCode * 59 + this.NoConverters.GetHashCode();
                if (this.Vio != null)
                    hashCode = hashCode * 59 + this.Vio.GetHashCode();
                if (this.AwsPendingSnapshotsForConsistentSnapshot != null)
                    hashCode = hashCode * 59 + this.AwsPendingSnapshotsForConsistentSnapshot.GetHashCode();
                if (this.NoCloud != null)
                    hashCode = hashCode * 59 + this.NoCloud.GetHashCode();
                if (this.ConsistentSnapshotCreationIntervalMin != null)
                    hashCode = hashCode * 59 + this.ConsistentSnapshotCreationIntervalMin.GetHashCode();
                if (this.IsDemo != null)
                    hashCode = hashCode * 59 + this.IsDemo.GetHashCode();
                if (this.DailyPitNumber != null)
                    hashCode = hashCode * 59 + this.DailyPitNumber.GetHashCode();
                if (this.MtuSize != null)
                    hashCode = hashCode * 59 + this.MtuSize.GetHashCode();
                if (this.AllowByolOnDedicatedInstance != null)
                    hashCode = hashCode * 59 + this.AllowByolOnDedicatedInstance.GetHashCode();
                if (this.ForceNoRescanAfterReboot != null)
                    hashCode = hashCode * 59 + this.ForceNoRescanAfterReboot.GetHashCode();
                if (this.MaxConverterVolumes != null)
                    hashCode = hashCode * 59 + this.MaxConverterVolumes.GetHashCode();
                if (this.Azurearm != null)
                    hashCode = hashCode * 59 + this.Azurearm.GetHashCode();
                if (this.Vcenter != null)
                    hashCode = hashCode * 59 + this.Vcenter.GetHashCode();
                if (this.AllowedAzIds != null)
                    hashCode = hashCode * 59 + this.AllowedAzIds.GetHashCode();
                if (this.SubnetFilter != null)
                    hashCode = hashCode * 59 + this.SubnetFilter.GetHashCode();
                if (this.NoSnapshotConsideredLagMilliseconds != null)
                    hashCode = hashCode * 59 + this.NoSnapshotConsideredLagMilliseconds.GetHashCode();
                if (this.AwsPendingSnapshotsForDisconnection != null)
                    hashCode = hashCode * 59 + this.AwsPendingSnapshotsForDisconnection.GetHashCode();
                if (this.NoConvertersWindows != null)
                    hashCode = hashCode * 59 + this.NoConvertersWindows.GetHashCode();
                if (this.DisableReplicaCreation != null)
                    hashCode = hashCode * 59 + this.DisableReplicaCreation.GetHashCode();
                if (this.AwsPendingSnapshotsForConsistencyLost != null)
                    hashCode = hashCode * 59 + this.AwsPendingSnapshotsForConsistencyLost.GetHashCode();
                if (this.Aws != null)
                    hashCode = hashCode * 59 + this.Aws.GetHashCode();
                if (this.AwsPendingSnapshotsForInconsistentSnapshot != null)
                    hashCode = hashCode * 59 + this.AwsPendingSnapshotsForInconsistentSnapshot.GetHashCode();
                if (this.MaxReplicatorVolumes != null)
                    hashCode = hashCode * 59 + this.MaxReplicatorVolumes.GetHashCode();
                if (this.AllowRecoveryPlans != null)
                    hashCode = hashCode * 59 + this.AllowRecoveryPlans.GetHashCode();
                if (this.SnapshotCreationIntervalMin != null)
                    hashCode = hashCode * 59 + this.SnapshotCreationIntervalMin.GetHashCode();
                if (this.SnapshotOnDemandTimeout != null)
                    hashCode = hashCode * 59 + this.SnapshotOnDemandTimeout.GetHashCode();
                if (this.AllowArchiving != null)
                    hashCode = hashCode * 59 + this.AllowArchiving.GetHashCode();
                if (this.AllowNoRescanAfterReboot != null)
                    hashCode = hashCode * 59 + this.AllowNoRescanAfterReboot.GetHashCode();
                if (this.CustomReplicatorInstanceType != null)
                    hashCode = hashCode * 59 + this.CustomReplicatorInstanceType.GetHashCode();
                if (this.DisableSnapshotOnDemand != null)
                    hashCode = hashCode * 59 + this.DisableSnapshotOnDemand.GetHashCode();
                if (this.DisableInstall != null)
                    hashCode = hashCode * 59 + this.DisableInstall.GetHashCode();
                if (this.Hdd != null)
                    hashCode = hashCode * 59 + this.Hdd.GetHashCode();
                if (this.SnapshotCreationIntervalMax != null)
                    hashCode = hashCode * 59 + this.SnapshotCreationIntervalMax.GetHashCode();
                if (this.CeAdminProperties != null)
                    hashCode = hashCode * 59 + this.CeAdminProperties.GetHashCode();
                if (this.Azure != null)
                    hashCode = hashCode * 59 + this.Azure.GetHashCode();
                if (this.AwsPendingSnapshotsForUserInitiated != null)
                    hashCode = hashCode * 59 + this.AwsPendingSnapshotsForUserInitiated.GetHashCode();
                return hashCode;
            }
        }
    }
}
