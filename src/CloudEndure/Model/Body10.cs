/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// Body10
    /// </summary>
    [DataContract]
        public partial class Body10 :  IEquatable<Body10>
    {
        /// <summary>
        /// Defines ExecutionMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ExecutionModeEnum
        {
            /// <summary>
            /// Enum TEST for value: TEST
            /// </summary>
            [EnumMember(Value = "TEST")]
            TEST = 1,
            /// <summary>
            /// Enum RECOVERY for value: RECOVERY
            /// </summary>
            [EnumMember(Value = "RECOVERY")]
            RECOVERY = 2,
            /// <summary>
            /// Enum CUTOVER for value: CUTOVER
            /// </summary>
            [EnumMember(Value = "CUTOVER")]
            CUTOVER = 3,
            /// <summary>
            /// Enum CLEANUP for value: CLEANUP
            /// </summary>
            [EnumMember(Value = "CLEANUP")]
            CLEANUP = 4        }
        /// <summary>
        /// Gets or Sets ExecutionMode
        /// </summary>
        [DataMember(Name="executionMode", EmitDefaultValue=false)]
        public ExecutionModeEnum ExecutionMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Body10" /> class.
        /// </summary>
        /// <param name="recoveryPlanID">recoveryPlanID (required).</param>
        /// <param name="executionMode">executionMode (required).</param>
        /// <param name="pointInTimeID">pointInTimeID.</param>
        public Body10(string recoveryPlanID = default(string), ExecutionModeEnum executionMode = default(ExecutionModeEnum), string pointInTimeID = default(string))
        {
            // to ensure "recoveryPlanID" is required (not null)
            if (recoveryPlanID == null)
            {
                throw new InvalidDataException("recoveryPlanID is a required property for Body10 and cannot be null");
            }
            else
            {
                this.RecoveryPlanID = recoveryPlanID;
            }
            // to ensure "executionMode" is required (not null)
            if (executionMode == null)
            {
                throw new InvalidDataException("executionMode is a required property for Body10 and cannot be null");
            }
            else
            {
                this.ExecutionMode = executionMode;
            }
            this.PointInTimeID = pointInTimeID;
        }
        
        /// <summary>
        /// Gets or Sets RecoveryPlanID
        /// </summary>
        [DataMember(Name="recoveryPlanID", EmitDefaultValue=false)]
        public string RecoveryPlanID { get; set; }


        /// <summary>
        /// Gets or Sets PointInTimeID
        /// </summary>
        [DataMember(Name="pointInTimeID", EmitDefaultValue=false)]
        public string PointInTimeID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body10 {\n");
            sb.Append("  RecoveryPlanID: ").Append(RecoveryPlanID).Append("\n");
            sb.Append("  ExecutionMode: ").Append(ExecutionMode).Append("\n");
            sb.Append("  PointInTimeID: ").Append(PointInTimeID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body10);
        }

        /// <summary>
        /// Returns true if Body10 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body10 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body10 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecoveryPlanID == input.RecoveryPlanID ||
                    (this.RecoveryPlanID != null &&
                    this.RecoveryPlanID.Equals(input.RecoveryPlanID))
                ) && 
                (
                    this.ExecutionMode == input.ExecutionMode ||
                    (this.ExecutionMode != null &&
                    this.ExecutionMode.Equals(input.ExecutionMode))
                ) && 
                (
                    this.PointInTimeID == input.PointInTimeID ||
                    (this.PointInTimeID != null &&
                    this.PointInTimeID.Equals(input.PointInTimeID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecoveryPlanID != null)
                    hashCode = hashCode * 59 + this.RecoveryPlanID.GetHashCode();
                if (this.ExecutionMode != null)
                    hashCode = hashCode * 59 + this.ExecutionMode.GetHashCode();
                if (this.PointInTimeID != null)
                    hashCode = hashCode * 59 + this.PointInTimeID.GetHashCode();
                return hashCode;
            }
        }
    }
}
