/* 
 * CloudEndure API documentation
 *
 * Â© 2019 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\". 
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = CloudEndure.Client.SwaggerDateConverter;

namespace CloudEndure.Model
{
    /// <summary>
    /// AccountLink
    /// </summary>
    [DataContract]
        public partial class AccountLink :  IEquatable<AccountLink>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountLink" /> class.
        /// </summary>
        /// <param name="requestType">requestType.</param>
        /// <param name="email">email.</param>
        public AccountLink(string requestType = default(string), string email = default(string))
        {
            this.RequestType = requestType;
            this.Email = email;
        }
        
        /// <summary>
        /// Gets or Sets RequestType
        /// </summary>
        [DataMember(Name="request_type", EmitDefaultValue=false)]
        public string RequestType { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets RequestLink
        /// </summary>
        [DataMember(Name="request_link", EmitDefaultValue=false)]
        public string RequestLink { get; private set; }

        /// <summary>
        /// Gets or Sets AccountUuid
        /// </summary>
        [DataMember(Name="account_uuid", EmitDefaultValue=false)]
        public string AccountUuid { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountLink {\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  RequestLink: ").Append(RequestLink).Append("\n");
            sb.Append("  AccountUuid: ").Append(AccountUuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountLink);
        }

        /// <summary>
        /// Returns true if AccountLink instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountLink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountLink input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestType == input.RequestType ||
                    (this.RequestType != null &&
                    this.RequestType.Equals(input.RequestType))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.RequestLink == input.RequestLink ||
                    (this.RequestLink != null &&
                    this.RequestLink.Equals(input.RequestLink))
                ) && 
                (
                    this.AccountUuid == input.AccountUuid ||
                    (this.AccountUuid != null &&
                    this.AccountUuid.Equals(input.AccountUuid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestType != null)
                    hashCode = hashCode * 59 + this.RequestType.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.RequestLink != null)
                    hashCode = hashCode * 59 + this.RequestLink.GetHashCode();
                if (this.AccountUuid != null)
                    hashCode = hashCode * 59 + this.AccountUuid.GetHashCode();
                return hashCode;
            }
        }
    }
}
